{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\team-b-project\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.jsx\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { runnerCount } from './comSokuho/runnerCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport { useEffect, useState } from 'react';\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\";\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\";\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\n\n//プルダウン\nimport { PullDown } from './comSokuho/PullDown/PullDown';\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\n\n//バックエンドのurlを取得\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\n\n//選手読み込み\nconst setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\n  const ditectPitcher = data => {\n    let result = 0;\n    data.map((data, ind) => {\n      if (data.position === \"ピッチャー\") {\n        result = ind;\n      }\n    });\n    return result;\n  };\n  fetch(backendUrl + \"/member/starting_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(data1 => {\n    setBattingOrder(data1);\n    fetch(backendUrl + \"/member/starting_member_call\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        game_id: urlGameId,\n        school_id: urlSchoolId2\n      })\n    }).then(response => response.json()).then(data2 => {\n      setBattingOrder2(data2);\n      nowPlayingMember[0].pitcher = ditectPitcher(data2);\n      nowPlayingMember[1].pitcher = ditectPitcher(data1);\n      setNowPlayingMember(nowPlayingMember);\n    });\n  });\n};\n\n//自作プルダウン\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected) => {\n  //pulldownIdは0でいいです。\n  //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\n  //idテキストは連想配列の属性を書きます。\n  //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\n  //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tekitouni\",\n      onChange: e => {\n        //ステイトが変化すると再描画させるための文、これがないと再描画されない\n        //なお、消すと再描画はされないが内部は変化する\n        nowSelected = nowSelected.slice(0, nowSelected.length);\n        nowSelected[pulldownId] = e.target.value;\n        setNowSelected(nowSelected);\n        console.log(nowSelected);\n      },\n      children: ArrayList.map((component, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ind,\n        children: component[idText]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n//一時打席情報登録用のテーブル作成\nconst TmpTableCreate = urlGameId => {\n  fetch(backendUrl + \"/daseki/tmp_table_create\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//テーブル存在確認\n_c = TmpTableCreate;\nconst TmpTableCheck = (urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll) => {\n  fetch(backendUrl + \"/daseki/tmp_table_check\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    if (data === \"not exist\") {\n      TmpTableCreate(urlGameId);\n    } else if (data === \"exist\") {\n      TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState);\n    }\n  });\n};\n\n////試合情報受け取り（速報用）\n_c2 = TmpTableCheck;\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState) => {\n  fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n\n    //空っぽなら虫\n    if (data.length !== 0) {\n      let latestDasaki = data[data.length - 1];\n\n      //イニング取得\n      if (Math.floor(latestDasaki.inning / 100) >= 1) {\n        setNowIningState([latestDasaki.inning % 100 - 1, Math.floor(latestDasaki.inning / 100) - 1]);\n      } else {\n        setNowIningState([latestDasaki.inning % 10 - 1, Math.floor(latestDasaki.inning / 10) - 1]);\n      }\n\n      //アウトカウント取得\n      setNowOutCountState(latestDasaki.outcount);\n\n      //ランナー取得\n      setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"]);\n\n      //スコアの取得\n      let initialSchoolId = data[0].school_id;\n      const {\n        Score\n      } = require(\"../../../../DB/Score\");\n      let SolveScore = Score;\n      let inningCount = 0;\n      let leastSchoolId = data[0].school_id;\n      data.map(u => {\n        if (initialSchoolId === u.school_id) {\n          if (SolveScore[0][inningCount] === null) SolveScore[0][inningCount] = 0;\n          if (leastSchoolId !== u.school_id) inningCount = inningCount + 1;\n          console.log(SolveScore[0][inningCount]);\n          SolveScore[0][inningCount] = SolveScore[0][inningCount] + u.score;\n          leastSchoolId = u.school_id;\n        } else {\n          if (SolveScore[1][inningCount] === null) SolveScore[1][inningCount] = 0;\n          SolveScore[1][inningCount] = SolveScore[1][inningCount] + u.score;\n          leastSchoolId = u.school_id;\n        }\n      });\n      console.log(SolveScore);\n      setScoreState(SolveScore);\n\n      //今現在のプレイヤー取得\n      fetch(backendUrl + \"/member/starting_member_call\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          game_id: urlGameId,\n          school_id: urlSchoolId\n        })\n      }).then(response => response.json()).then(data1 => {\n        setBattingOrder(data1);\n        fetch(backendUrl + \"/member/starting_member_call\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            game_id: urlGameId,\n            school_id: urlSchoolId2\n          })\n        }).then(response => response.json()).then(data2 => {\n          let teamABatter = data1.findIndex(u => u.player_id === latestDasaki.player_id);\n          let teamAPitchar = data2.findIndex(u => u.player_id === latestDasaki.pitchar_id);\n          let teamBBatter = data2.findIndex(u => u.player_id === latestDasaki.player_id);\n          let teamBPitchar = data1.findIndex(u => u.player_id === latestDasaki.pitchar_id);\n          if (teamABatter === -1) teamABatter = 0;\n          if (teamAPitchar === -1) teamAPitchar = 0;\n          if (teamBBatter === -1) teamBBatter = 0;\n          if (teamBPitchar === -1) teamBPitchar = 0;\n          setNowPlayingMember([{\n            batter: teamABatter,\n            pitcher: teamAPitchar\n          }, {\n            batter: teamBBatter,\n            pitcher: teamBPitchar\n          }]);\n        });\n      });\n\n      // //後攻チームのメンバー取得\n      // if ((latestDasaki.inning / 100 >= 2) || (Math.floor(latestDasaki.inning / 10) === 2)) {\n      //     fetch(backendUrl + \"/member/tournament_member_call\", {\n      //         method: \"POST\",\n      //         mode: \"cors\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\",\n      //         },\n      //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId2 }),\n      //     })\n      //         .then((response) => response.json())\n      //         .then((data) => { })\n      // }\n      // //先行チームのメンバー取得\n      // else if ((Math.floor(latestDasaki.inning / 100) === 1) || (Math.floor(latestDasaki.inning / 10) === 1)) {\n      //     fetch(backendUrl + \"/member/tournament_member_call\", {\n      //         method: \"POST\",\n      //         mode: \"cors\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\",\n      //         },\n      //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\n      //     })\n      //         .then((response) => response.json())\n      //         .then((data) => {\n\n      //         })\n\n      //     console.log(latestDasaki.player_id)\n      // }\n    }\n  });\n};\n\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\n_c3 = TmpDasekiCall;\nconst DasekiRegister = sendInfo => {\n  fetch(backendUrl + \"/daseki/daseki_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//選手登録された選手読み込む\n_c4 = DasekiRegister;\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\n  fetch(backendUrl + \"/member/tournament_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      tournament_id: urlTournamentId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(data => {\n    setRegisteredMember(data);\n  });\n};\nconst canvasSize = 1000;\nconst homebase = 400;\nconst InputPlayGame = () => {\n  _s();\n  //ページ遷移用\n  const navigate = useNavigate();\n  const PageTransition = url => {\n    navigate(url);\n  };\n\n  //urlから値を読み出す\n  const [searchParams] = useSearchParams();\n  const urlTournamentId = searchParams.get(\"urlTournamentId\");\n  const urlTournamentName = searchParams.get(\"urlTournamentName\");\n  const urlSchoolId = searchParams.get(\"urlSchoolId\");\n  const urlSchoolName = searchParams.get(\"urlSchoolName\");\n  const urlSchoolId2 = searchParams.get(\"urlSchoolId2\");\n  const urlSchoolName2 = searchParams.get(\"urlSchoolName2\");\n  const urlGameId = searchParams.get(\"urlGameId\");\n\n  //Score記録\n  const {\n    Score\n  } = require(\"../../../../DB/Score\");\n  const [scoreState, setScoreState] = useState(Score);\n\n  //Scoreの加算値の監視\n  const [addScoreState, setAddScoreState] = useState(0);\n\n  //今のイニング\n  const [nowIningState, setNowIningState] = useState([0, 0]);\n\n  //自由記述内容を監視\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n\n  //自由記述編集モードのフラグ\n  const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false);\n\n  //多分打球の種類だと思われる\n  const [flag, setFlag] = useState(2);\n\n  //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\n  const [batterResult, setBatterResult] = useState(0);\n\n  //緑プルダウン用\n  const [nowPosition, setNowPosition] = useState(15);\n\n  //アウトカウント\n  const [nowOutCountState, setNowOutCountState] = useState(0);\n\n  //ランナーカウント\n  const [runnerCountState, setRunnerCountState] = useState([false, false, false]);\n\n  //選手登録情報を読み込む\n  const [registeredMember1, setRegisteredMember1] = useState([]);\n  const [registeredMember2, setRegisteredMember2] = useState([]);\n\n  //打席一覧情報のステイト\n  const [dasekiAll, setDasekiAll] = useState([]);\n\n  //打順と打者のリスト\n  const [battingOrder, setBattingOrder] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n  const [battingOrder2, setBattingOrder2] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n\n  //今の打順と今のピッチャーが誰なのかを2チーム文記録する\n  const [nowPlayingMember, setNowPlayingMember] = useState([{\n    batter: 0,\n    pitcher: 0\n  }, {\n    batter: 0,\n    pitcher: 0\n  }]);\n\n  //代打フラグ 0なら代打でない 1なら代打\n  const [isPinch, setIsPinch] = useState(0);\n\n  //画面解像度取得\n  var sw = document.documentElement.clientWidth; // 画面の横幅\n  var sh = document.documentElement.clientHeight; // 画面の高さ\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n  //一つのStateで管理しようぜ的な試み\n  //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      //const img = new Image()\n      //img.src = \"img.jpg\" // 描画する画像など\n\n      //img.onload = () => {\n\n      //context.drawImage(img, 0, 0)\n      // 更にこれに続いて何か処理をしたい場合\n\n      //削除\n      context.clearRect(0, 0, canvasSize, canvasSize);\n\n      //緑グラウンド\n      context.beginPath();\n      context.fillStyle = \"green\";\n      context.moveTo(homebase, homebase);\n      context.arc(homebase, homebase, homebase, -Math.PI / 4, 5 * Math.PI / 4, true);\n      context.closePath();\n      context.fill();\n\n      //茶グラウンド\n      context.beginPath();\n      context.fillStyle = \"sienna\";\n      context.moveTo(homebase, homebase);\n      context.arc(homebase, homebase, 3.5 * homebase / 5, -Math.PI / 4, 5 * Math.PI / 4, true);\n      context.closePath();\n      context.fill();\n\n      //白線\n      context.beginPath();\n      context.moveTo(homebase, homebase);\n      context.lineTo(homebase * 5 / 4, homebase * 3 / 4);\n      context.lineTo(homebase, homebase / 2);\n      context.lineTo(homebase * 3 / 4, homebase * 3 / 4);\n      context.strokeStyle = \"white\";\n      context.lineWidth = 2;\n      context.closePath();\n      context.stroke();\n      const w = 0.03 * homebase; //ベースの幅\n      const margin = 10; //ベース位置調整用\n\n      //ベースの色\n      let baseColor2 = [];\n      for (let i = 0; i < 3; i++) {\n        if (runnerCountState[i]) {\n          baseColor2[i] = \"blue\";\n          console.log(baseColor2[i]);\n        } else {\n          baseColor2[i] = \"white\";\n        }\n      }\n      context.strokeStyle = \"black\";\n\n      //３塁ベース\n      context.fillStyle = baseColor2[2];\n      context.beginPath();\n      context.moveTo(homebase * 3 / 4, homebase * 3 / 4 - margin);\n      context.lineTo(homebase * 3 / 4 - w, homebase * 3 / 4 + w - margin);\n      context.lineTo(homebase * 3 / 4, homebase * 3 / 4 + w * 2 - margin);\n      context.lineTo(homebase * 3 / 4 + w, homebase * 3 / 4 + w - margin);\n      context.closePath();\n      context.fill();\n      context.lineWidth = 1;\n      context.stroke();\n\n      //2塁ベース\n      context.fillStyle = baseColor2[1];\n      context.beginPath();\n      context.moveTo(homebase, homebase / 2 - margin);\n      context.lineTo(homebase - w, homebase / 2 + w - margin);\n      context.lineTo(homebase, homebase / 2 + w * 2 - margin);\n      context.lineTo(homebase + w, homebase / 2 + w - margin);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //1塁ベース\n      context.fillStyle = baseColor2[0];\n      context.beginPath();\n      context.moveTo(homebase * 5 / 4, homebase * 3 / 4 - margin);\n      context.lineTo(homebase * 5 / 4 - w, homebase * 3 / 4 + w - margin);\n      context.lineTo(homebase * 5 / 4, homebase * 3 / 4 + w * 2 - margin);\n      context.lineTo(homebase * 5 / 4 + w, homebase * 3 / 4 + w - margin);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      context.fillStyle = \"white\";\n      //ホームベース\n      context.beginPath();\n      context.moveTo(homebase + w * 2 / 3, homebase - w * 2 / 3);\n      context.lineTo(homebase - w * 2 / 3, homebase - w * 2 / 3);\n      context.lineTo(homebase - w * 2 / 3, homebase + w / 3);\n      context.lineTo(homebase, homebase + w);\n      context.lineTo(homebase + w * 2 / 3, homebase + w / 3);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //打球\n      context.beginPath();\n      context.moveTo(homebase, homebase);\n\n      // let flag = 2;   //１が直線、２がフライ、3がゴロ\n\n      if (flag === 1) {\n        console.log(\"flag1\");\n        context.lineTo(canvasX1, canvasY1);\n      }\n      if (flag === 2) {\n        let start = {\n          x: 500,\n          y: 500\n        };\n        let cp = {\n          x: 500,\n          y: start.y / 5 * 3\n        }; //ここで曲がり具合調整\n        context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\n      }\n      if (flag === 3) {\n        console.log(\"flag3\");\n        drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\n      }\n      context.strokeStyle = \"red\";\n      context.lineWidth = 5;\n      context.stroke();\n\n      //setLoaded(true)\n      //}\n\n      // 波線描画\n      // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\n\n      function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\n        const BEGIN = 0,\n          CTRL = 1,\n          END = 2;\n        const x1 = 0,\n          y1 = 1;\n        var distance = calcDistance(x, y, mx, my);\n        var cycle = Math.floor(distance / waveLen);\n        var ps = [[x, y], [0, 0], [x, y]];\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\n        var rad = calcRadian(x, y, mx, my);\n        if (0 !== rad) {\n          ctx.translate(x, y);\n          ctx.rotate(rad);\n          ctx.translate(-x, -y);\n        }\n        for (var i = 0; i < cycle; i++) {\n          ps[END][x1] += waveLen;\n          ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n          ps[CTRL][y1] = ps[BEGIN][y1] + (i % 2 !== 0 ? -amplitude : amplitude);\n          ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n          ps[BEGIN][x1] = ps[END][x1];\n          ps[BEGIN][y1] = ps[END][y1];\n        }\n        ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\n        ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n        ps[CTRL][y1] = ps[BEGIN][y1] + (cycle % 2 !== 0 ? -amplitude : amplitude);\n        ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      // 2点間座標からラジアン算出\n      function calcRadian(x, y, mx, my) {\n        return Math.atan2(my - y, mx - x);\n      }\n\n      // 2点間座標の距離算出\n      function calcDistance(x, y, mx, my) {\n        return Math.hypot(my - y, mx - x);\n      }\n    }\n  }, [canvasX1, canvasY1, flag, runnerCountState]);\n  useEffect(() => {\n    //データベースからデータをもらうために呼び出す\n    setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember);\n    loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId);\n    loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2);\n\n    //テーブル存在確認\n    TmpTableCheck(urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      TitleText: \"速報入力画面\",\n      PageTransition: PageTransition,\n      valueUrl: -1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditPoint, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scoreBoard\",\n        children: scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionButtons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outCountsAndRunnerCounts\",\n        children: [outCount(nowOutCountState, setNowOutCountState), runnerCount(runnerCountState, setRunnerCountState)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BatterAndPitcher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BatterPitcher\",\n        children: /*#__PURE__*/_jsxDEV(PullDownMember, {\n          battingOrder: battingOrder,\n          battingOrder2: battingOrder2,\n          setBattingOrder: setBattingOrder,\n          registeredMember1: registeredMember1,\n          registeredMember2: registeredMember2,\n          nowIningState: nowIningState,\n          nowPlayingMember: nowPlayingMember,\n          setNowPlayingMember: setNowPlayingMember,\n          setIsPinch: setIsPinch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeWrite\",\n        children: freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PullDown, {\n        nowPosition: nowPosition,\n        setNowPosition: setNowPosition,\n        setcanvasX1: setcanvasX1,\n        setcanvasY1: setcanvasY1,\n        setFlag: setFlag,\n        setFreeWriteState: setFreeWriteState,\n        setBatterResult: setBatterResult,\n        addScoreState: addScoreState,\n        GameEndPopup_field: GameEndPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diamond\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"800\",\n          height: \"800\",\n          id: \"canvas\",\n          className: \"diamondPng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baseballButtons\",\n          children: BaseballButton(addScoreState, setAddScoreState)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateButton\",\n          children: /*#__PURE__*/_jsxDEV(Popupfield, {\n            nowIningState: nowIningState //今が何回なのか\n            ,\n            setNowIningState: setNowIningState //今が何回なのかの変更関数\n            ,\n            addScoreState: addScoreState,\n            setAddScoreState: setAddScoreState,\n            scoreState: scoreState,\n            setScoreState: setScoreState,\n            nowOutCountState: nowOutCountState,\n            setNowOutCountState: setNowOutCountState,\n            DasekiRegister: DasekiRegister,\n            urlGameId: urlGameId,\n            urlSchoolId: urlSchoolId,\n            urlSchoolId2: urlSchoolId2,\n            nowPlayingMember: nowPlayingMember,\n            setNowPlayingMember: setNowPlayingMember,\n            battingOrder: battingOrder,\n            battingOrder2: battingOrder2,\n            runnerCountState: runnerCountState,\n            freeWriteState: freeWriteState,\n            setFreeWriteState: setFreeWriteState,\n            canvasX1: canvasX1,\n            setcanvasX1: setcanvasX1,\n            canvasY1: canvasY1,\n            setcanvasY1: setcanvasY1,\n            flag: flag,\n            batterResult: batterResult,\n            setBatterResult: setBatterResult,\n            isPinch: isPinch,\n            setIsPinch: setIsPinch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 17\n      }, this), makePulldown(pulldownId, ArrayList, idText, nowSelected, setNowSelected)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 644,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"xyERDUxCyFRWAHIty4qDwoHpvY8=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c5 = InputPlayGame;\nexport default InputPlayGame;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"TmpTableCreate\");\n$RefreshReg$(_c2, \"TmpTableCheck\");\n$RefreshReg$(_c3, \"TmpDasekiCall\");\n$RefreshReg$(_c4, \"DasekiRegister\");\n$RefreshReg$(_c5, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","runnerCount","freeWrite","BaseballButton","useEffect","useState","Popupfield","GameEndPopup","EditPoint","OptionButton","TitleBar","PullDown","PullDownMember","useSearchParams","useNavigate","backendUrl","require","setBatter","setBattingOrder","setBattingOrder2","urlSchoolId","urlSchoolId2","urlGameId","nowPlayingMember","setNowPlayingMember","ditectPitcher","data","result","map","ind","position","fetch","method","mode","headers","body","JSON","stringify","game_id","school_id","then","response","json","data1","data2","pitcher","makePulldown","pulldownId","ArrayList","idText","nowSelected","setNowSelected","e","slice","length","target","value","console","log","component","TmpTableCreate","table_name","text","TmpTableCheck","TmpDasekiCall","urlTournamentId","setNowIningState","setScoreState","setNowOutCountState","registeredMember1","registeredMember2","battingOrder","battingOrder2","setRunnerCountState","setDasekiAll","latestDasaki","Math","floor","inning","outcount","base","initialSchoolId","Score","SolveScore","inningCount","leastSchoolId","u","score","teamABatter","findIndex","player_id","teamAPitchar","pitchar_id","teamBBatter","teamBPitchar","batter","DasekiRegister","sendInfo","loadRegisteredMember","setRegisteredMember","tournament_id","canvasSize","homebase","InputPlayGame","navigate","PageTransition","url","searchParams","get","urlTournamentName","urlSchoolName","urlSchoolName2","scoreState","addScoreState","setAddScoreState","nowIningState","freeWriteState","setFreeWriteState","freeWriteModeFlag","setFreeWriteModeFlag","flag","setFlag","batterResult","setBatterResult","nowPosition","setNowPosition","nowOutCountState","runnerCountState","setRegisteredMember1","setRegisteredMember2","dasekiAll","player_name_kanji","isPinch","setIsPinch","sw","document","documentElement","clientWidth","sh","clientHeight","context","setContext","canvasX1","setcanvasX1","canvasY1","setcanvasY1","canvas","getElementById","canvasContext","getContext","addEventListener","rect","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","width","scaleHeight","height","canvasX","canvasY","clearRect","beginPath","fillStyle","moveTo","arc","PI","closePath","fill","lineTo","strokeStyle","lineWidth","stroke","w","margin","baseColor2","i","start","x","y","cp","quadraticCurveTo","drawWaveLine","mx","my","amplitude","waveLen","color","ctx","BEGIN","CTRL","END","x1","y1","distance","calcDistance","cycle","ps","save","rad","calcRadian","translate","rotate","restore","atan2","hypot"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/team-b-project/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.jsx"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { runnerCount } from './comSokuho/runnerCount';\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport { useEffect, useState } from 'react';\r\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\r\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\"\r\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\"\r\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\r\n\r\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\r\n\r\n//プルダウン\r\nimport { PullDown } from './comSokuho/PullDown/PullDown'\r\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember'\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\n\r\n//バックエンドのurlを取得\r\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\r\n\r\n\r\n//選手読み込み\r\nconst setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\r\n    const ditectPitcher = (data) => {\r\n        let result = 0\r\n        data.map((data, ind) => {\r\n            if (data.position === \"ピッチャー\") {\r\n                result = ind\r\n            }\r\n        })\r\n        return result\r\n    }\r\n\r\n    fetch(backendUrl + \"/member/starting_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data1) => {\r\n            setBattingOrder(data1)\r\n\r\n            fetch(backendUrl + \"/member/starting_member_call\", {\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n            })\r\n                .then((response) => response.json())\r\n                .then((data2) => {\r\n                    setBattingOrder2(data2)\r\n                    nowPlayingMember[0].pitcher = ditectPitcher(data2)\r\n                    nowPlayingMember[1].pitcher = ditectPitcher(data1)\r\n                    setNowPlayingMember(nowPlayingMember)\r\n                })\r\n        })\r\n}\r\n\r\n//自作プルダウン\r\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected) => {\r\n    //pulldownIdは0でいいです。\r\n    //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\r\n    //idテキストは連想配列の属性を書きます。\r\n    //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\r\n    //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\r\n\r\n    return (\r\n        <>\r\n            <select id=\"tekitouni\"\r\n                onChange={(e) => {\r\n                    //ステイトが変化すると再描画させるための文、これがないと再描画されない\r\n                    //なお、消すと再描画はされないが内部は変化する\r\n                    nowSelected = nowSelected.slice(0, nowSelected.length);\r\n                    nowSelected[pulldownId] = e.target.value\r\n                    setNowSelected(nowSelected)\r\n                    console.log(nowSelected)\r\n                }\r\n                }>\r\n                {ArrayList.map((component, ind) => (\r\n                    <option value={ind}>{component[idText]}</option>\r\n                ))\r\n                }\r\n            </select>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n//一時打席情報登録用のテーブル作成\r\nconst TmpTableCreate = (urlGameId) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_create\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//テーブル存在確認\r\nconst TmpTableCheck = (urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_check\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            if (data === \"not exist\") { TmpTableCreate(urlGameId) }\r\n            else if (data === \"exist\") {\r\n                TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n                    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n                    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState\r\n                )\r\n            }\r\n        })\r\n}\r\n\r\n////試合情報受け取り（速報用）\r\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n\r\n            //空っぽなら虫\r\n            if (data.length !== 0) {\r\n                let latestDasaki = data[data.length - 1]\r\n\r\n                //イニング取得\r\n                if (Math.floor(latestDasaki.inning / 100) >= 1) {\r\n                    setNowIningState([latestDasaki.inning % 100 - 1, Math.floor(latestDasaki.inning / 100) - 1])\r\n                }\r\n                else {\r\n                    setNowIningState([latestDasaki.inning % 10 - 1, Math.floor(latestDasaki.inning / 10) - 1])\r\n                }\r\n\r\n                //アウトカウント取得\r\n                setNowOutCountState(latestDasaki.outcount)\r\n\r\n                //ランナー取得\r\n                setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"])\r\n\r\n                //スコアの取得\r\n                let initialSchoolId = data[0].school_id;\r\n                const { Score } = require(\"../../../../DB/Score\")\r\n                let SolveScore = Score\r\n                let inningCount = 0\r\n                let leastSchoolId = data[0].school_id\r\n                data.map((u) => {\r\n                    if (initialSchoolId === u.school_id) {\r\n                        if (SolveScore[0][inningCount] === null) SolveScore[0][inningCount] = 0\r\n                        if (leastSchoolId !== u.school_id) inningCount = inningCount + 1\r\n                        console.log(SolveScore[0][inningCount])\r\n                        SolveScore[0][inningCount] = SolveScore[0][inningCount] + u.score\r\n                        leastSchoolId = u.school_id\r\n                    }\r\n                    else {\r\n                        if (SolveScore[1][inningCount] === null) SolveScore[1][inningCount] = 0\r\n                        SolveScore[1][inningCount] = SolveScore[1][inningCount] + u.score\r\n                        leastSchoolId = u.school_id\r\n                    }\r\n                })\r\n\r\n                console.log(SolveScore)\r\n                setScoreState(SolveScore)\r\n\r\n                //今現在のプレイヤー取得\r\n                fetch(backendUrl + \"/member/starting_member_call\", {\r\n                    method: \"POST\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n                })\r\n                    .then((response) => response.json())\r\n                    .then((data1) => {\r\n                        setBattingOrder(data1)\r\n\r\n                        fetch(backendUrl + \"/member/starting_member_call\", {\r\n                            method: \"POST\",\r\n                            mode: \"cors\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n                        })\r\n                            .then((response) => response.json())\r\n                            .then((data2) => {\r\n\r\n                                let teamABatter = data1.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                let teamAPitchar = data2.findIndex((u) => u.player_id === latestDasaki.pitchar_id)\r\n                                let teamBBatter = data2.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                let teamBPitchar = data1.findIndex((u) => u.player_id === latestDasaki.pitchar_id)\r\n\r\n                                if (teamABatter === -1) teamABatter = 0\r\n                                if (teamAPitchar === -1) teamAPitchar = 0\r\n                                if (teamBBatter === -1) teamBBatter = 0\r\n                                if (teamBPitchar === -1) teamBPitchar = 0\r\n\r\n                                setNowPlayingMember(\r\n                                    [{\r\n                                        batter: teamABatter,\r\n                                        pitcher: teamAPitchar\r\n                                    },\r\n                                    {\r\n                                        batter: teamBBatter,\r\n                                        pitcher: teamBPitchar\r\n                                    }]\r\n                                )\r\n                            })\r\n                    })\r\n\r\n\r\n\r\n                // //後攻チームのメンバー取得\r\n                // if ((latestDasaki.inning / 100 >= 2) || (Math.floor(latestDasaki.inning / 10) === 2)) {\r\n                //     fetch(backendUrl + \"/member/tournament_member_call\", {\r\n                //         method: \"POST\",\r\n                //         mode: \"cors\",\r\n                //         headers: {\r\n                //             \"Content-Type\": \"application/json\",\r\n                //         },\r\n                //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId2 }),\r\n                //     })\r\n                //         .then((response) => response.json())\r\n                //         .then((data) => { })\r\n                // }\r\n                // //先行チームのメンバー取得\r\n                // else if ((Math.floor(latestDasaki.inning / 100) === 1) || (Math.floor(latestDasaki.inning / 10) === 1)) {\r\n                //     fetch(backendUrl + \"/member/tournament_member_call\", {\r\n                //         method: \"POST\",\r\n                //         mode: \"cors\",\r\n                //         headers: {\r\n                //             \"Content-Type\": \"application/json\",\r\n                //         },\r\n                //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n                //     })\r\n                //         .then((response) => response.json())\r\n                //         .then((data) => {\r\n\r\n\r\n\r\n                //         })\r\n\r\n                //     console.log(latestDasaki.player_id)\r\n                // }\r\n            }\r\n\r\n\r\n        })\r\n}\r\n\r\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\r\nconst DasekiRegister = (sendInfo) => {\r\n\r\n    fetch(backendUrl + \"/daseki/daseki_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n}\r\n\r\n\r\n//選手登録された選手読み込む\r\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\r\n\r\n    fetch(backendUrl + \"/member/tournament_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => { setRegisteredMember(data) })\r\n}\r\n\r\n\r\n\r\nconst canvasSize = 1000;\r\nconst homebase = 400;\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    //ページ遷移用\r\n    const navigate = useNavigate()\r\n    const PageTransition = (url) => {\r\n        navigate(url)\r\n    }\r\n\r\n    //urlから値を読み出す\r\n    const [searchParams] = useSearchParams();\r\n    const urlTournamentId = searchParams.get(\"urlTournamentId\")\r\n    const urlTournamentName = searchParams.get(\"urlTournamentName\")\r\n    const urlSchoolId = searchParams.get(\"urlSchoolId\")\r\n    const urlSchoolName = searchParams.get(\"urlSchoolName\")\r\n    const urlSchoolId2 = searchParams.get(\"urlSchoolId2\")\r\n    const urlSchoolName2 = searchParams.get(\"urlSchoolName2\")\r\n    const urlGameId = searchParams.get(\"urlGameId\")\r\n\r\n    //Score記録\r\n    const { Score } = require(\"../../../../DB/Score\")\r\n    const [scoreState, setScoreState] = useState(Score)\r\n\r\n    //Scoreの加算値の監視\r\n    const [addScoreState, setAddScoreState] = useState(0)\r\n\r\n    //今のイニング\r\n    const [nowIningState, setNowIningState] = useState([0, 0])\r\n\r\n    //自由記述内容を監視\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n\r\n    //自由記述編集モードのフラグ\r\n    const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false)\r\n\r\n    //多分打球の種類だと思われる\r\n    const [flag, setFlag] = useState(2);\r\n\r\n    //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\r\n    const [batterResult, setBatterResult] = useState(0)\r\n\r\n\r\n    //緑プルダウン用\r\n    const [nowPosition, setNowPosition] = useState(15)\r\n\r\n    //アウトカウント\r\n    const [nowOutCountState, setNowOutCountState] = useState(0)\r\n\r\n    //ランナーカウント\r\n    const [runnerCountState, setRunnerCountState] = useState([false, false, false])\r\n\r\n    //選手登録情報を読み込む\r\n    const [registeredMember1, setRegisteredMember1] = useState([])\r\n    const [registeredMember2, setRegisteredMember2] = useState([])\r\n\r\n    //打席一覧情報のステイト\r\n    const [dasekiAll, setDasekiAll] = useState([])\r\n\r\n    //打順と打者のリスト\r\n    const [battingOrder, setBattingOrder] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n    const [battingOrder2, setBattingOrder2] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n\r\n    //今の打順と今のピッチャーが誰なのかを2チーム文記録する\r\n    const [nowPlayingMember, setNowPlayingMember] = useState([{ batter: 0, pitcher: 0 }, { batter: 0, pitcher: 0 }])\r\n\r\n    //代打フラグ 0なら代打でない 1なら代打\r\n    const [isPinch, setIsPinch] = useState(0)\r\n\r\n    //画面解像度取得\r\n    var sw = document.documentElement.clientWidth; // 画面の横幅\r\n    var sh = document.documentElement.clientHeight; // 画面の高さ\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n    //一つのStateで管理しようぜ的な試み\r\n    //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n\r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n    }, [])\r\n\r\n\r\n\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            //const img = new Image()\r\n            //img.src = \"img.jpg\" // 描画する画像など\r\n\r\n\r\n            //img.onload = () => {\r\n\r\n            //context.drawImage(img, 0, 0)\r\n            // 更にこれに続いて何か処理をしたい場合\r\n\r\n            //削除\r\n            context.clearRect(0, 0, canvasSize, canvasSize);\r\n\r\n            //緑グラウンド\r\n            context.beginPath();\r\n            context.fillStyle = \"green\";\r\n            context.moveTo(homebase, homebase);\r\n            context.arc(homebase, homebase, homebase, -Math.PI / 4, 5 * Math.PI / 4, true);\r\n            context.closePath();\r\n            context.fill();\r\n\r\n            //茶グラウンド\r\n            context.beginPath();\r\n            context.fillStyle = \"sienna\";\r\n            context.moveTo(homebase, homebase);\r\n            context.arc(homebase, homebase, 3.5 * homebase / 5, -Math.PI / 4, 5 * Math.PI / 4, true);\r\n            context.closePath();\r\n            context.fill();\r\n\r\n            //白線\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase);\r\n            context.lineTo(homebase * 5 / 4, homebase * 3 / 4);\r\n            context.lineTo(homebase, homebase / 2);\r\n            context.lineTo(homebase * 3 / 4, homebase * 3 / 4);\r\n            context.strokeStyle = \"white\";\r\n            context.lineWidth = 2;\r\n            context.closePath();\r\n            context.stroke();\r\n\r\n\r\n            const w = 0.03 * homebase;  //ベースの幅\r\n            const margin = 10;    //ベース位置調整用\r\n\r\n            //ベースの色\r\n            let baseColor2 = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                if (runnerCountState[i]) {\r\n                    baseColor2[i] = \"blue\";\r\n                    console.log(baseColor2[i]);\r\n                }\r\n                else {\r\n                    baseColor2[i] = \"white\";\r\n                }\r\n            }\r\n\r\n\r\n            context.strokeStyle = \"black\";\r\n\r\n            //３塁ベース\r\n            context.fillStyle = baseColor2[2];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 3 / 4, homebase * 3 / 4 - margin);\r\n            context.lineTo(homebase * 3 / 4 - w, homebase * 3 / 4 + w - margin);\r\n            context.lineTo(homebase * 3 / 4, homebase * 3 / 4 + w * 2 - margin);\r\n            context.lineTo(homebase * 3 / 4 + w, homebase * 3 / 4 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.lineWidth = 1;\r\n            context.stroke();\r\n\r\n            //2塁ベース\r\n            context.fillStyle = baseColor2[1];\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase / 2 - margin);\r\n            context.lineTo(homebase - w, homebase / 2 + w - margin);\r\n            context.lineTo(homebase, homebase / 2 + w * 2 - margin);\r\n            context.lineTo(homebase + w, homebase / 2 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            //1塁ベース\r\n            context.fillStyle = baseColor2[0];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 5 / 4, homebase * 3 / 4 - margin);\r\n            context.lineTo(homebase * 5 / 4 - w, homebase * 3 / 4 + w - margin);\r\n            context.lineTo(homebase * 5 / 4, homebase * 3 / 4 + w * 2 - margin);\r\n            context.lineTo(homebase * 5 / 4 + w, homebase * 3 / 4 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            context.fillStyle = \"white\";\r\n            //ホームベース\r\n            context.beginPath();\r\n            context.moveTo(homebase + w * 2 / 3, homebase - w * 2 / 3);\r\n            context.lineTo(homebase - w * 2 / 3, homebase - w * 2 / 3);\r\n            context.lineTo(homebase - w * 2 / 3, homebase + w / 3);\r\n            context.lineTo(homebase, homebase + w);\r\n            context.lineTo(homebase + w * 2 / 3, homebase + w / 3);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n\r\n            //打球\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase);\r\n\r\n            // let flag = 2;   //１が直線、２がフライ、3がゴロ\r\n\r\n            if (flag === 1) {\r\n                console.log(\"flag1\")\r\n                context.lineTo(canvasX1, canvasY1)\r\n            }\r\n            if (flag === 2) {\r\n                let start = { x: 500, y: 500 };\r\n                let cp = { x: 500, y: start.y / 5 * 3 };    //ここで曲がり具合調整\r\n                context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\r\n            }\r\n            if (flag === 3) {\r\n                console.log(\"flag3\")\r\n                drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\r\n            }\r\n\r\n            context.strokeStyle = \"red\";\r\n            context.lineWidth = 5;\r\n            context.stroke();\r\n\r\n            //setLoaded(true)\r\n            //}\r\n\r\n\r\n\r\n\r\n            // 波線描画\r\n            // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\r\n\r\n            function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\r\n                const BEGIN = 0, CTRL = 1, END = 2;\r\n                const x1 = 0, y1 = 1;\r\n                var distance = calcDistance(x, y, mx, my);\r\n                var cycle = Math.floor(distance / waveLen);\r\n                var ps = [[x, y], [0, 0], [x, y]];\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = color;\r\n                ctx.beginPath();\r\n\r\n                ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\r\n\r\n                var rad = calcRadian(x, y, mx, my);\r\n                if (0 !== rad) {\r\n                    ctx.translate(x, y);\r\n                    ctx.rotate(rad);\r\n                    ctx.translate(-x, -y);\r\n                }\r\n\r\n                for (var i = 0; i < cycle; i++) {\r\n                    ps[END][x1] += waveLen;\r\n                    ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                    ps[CTRL][y1] = ps[BEGIN][y1] + ((i % 2 !== 0) ? -amplitude : amplitude);\r\n\r\n                    ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                    ps[BEGIN][x1] = ps[END][x1];\r\n                    ps[BEGIN][y1] = ps[END][y1];\r\n                }\r\n\r\n                ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\r\n                ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                ps[CTRL][y1] = ps[BEGIN][y1] + (((cycle) % 2 !== 0) ? -amplitude : amplitude);\r\n\r\n                ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                ctx.stroke();\r\n                ctx.restore();\r\n            }\r\n\r\n            // 2点間座標からラジアン算出\r\n            function calcRadian(x, y, mx, my) {\r\n                return Math.atan2(my - y, mx - x);\r\n            }\r\n\r\n            // 2点間座標の距離算出\r\n            function calcDistance(x, y, mx, my) {\r\n                return Math.hypot(my - y, mx - x);\r\n            }\r\n        }\r\n    }, [canvasX1, canvasY1, flag, runnerCountState])\r\n\r\n    useEffect(() => {\r\n        //データベースからデータをもらうために呼び出す\r\n        setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\r\n        loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId)\r\n        loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2)\r\n\r\n\r\n        //テーブル存在確認\r\n        TmpTableCheck(urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n            setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n            setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState,setDasekiAll\r\n        )\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <TitleBar\r\n                TitleText={\"速報入力画面\"}\r\n                PageTransition={PageTransition}\r\n                valueUrl={-1}\r\n            />\r\n            <EditPoint></EditPoint>\r\n            <OptionButton />\r\n            <div className=\"parts\">\r\n                <div className=\"scoreBoard\">\r\n                    {scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)}\r\n                </div>\r\n                <div className=\"optionButtons\">\r\n                </div>\r\n                <div className=\"outCountsAndRunnerCounts\">\r\n                    {outCount(nowOutCountState, setNowOutCountState)}\r\n                    {runnerCount(runnerCountState, setRunnerCountState)}\r\n                </div>\r\n                <div className=\"BatterAndPitcher\">\r\n\r\n                </div>\r\n                <div className=\"BatterPitcher\">\r\n                    {/* プルダウン1  選手を表示するためのプルダウン */}\r\n                    <PullDownMember\r\n                        battingOrder={battingOrder}\r\n                        battingOrder2={battingOrder2}\r\n                        setBattingOrder={setBattingOrder}\r\n                        registeredMember1={registeredMember1}\r\n                        registeredMember2={registeredMember2}\r\n                        nowIningState={nowIningState}\r\n                        nowPlayingMember={nowPlayingMember}\r\n                        setNowPlayingMember={setNowPlayingMember}\r\n                        setIsPinch={setIsPinch}\r\n                    />\r\n                </div>\r\n                <div className=\"freeWrite\">\r\n                    {freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)}\r\n                </div>\r\n\r\n                {/* プルダウン2 */}\r\n                <PullDown\r\n                    nowPosition={nowPosition}\r\n                    setNowPosition={setNowPosition}\r\n                    setcanvasX1={setcanvasX1}\r\n                    setcanvasY1={setcanvasY1}\r\n                    setFlag={setFlag}\r\n                    setFreeWriteState={setFreeWriteState}\r\n                    setBatterResult={setBatterResult}\r\n                    addScoreState={addScoreState}\r\n                    GameEndPopup_field={GameEndPopup}\r\n                />\r\n\r\n                <div className=\"diamond\">\r\n\r\n                    <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n                </div>\r\n                <div className=\"Buttons\">\r\n                    <div className=\"baseballButtons\">\r\n                        {BaseballButton(addScoreState, setAddScoreState)}\r\n                    </div>\r\n                    <div className=\"updateButton\">\r\n                        {/* ポップアップ*/}\r\n                        <Popupfield\r\n                            nowIningState={nowIningState} //今が何回なのか\r\n                            setNowIningState={setNowIningState} //今が何回なのかの変更関数\r\n                            addScoreState={addScoreState}\r\n                            setAddScoreState={setAddScoreState}\r\n                            scoreState={scoreState}\r\n                            setScoreState={setScoreState}\r\n                            nowOutCountState={nowOutCountState}\r\n                            setNowOutCountState={setNowOutCountState}\r\n                            DasekiRegister={DasekiRegister}\r\n                            urlGameId={urlGameId}\r\n                            urlSchoolId={urlSchoolId}\r\n                            urlSchoolId2={urlSchoolId2}\r\n                            nowPlayingMember={nowPlayingMember}\r\n                            setNowPlayingMember={setNowPlayingMember}\r\n                            battingOrder={battingOrder}\r\n                            battingOrder2={battingOrder2}\r\n                            runnerCountState={runnerCountState}\r\n                            freeWriteState={freeWriteState}\r\n                            setFreeWriteState={setFreeWriteState}\r\n                            canvasX1={canvasX1}\r\n                            setcanvasX1={setcanvasX1}\r\n                            canvasY1={canvasY1}\r\n                            setcanvasY1={setcanvasY1}\r\n                            flag={flag}\r\n                            batterResult={batterResult}\r\n                            setBatterResult={setBatterResult}\r\n                            isPinch={isPinch}\r\n                            setIsPinch={setIsPinch}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {makePulldown(pulldownId, ArrayList, idText, nowSelected, setNowSelected)}\r\n\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
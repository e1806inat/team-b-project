{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\team-b-project\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.jsx\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { runnerCount } from './comSokuho/runnerCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport { useEffect, useState } from 'react';\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\";\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\";\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\n\n//プルダウン\nimport { PullDown } from './comSokuho/PullDown/PullDown';\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\n\n//バックエンドのurlを取得\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\n\n//選手読み込み\nconst setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\n  const ditectPitcher = data => {\n    let result = 0;\n    data.map((data, ind) => {\n      if (data.position === \"ピッチャー\") {\n        result = ind;\n      }\n    });\n    return result;\n  };\n  fetch(backendUrl + \"/member/starting_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(TeamAdata => {\n    setBattingOrder(TeamAdata);\n    fetch(backendUrl + \"/member/starting_member_call\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        game_id: urlGameId,\n        school_id: urlSchoolId2\n      })\n    }).then(response => response.json()).then(TeamBdata => {\n      setBattingOrder2(TeamBdata);\n      nowPlayingMember[0].pitcher = ditectPitcher(TeamBdata);\n      nowPlayingMember[1].pitcher = ditectPitcher(TeamAdata);\n      setNowPlayingMember(nowPlayingMember);\n    });\n  });\n};\n\n//自作プルダウン　改造あり\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2) => {\n  //pulldownIdは0でいいです。\n  //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\n  //idテキストは連想配列の属性を書きます。\n  //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\n  //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tekitouni\",\n      onChange: e => {\n        //ステイトが変化すると再描画させるための文、これがないと再描画されない\n        //なお、消すと再描画はされないが内部は変化する\n        nowSelected = nowSelected.slice(0, nowSelected.length);\n        nowSelected[pulldownId] = e.target.value;\n        setNowSelected(nowSelected);\n        console.log(nowSelected);\n      },\n      children: ArrayList.map((component, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ind,\n        children: [component[idText], \"\\u6253\\u5E2D\\u76EE\\uFF1A\", component.inning % 10 === 1 && urlSchoolName, component.inning % 10 === 2 && urlSchoolName2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n//打席編集\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2) => {\n  console.log(battersBox);\n  const touchedCoordinate = battersBox.touched_coordinate.split(\"_\");\n  let teamBBatter = 0;\n  let teamApitcher = 0;\n  const value = battersBox.inning;\n  for (let i = nowSelected; i >= 0; i--) {\n    if (value !== battersBoxAll[i].inning) {\n      teamBBatter = battersBoxAll[i].player_id;\n      teamApitcher = battersBoxAll[i].pitcher_id;\n      break;\n    }\n  }\n  setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1]);\n  setNowOutCountState(battersBox.outcount);\n  setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base === 0, battersBox.base === 1]);\n  setFreeWriteState(battersBox.text_inf);\n  setcanvasX1(touchedCoordinate[0]);\n  setcanvasY1(touchedCoordinate[1]);\n  setAddScoreState(battersBox.score);\n  setNowPlayingMember([{\n    batter: battingOrder.findIndex(u => u.player_id === battersBox.player_id),\n    pitcher: battingOrder2.findIndex(u => u.player_id === battersBox.pitcher_id)\n  }, {\n    batter: teamBBatter,\n    pitcher: teamApitcher\n  }]);\n  console.log(battingOrder2.findIndex(u => u.player_id === battersBox.pitcher_id));\n  console.log(battersBox.player_id);\n};\n\n//一時打席情報登録用のテーブル作成\nconst TmpTableCreate = urlGameId => {\n  fetch(backendUrl + \"/daseki/tmp_table_create\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//テーブル存在確認\n_c = TmpTableCreate;\nconst TmpTableCheck = (urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll) => {\n  fetch(backendUrl + \"/daseki/tmp_table_check\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    if (data === \"not exist\") {\n      TmpTableCreate(urlGameId);\n      console.log(data);\n    } else if (data === \"exist\") {\n      console.log(data);\n      TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll);\n    }\n  });\n};\n\n////試合情報受け取り（速報用）\n_c2 = TmpTableCheck;\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll) => {\n  fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    setDasekiAll(data);\n\n    //空っぽなら無視\n    if (data.length !== 0) {\n      let latestDasaki = data[data.length - 1];\n      if (latestDasaki.outcount === 3) {\n        //アウトカウント取得\n        setNowOutCountState(0);\n\n        //イニング取得\n        if (latestDasaki.inning % 10 === 1) {\n          setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1]);\n        } else {\n          setNowIningState([Math.floor(latestDasaki.inning / 10), 0]);\n        }\n\n        //ランナー取得\n        setRunnerCountState([false, false, false]);\n      } else {\n        //アウトカウント取得\n        setNowOutCountState(latestDasaki.outcount);\n\n        //イニング取得\n        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1]);\n\n        //ランナー取得\n        setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"]);\n      }\n\n      //スコアの取得\n      // let initialSchoolId = data[0].school_id;\n      // const { Score } = require(\"../../../../DB/Score\")\n      // let SolveScore = Score\n      // let inningCount = 0\n      // let leastSchoolId = data[0].school_id\n      // data.map((u) => {\n      //     if (initialSchoolId === u.school_id) {\n      //         if (SolveScore[0][inningCount] === null) SolveScore[0][inningCount] = 0\n      //         if (leastSchoolId !== u.school_id) inningCount = inningCount + 1\n      //         console.log(SolveScore[0][inningCount])\n      //         SolveScore[0][inningCount] = SolveScore[0][inningCount] + u.score\n      //         leastSchoolId = u.school_id\n      //     }\n      //     else {\n      //         if (SolveScore[1][inningCount] === null) SolveScore[1][inningCount] = 0\n      //         SolveScore[1][inningCount] = SolveScore[1][inningCount] + u.score\n      //         leastSchoolId = u.school_id\n      //     }\n      // })\n\n      const {\n        Score\n      } = require(\"../../../../DB/Score\");\n      let sendScore = Score;\n      let scoreCounter = 0;\n      let previousInning = data[0].inning;\n      data.map(u => {\n        if (u.inning % 10 - 1 === 0) {\n          if (previousInning === u.inning) {\n            //null対策\n            if (sendScore[0][u.inning[1]] === null) sendScore[0][u.inning] = 0;\n            sendScore[0][u.inning] = u.score;\n          } else {}\n          //ひとつ前イニングを管理する変数を更新\n          previousInning = u.inning;\n        } else {}\n      });\n      console.log(SolveScore);\n      setScoreState(SolveScore);\n\n      //今現在のプレイヤー取得\n      fetch(backendUrl + \"/member/starting_member_call\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          game_id: urlGameId,\n          school_id: urlSchoolId\n        })\n      }).then(response => response.json()).then(TeamAdata => {\n        setBattingOrder(TeamAdata);\n        //打順を持ってくる\n        fetch(backendUrl + \"/member/starting_member_call\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            game_id: urlGameId,\n            school_id: urlSchoolId2\n          })\n        }).then(response => response.json()).then(TeamBdata => {\n          let teamABatter = 0;\n          let teamApitcher = 0;\n          let teamBBatter = 0;\n          let teamBpitcher = 0;\n\n          //先攻\n          if (latestDasaki.inning % 10 - 1 === 0) {\n            teamABatter = TeamAdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamBpitcher = TeamBdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                teamBBatter = TeamBdata.findIndex(u => u.player_id === data[i].player_id);\n                teamApitcher = TeamAdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            if (data[data.length - 1].outcount !== 3) teamABatter++;else teamBBatter++;\n          }\n          //後攻\n          else if (latestDasaki.inning % 10 - 1 === 1) {\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                console.log(data[i]);\n                teamABatter = TeamAdata.findIndex(u => u.player_id === data[i].player_id);\n                teamBpitcher = TeamBdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            teamBBatter = TeamBdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamApitcher = TeamAdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            if (data[data.length - 1].outcount !== 3) teamBBatter++;else teamABatter++;\n          }\n\n          //アウトカウントが3で、先攻\n          // teamABatter = TeamAdata.findIndex((u) => u.player_id === latestDasaki.player_id)\n          // teamBpitcher = TeamBdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\n          // teamBBatter = TeamBdata.findIndex((u) => u.player_id === latestDasaki.player_id) + 1\n          // teamApitcher = TeamAdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\n\n          //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\n          if (teamABatter === 9) teamABatter = 0;\n          if (teamBpitcher === -1) teamBpitcher = 0;\n          if (teamBBatter === 9) teamBBatter = 0;\n          if (teamApitcher === -1) teamApitcher = 0;\n          setNowPlayingMember([{\n            batter: teamABatter,\n            pitcher: teamBpitcher\n          }, {\n            batter: teamBBatter,\n            pitcher: teamApitcher\n          }]);\n        });\n      });\n\n      // //後攻チームのメンバー取得\n      // if ((latestDasaki.inning / 100 >= 2) || (Math.floor(latestDasaki.inning / 10) === 2)) {\n      //     fetch(backendUrl + \"/member/tournament_member_call\", {\n      //         method: \"POST\",\n      //         mode: \"cors\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\",\n      //         },\n      //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId2 }),\n      //     })\n      //         .then((response) => response.json())\n      //         .then((data) => { })\n      // }\n      // //先行チームのメンバー取得\n      // else if ((Math.floor(latestDasaki.inning / 100) === 1) || (Math.floor(latestDasaki.inning / 10) === 1)) {\n      //     fetch(backendUrl + \"/member/tournament_member_call\", {\n      //         method: \"POST\",\n      //         mode: \"cors\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\",\n      //         },\n      //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\n      //     })\n      //         .then((response) => response.json())\n      //         .then((data) => {\n\n      //         })\n\n      //     console.log(latestDasaki.player_id)\n      // }\n    }\n  });\n};\n\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\n_c3 = TmpDasekiCall;\nconst DasekiRegister = sendInfo => {\n  fetch(backendUrl + \"/daseki/daseki_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//選手登録された選手読み込む\n_c4 = DasekiRegister;\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\n  fetch(backendUrl + \"/member/tournament_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      tournament_id: urlTournamentId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(data => {\n    setRegisteredMember(data);\n  });\n};\n\n//修正内容をバックエンドに送る\nconst sendEdit = (urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch) => {\n  console.log(dasekiAll[nowSelected]);\n  //DBに送るための準備\n\n  let totalScore = 0;\n  scoreState[nowIningState[1]].map(score => {\n    totalScore = totalScore + score;\n  });\n  let runnerCount = \"\";\n  runnerCountState.map(runner => {\n    if (runner === true) runnerCount = \"1\" + runnerCount;else if (runner === false) runnerCount = \"0\" + runnerCount;\n  });\n  let isHit = 0;\n  let isFourball = 0;\n  let isDeadball = 0;\n  if (batterResult === 0) {} else if (batterResult === 1) isHit = 1;else if (batterResult === 2) isFourball = 1;else if (batterResult === 3) isDeadball = 1;\n\n  //DBにデータを送る\n  let sendInfo = {\n    at_bat_id: dasekiAll[nowSelected].at_bat_id,\n    table_name: urlGameId,\n    inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\n    game_id: urlGameId,\n    school_id: dasekiAll[nowSelected].school_id,\n    player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\n    pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\n    score: addScoreState,\n    total_score: totalScore,\n    outcount: nowOutCountState,\n    base: runnerCount,\n    text_inf: freeWriteState,\n    pass: 0,\n    touched_coordinate: canvasX1 + \"_\" + canvasY1,\n    ball_kind: flag,\n    hit: isHit,\n    foreball: isFourball,\n    deadball: isDeadball,\n    pinch: isPinch\n  };\n  console.log(sendInfo);\n  fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n  });\n};\nconst canvasSize = 1000;\nconst homebase = 400;\nconst InputPlayGame = () => {\n  _s();\n  //ページ遷移用\n  const navigate = useNavigate();\n  const PageTransition = url => {\n    navigate(url);\n  };\n\n  //urlから値を読み出す\n  const [searchParams] = useSearchParams();\n  const urlTournamentId = searchParams.get(\"urlTournamentId\");\n  const urlTournamentName = searchParams.get(\"urlTournamentName\");\n  const urlSchoolId = searchParams.get(\"urlSchoolId\");\n  const urlSchoolName = searchParams.get(\"urlSchoolName\");\n  const urlSchoolId2 = searchParams.get(\"urlSchoolId2\");\n  const urlSchoolName2 = searchParams.get(\"urlSchoolName2\");\n  const urlGameId = searchParams.get(\"urlGameId\");\n\n  //Score記録 左が裏表、右が回数 イニングとは逆\n  const {\n    Score\n  } = require(\"../../../../DB/Score\");\n  const [scoreState, setScoreState] = useState(Score);\n\n  //Scoreの加算値の監視\n  const [addScoreState, setAddScoreState] = useState(0);\n\n  //今のイニング 左が回、右が表裏\n  const [nowIningState, setNowIningState] = useState([0, 0]);\n\n  //自由記述内容を監視\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n\n  //自由記述編集モードのフラグ\n  const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false);\n\n  //多分打球の種類だと思われる\n  const [flag, setFlag] = useState(2);\n\n  //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\n  const [batterResult, setBatterResult] = useState(0);\n\n  //緑プルダウン用\n  const [nowPosition, setNowPosition] = useState(15);\n\n  //アウトカウント\n  const [nowOutCountState, setNowOutCountState] = useState(0);\n\n  //ランナーカウント\n  const [runnerCountState, setRunnerCountState] = useState([false, false, false]);\n\n  //選手登録情報を読み込む\n  const [registeredMember1, setRegisteredMember1] = useState([]);\n  const [registeredMember2, setRegisteredMember2] = useState([]);\n\n  //打席一覧情報のステイト\n  const [dasekiAll, setDasekiAll] = useState([{\n    at_bat_id: 1,\n    ball_kind: \"2\",\n    base: \"000\",\n    deadball: 0,\n    foreball: 0,\n    game_id: 1,\n    hit: 0,\n    inning: 11,\n    outcount: 3,\n    pass: 0,\n    pinch: \"0\",\n    pitcher_id: 21,\n    player_id: 7,\n    school_id: 1,\n    score: 0,\n    text_inf: \"アウト:ピッチャーフライ\",\n    total_score: 0,\n    touched_coordinate: \"400_450\"\n  }]);\n\n  //打席一覧情報のプルダウンの選択状況を管理するステイト\n  const [nowSelected, setNowSelected] = useState([]);\n\n  //打順と打者のリスト\n  const [battingOrder, setBattingOrder] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n  const [battingOrder2, setBattingOrder2] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n\n  //今の打順と今のピッチャーが誰なのかを2チーム文記録する\n  const [nowPlayingMember, setNowPlayingMember] = useState([{\n    batter: 0,\n    pitcher: 0\n  }, {\n    batter: 0,\n    pitcher: 0\n  }]);\n\n  //代打フラグ 0なら代打でない 1なら代打\n  const [isPinch, setIsPinch] = useState(0);\n\n  //編集モードであるかどうかを監視するステイト\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  //画面解像度取得\n  var sw = document.documentElement.clientWidth; // 画面の横幅\n  var sh = document.documentElement.clientHeight; // 画面の高さ\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n  //一つのStateで管理しようぜ的な試み\n  //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      //const img = new Image()\n      //img.src = \"img.jpg\" // 描画する画像など\n\n      //img.onload = () => {\n\n      //context.drawImage(img, 0, 0)\n      // 更にこれに続いて何か処理をしたい場合\n\n      //削除\n      context.clearRect(0, 0, canvasSize, canvasSize);\n\n      //緑グラウンド\n      context.beginPath();\n      context.fillStyle = \"green\";\n      context.moveTo(homebase, homebase);\n      context.arc(homebase, homebase, homebase, -Math.PI / 4, 5 * Math.PI / 4, true);\n      context.closePath();\n      context.fill();\n\n      //茶グラウンド\n      context.beginPath();\n      context.fillStyle = \"sienna\";\n      context.moveTo(homebase, homebase);\n      context.arc(homebase, homebase, 3.5 * homebase / 5, -Math.PI / 4, 5 * Math.PI / 4, true);\n      context.closePath();\n      context.fill();\n\n      //白線\n      context.beginPath();\n      context.moveTo(homebase, homebase);\n      context.lineTo(homebase * 5 / 4, homebase * 3 / 4);\n      context.lineTo(homebase, homebase / 2);\n      context.lineTo(homebase * 3 / 4, homebase * 3 / 4);\n      context.strokeStyle = \"white\";\n      context.lineWidth = 2;\n      context.closePath();\n      context.stroke();\n      const w = 0.03 * homebase; //ベースの幅\n      const margin = 10; //ベース位置調整用\n\n      //ベースの色 １：３塁、２：２塁、３:１塁\n      let baseColor2 = [];\n      for (let i = 0; i < 3; i++) {\n        if (runnerCountState[i]) {\n          baseColor2[2 - i] = \"blue\";\n        } else {\n          baseColor2[2 - i] = \"white\";\n        }\n      }\n      context.strokeStyle = \"black\";\n\n      //３塁ベース\n      context.fillStyle = baseColor2[2];\n      context.beginPath();\n      context.moveTo(homebase * 3 / 4, homebase * 3 / 4 - margin);\n      context.lineTo(homebase * 3 / 4 - w, homebase * 3 / 4 + w - margin);\n      context.lineTo(homebase * 3 / 4, homebase * 3 / 4 + w * 2 - margin);\n      context.lineTo(homebase * 3 / 4 + w, homebase * 3 / 4 + w - margin);\n      context.closePath();\n      context.fill();\n      context.lineWidth = 1;\n      context.stroke();\n\n      //2塁ベース\n      context.fillStyle = baseColor2[1];\n      context.beginPath();\n      context.moveTo(homebase, homebase / 2 - margin);\n      context.lineTo(homebase - w, homebase / 2 + w - margin);\n      context.lineTo(homebase, homebase / 2 + w * 2 - margin);\n      context.lineTo(homebase + w, homebase / 2 + w - margin);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //1塁ベース\n      context.fillStyle = baseColor2[0];\n      context.beginPath();\n      context.moveTo(homebase * 5 / 4, homebase * 3 / 4 - margin);\n      context.lineTo(homebase * 5 / 4 - w, homebase * 3 / 4 + w - margin);\n      context.lineTo(homebase * 5 / 4, homebase * 3 / 4 + w * 2 - margin);\n      context.lineTo(homebase * 5 / 4 + w, homebase * 3 / 4 + w - margin);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      context.fillStyle = \"white\";\n      //ホームベース\n      context.beginPath();\n      context.moveTo(homebase + w * 2 / 3, homebase - w * 2 / 3);\n      context.lineTo(homebase - w * 2 / 3, homebase - w * 2 / 3);\n      context.lineTo(homebase - w * 2 / 3, homebase + w / 3);\n      context.lineTo(homebase, homebase + w);\n      context.lineTo(homebase + w * 2 / 3, homebase + w / 3);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //打球\n      context.beginPath();\n      context.moveTo(homebase, homebase);\n\n      // let flag = 2;   //１が直線、２がフライ、3がゴロ\n\n      if (flag === 1) {\n        console.log(\"flag1\");\n        context.lineTo(canvasX1, canvasY1);\n      }\n      if (flag === 2) {\n        let start = {\n          x: 500,\n          y: 500\n        };\n        let cp = {\n          x: 500,\n          y: start.y / 5 * 3\n        }; //ここで曲がり具合調整\n        context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\n      }\n      if (flag === 3) {\n        console.log(\"flag3\");\n        drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\n      }\n      context.strokeStyle = \"red\";\n      context.lineWidth = 5;\n      context.stroke();\n\n      //setLoaded(true)\n      //}\n\n      // 波線描画\n      // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\n\n      function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\n        const BEGIN = 0,\n          CTRL = 1,\n          END = 2;\n        const x1 = 0,\n          y1 = 1;\n        var distance = calcDistance(x, y, mx, my);\n        var cycle = Math.floor(distance / waveLen);\n        var ps = [[x, y], [0, 0], [x, y]];\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\n        var rad = calcRadian(x, y, mx, my);\n        if (0 !== rad) {\n          ctx.translate(x, y);\n          ctx.rotate(rad);\n          ctx.translate(-x, -y);\n        }\n        for (var i = 0; i < cycle; i++) {\n          ps[END][x1] += waveLen;\n          ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n          ps[CTRL][y1] = ps[BEGIN][y1] + (i % 2 !== 0 ? -amplitude : amplitude);\n          ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n          ps[BEGIN][x1] = ps[END][x1];\n          ps[BEGIN][y1] = ps[END][y1];\n        }\n        ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\n        ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n        ps[CTRL][y1] = ps[BEGIN][y1] + (cycle % 2 !== 0 ? -amplitude : amplitude);\n        ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      // 2点間座標からラジアン算出\n      function calcRadian(x, y, mx, my) {\n        return Math.atan2(my - y, mx - x);\n      }\n\n      // 2点間座標の距離算出\n      function calcDistance(x, y, mx, my) {\n        return Math.hypot(my - y, mx - x);\n      }\n    }\n  }, [canvasX1, canvasY1, flag, runnerCountState]);\n  useEffect(() => {\n    //データベースからデータをもらうために呼び出す\n    setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember);\n    loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId);\n    loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2);\n\n    //テーブル存在確認\n    TmpTableCheck(urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      TitleText: \"速報入力画面\",\n      PageTransition: PageTransition,\n      valueUrl: -1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditPoint, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scoreBoard\",\n        children: scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionButtons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outCountsAndRunnerCounts\",\n        children: [outCount(nowOutCountState, setNowOutCountState), \"\\uFF13\\u5841\\uFF1A\\uFF12\\u5841\\uFF1A\\uFF11\\u5841\", runnerCount(runnerCountState, setRunnerCountState)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BatterAndPitcher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BatterPitcher\",\n        children: /*#__PURE__*/_jsxDEV(PullDownMember, {\n          battingOrder: battingOrder,\n          battingOrder2: battingOrder2,\n          setBattingOrder: setBattingOrder,\n          registeredMember1: registeredMember1,\n          registeredMember2: registeredMember2,\n          nowIningState: nowIningState,\n          nowPlayingMember: nowPlayingMember,\n          setNowPlayingMember: setNowPlayingMember,\n          setIsPinch: setIsPinch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeWrite\",\n        children: freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PullDown, {\n        nowPosition: nowPosition,\n        setNowPosition: setNowPosition,\n        setcanvasX1: setcanvasX1,\n        setcanvasY1: setcanvasY1,\n        setFlag: setFlag,\n        setFreeWriteState: setFreeWriteState,\n        setBatterResult: setBatterResult,\n        addScoreState: addScoreState,\n        GameEndPopup_field: GameEndPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diamond\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"800\",\n          height: \"800\",\n          id: \"canvas\",\n          className: \"diamondPng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baseballButtons\",\n          children: BaseballButton(addScoreState, setAddScoreState)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateButton\",\n          children: /*#__PURE__*/_jsxDEV(Popupfield, {\n            nowIningState: nowIningState //今が何回なのか\n            ,\n            setNowIningState: setNowIningState //今が何回なのかの変更関数\n            ,\n            addScoreState: addScoreState,\n            setAddScoreState: setAddScoreState,\n            scoreState: scoreState,\n            setScoreState: setScoreState,\n            nowOutCountState: nowOutCountState,\n            setNowOutCountState: setNowOutCountState,\n            DasekiRegister: DasekiRegister,\n            urlGameId: urlGameId,\n            urlSchoolId: urlSchoolId,\n            urlSchoolId2: urlSchoolId2,\n            nowPlayingMember: nowPlayingMember,\n            setNowPlayingMember: setNowPlayingMember,\n            battingOrder: battingOrder,\n            battingOrder2: battingOrder2,\n            runnerCountState: runnerCountState,\n            freeWriteState: freeWriteState,\n            setFreeWriteState: setFreeWriteState,\n            canvasX1: canvasX1,\n            setcanvasX1: setcanvasX1,\n            canvasY1: canvasY1,\n            setcanvasY1: setcanvasY1,\n            flag: flag,\n            batterResult: batterResult,\n            setBatterResult: setBatterResult,\n            isPinch: isPinch,\n            setIsPinch: setIsPinch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 17\n      }, this), makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEditMode(!isEditMode);\n          editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2);\n        },\n        children: \"\\u4FEE\\u6B63\\u6253\\u5E2D\\u9078\\u629E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendEdit(urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch),\n        children: \"\\u4FEE\\u6B63\\u78BA\\u5B9A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 855,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"kIRKWuGXgcbQvDcQJiG7CFs2DdU=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c5 = InputPlayGame;\nexport default InputPlayGame;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"TmpTableCreate\");\n$RefreshReg$(_c2, \"TmpTableCheck\");\n$RefreshReg$(_c3, \"TmpDasekiCall\");\n$RefreshReg$(_c4, \"DasekiRegister\");\n$RefreshReg$(_c5, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","runnerCount","freeWrite","BaseballButton","useEffect","useState","Popupfield","GameEndPopup","EditPoint","OptionButton","TitleBar","PullDown","PullDownMember","useSearchParams","useNavigate","backendUrl","require","setBatter","setBattingOrder","setBattingOrder2","urlSchoolId","urlSchoolId2","urlGameId","nowPlayingMember","setNowPlayingMember","ditectPitcher","data","result","map","ind","position","fetch","method","mode","headers","body","JSON","stringify","game_id","school_id","then","response","json","TeamAdata","TeamBdata","pitcher","makePulldown","pulldownId","ArrayList","idText","nowSelected","setNowSelected","urlSchoolName","urlSchoolName2","e","slice","length","target","value","console","log","component","inning","editBattersBox","battersBox","battersBoxAll","setNowIningState","setNowOutCountState","setRunnerCountState","setFreeWriteState","setcanvasX1","setcanvasY1","setAddScoreState","battingOrder","battingOrder2","touchedCoordinate","touched_coordinate","split","teamBBatter","teamApitcher","i","player_id","pitcher_id","Math","floor","outcount","base","text_inf","score","batter","findIndex","u","TmpTableCreate","table_name","text","TmpTableCheck","TmpDasekiCall","urlTournamentId","setScoreState","registeredMember1","registeredMember2","setDasekiAll","latestDasaki","Score","sendScore","scoreCounter","previousInning","SolveScore","teamABatter","teamBpitcher","DasekiRegister","sendInfo","loadRegisteredMember","setRegisteredMember","tournament_id","sendEdit","dasekiAll","nowIningState","addScoreState","scoreState","nowOutCountState","runnerCountState","freeWriteState","canvasX1","canvasY1","flag","batterResult","isPinch","totalScore","runner","isHit","isFourball","isDeadball","at_bat_id","total_score","pass","ball_kind","hit","foreball","deadball","pinch","canvasSize","homebase","InputPlayGame","navigate","PageTransition","url","searchParams","get","urlTournamentName","freeWriteModeFlag","setFreeWriteModeFlag","setFlag","setBatterResult","nowPosition","setNowPosition","setRegisteredMember1","setRegisteredMember2","player_name_kanji","setIsPinch","isEditMode","setIsEditMode","sw","document","documentElement","clientWidth","sh","clientHeight","context","setContext","canvas","getElementById","canvasContext","getContext","addEventListener","rect","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","width","scaleHeight","height","canvasX","canvasY","clearRect","beginPath","fillStyle","moveTo","arc","PI","closePath","fill","lineTo","strokeStyle","lineWidth","stroke","w","margin","baseColor2","start","x","y","cp","quadraticCurveTo","drawWaveLine","mx","my","amplitude","waveLen","color","ctx","BEGIN","CTRL","END","x1","y1","distance","calcDistance","cycle","ps","save","rad","calcRadian","translate","rotate","restore","atan2","hypot"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/team-b-project/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.jsx"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { runnerCount } from './comSokuho/runnerCount';\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport { useEffect, useState } from 'react';\r\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\r\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\"\r\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\"\r\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\r\n\r\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\r\n\r\n//プルダウン\r\nimport { PullDown } from './comSokuho/PullDown/PullDown'\r\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember'\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\n\r\n//バックエンドのurlを取得\r\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\r\n\r\n\r\n//選手読み込み\r\nconst setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\r\n    const ditectPitcher = (data) => {\r\n        let result = 0\r\n        data.map((data, ind) => {\r\n            if (data.position === \"ピッチャー\") {\r\n                result = ind\r\n            }\r\n        })\r\n        return result\r\n    }\r\n\r\n    fetch(backendUrl + \"/member/starting_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((TeamAdata) => {\r\n            setBattingOrder(TeamAdata)\r\n\r\n            fetch(backendUrl + \"/member/starting_member_call\", {\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n            })\r\n                .then((response) => response.json())\r\n                .then((TeamBdata) => {\r\n                    setBattingOrder2(TeamBdata)\r\n                    nowPlayingMember[0].pitcher = ditectPitcher(TeamBdata)\r\n                    nowPlayingMember[1].pitcher = ditectPitcher(TeamAdata)\r\n                    setNowPlayingMember(nowPlayingMember)\r\n                })\r\n        })\r\n}\r\n\r\n//自作プルダウン　改造あり\r\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2) => {\r\n    //pulldownIdは0でいいです。\r\n    //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\r\n    //idテキストは連想配列の属性を書きます。\r\n    //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\r\n    //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\r\n\r\n    return (\r\n        <>\r\n            <select id=\"tekitouni\"\r\n                onChange={(e) => {\r\n                    //ステイトが変化すると再描画させるための文、これがないと再描画されない\r\n                    //なお、消すと再描画はされないが内部は変化する\r\n                    nowSelected = nowSelected.slice(0, nowSelected.length);\r\n                    nowSelected[pulldownId] = e.target.value\r\n                    setNowSelected(nowSelected)\r\n                    console.log(nowSelected)\r\n                }\r\n                }>\r\n                {ArrayList.map((component, ind) => (\r\n                    <option value={ind}>\r\n                        {component[idText]}打席目：{component.inning % 10 === 1 && urlSchoolName}{component.inning % 10 === 2 && urlSchoolName2}\r\n                    </option>\r\n                ))\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\n//打席編集\r\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected,\r\n    setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n    setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2) => {\r\n\r\n    console.log(battersBox)\r\n    const touchedCoordinate = battersBox.touched_coordinate.split(\"_\")\r\n\r\n    let teamBBatter = 0;\r\n    let teamApitcher = 0;\r\n\r\n    const value = battersBox.inning\r\n    for (let i = nowSelected; i >= 0; i--) {\r\n        if (value !== battersBoxAll[i].inning) {\r\n            teamBBatter = battersBoxAll[i].player_id\r\n            teamApitcher = battersBoxAll[i].pitcher_id\r\n            break\r\n        }\r\n    }\r\n\r\n    setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1])\r\n    setNowOutCountState(battersBox.outcount)\r\n    setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base === 0, battersBox.base === 1])\r\n    setFreeWriteState(battersBox.text_inf)\r\n    setcanvasX1(touchedCoordinate[0])\r\n    setcanvasY1(touchedCoordinate[1])\r\n    setAddScoreState(battersBox.score)\r\n    setNowPlayingMember(\r\n        [{\r\n            batter: battingOrder.findIndex((u) => u.player_id === battersBox.player_id),\r\n            pitcher: battingOrder2.findIndex((u) => u.player_id === battersBox.pitcher_id)\r\n        },\r\n        {\r\n            batter: teamBBatter,\r\n            pitcher: teamApitcher\r\n        }])\r\n    console.log(battingOrder2.findIndex((u) => u.player_id === battersBox.pitcher_id))\r\n    console.log(battersBox.player_id)\r\n\r\n\r\n\r\n}\r\n\r\n//一時打席情報登録用のテーブル作成\r\nconst TmpTableCreate = (urlGameId) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_create\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//テーブル存在確認\r\nconst TmpTableCheck = (urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_check\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            if (data === \"not exist\") { TmpTableCreate(urlGameId); console.log(data) }\r\n            else if (data === \"exist\") {\r\n                console.log(data)\r\n                TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n                    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n                    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n                )\r\n            }\r\n        })\r\n}\r\n\r\n////試合情報受け取り（速報用）\r\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n            setDasekiAll(data)\r\n\r\n            //空っぽなら無視\r\n            if (data.length !== 0) {\r\n                let latestDasaki = data[data.length - 1]\r\n\r\n                if (latestDasaki.outcount === 3) {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(0)\r\n\r\n                    //イニング取得\r\n                    if (latestDasaki.inning % 10 === 1) {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1])\r\n                    }\r\n                    else {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10), 0])\r\n                    }\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([false, false, false])\r\n\r\n                }\r\n\r\n                else {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(latestDasaki.outcount)\r\n\r\n                    //イニング取得\r\n                    setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1])\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"])\r\n\r\n\r\n                }\r\n\r\n                //スコアの取得\r\n                // let initialSchoolId = data[0].school_id;\r\n                // const { Score } = require(\"../../../../DB/Score\")\r\n                // let SolveScore = Score\r\n                // let inningCount = 0\r\n                // let leastSchoolId = data[0].school_id\r\n                // data.map((u) => {\r\n                //     if (initialSchoolId === u.school_id) {\r\n                //         if (SolveScore[0][inningCount] === null) SolveScore[0][inningCount] = 0\r\n                //         if (leastSchoolId !== u.school_id) inningCount = inningCount + 1\r\n                //         console.log(SolveScore[0][inningCount])\r\n                //         SolveScore[0][inningCount] = SolveScore[0][inningCount] + u.score\r\n                //         leastSchoolId = u.school_id\r\n                //     }\r\n                //     else {\r\n                //         if (SolveScore[1][inningCount] === null) SolveScore[1][inningCount] = 0\r\n                //         SolveScore[1][inningCount] = SolveScore[1][inningCount] + u.score\r\n                //         leastSchoolId = u.school_id\r\n                //     }\r\n                // })\r\n\r\n                const { Score } = require(\"../../../../DB/Score\")\r\n                let sendScore = Score\r\n                let scoreCounter = 0\r\n                let previousInning = data[0].inning\r\n                data.map((u) => {\r\n                    if (u.inning % 10 - 1 === 0) {\r\n                        if (previousInning === u.inning) {\r\n                            //null対策\r\n                            if (sendScore[0][u.inning[1]] === null) sendScore[0][u.inning] = 0\r\nsendScore[0][u.inning] = u.score\r\n                        }\r\n                        else {\r\n\r\n                        }\r\n                        //ひとつ前イニングを管理する変数を更新\r\n                        previousInning = u.inning\r\n                    }\r\n                    else {\r\n                    }\r\n                })\r\n\r\n                console.log(SolveScore)\r\n                setScoreState(SolveScore)\r\n\r\n                //今現在のプレイヤー取得\r\n                fetch(backendUrl + \"/member/starting_member_call\", {\r\n                    method: \"POST\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n                })\r\n                    .then((response) => response.json())\r\n                    .then((TeamAdata) => {\r\n                        setBattingOrder(TeamAdata)\r\n                        //打順を持ってくる\r\n                        fetch(backendUrl + \"/member/starting_member_call\", {\r\n                            method: \"POST\",\r\n                            mode: \"cors\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n                        })\r\n                            .then((response) => response.json())\r\n                            .then((TeamBdata) => {\r\n                                let teamABatter = 0\r\n                                let teamApitcher = 0\r\n                                let teamBBatter = 0\r\n                                let teamBpitcher = 0\r\n\r\n                                //先攻\r\n                                if (latestDasaki.inning % 10 - 1 === 0) {\r\n                                    teamABatter = TeamAdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamBpitcher = TeamBdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            teamBBatter = TeamBdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamApitcher = TeamAdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    if (data[data.length - 1].outcount !== 3) teamABatter++\r\n                                    else teamBBatter++\r\n                                }\r\n                                //後攻\r\n                                else if (latestDasaki.inning % 10 - 1 === 1) {\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            console.log(data[i])\r\n                                            teamABatter = TeamAdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamBpitcher = TeamBdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    teamBBatter = TeamBdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamApitcher = TeamAdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    if (data[data.length - 1].outcount !== 3) teamBBatter++\r\n                                    else teamABatter++\r\n                                }\r\n\r\n                                //アウトカウントが3で、先攻\r\n                                // teamABatter = TeamAdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                // teamBpitcher = TeamBdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                // teamBBatter = TeamBdata.findIndex((u) => u.player_id === latestDasaki.player_id) + 1\r\n                                // teamApitcher = TeamAdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n\r\n                                //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\r\n                                if (teamABatter === 9) teamABatter = 0\r\n                                if (teamBpitcher === -1) teamBpitcher = 0\r\n                                if (teamBBatter === 9) teamBBatter = 0\r\n                                if (teamApitcher === -1) teamApitcher = 0\r\n\r\n\r\n                                setNowPlayingMember(\r\n                                    [{\r\n                                        batter: teamABatter,\r\n                                        pitcher: teamBpitcher\r\n                                    },\r\n                                    {\r\n                                        batter: teamBBatter,\r\n                                        pitcher: teamApitcher\r\n                                    }]\r\n                                )\r\n                            })\r\n                    })\r\n\r\n\r\n\r\n                // //後攻チームのメンバー取得\r\n                // if ((latestDasaki.inning / 100 >= 2) || (Math.floor(latestDasaki.inning / 10) === 2)) {\r\n                //     fetch(backendUrl + \"/member/tournament_member_call\", {\r\n                //         method: \"POST\",\r\n                //         mode: \"cors\",\r\n                //         headers: {\r\n                //             \"Content-Type\": \"application/json\",\r\n                //         },\r\n                //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId2 }),\r\n                //     })\r\n                //         .then((response) => response.json())\r\n                //         .then((data) => { })\r\n                // }\r\n                // //先行チームのメンバー取得\r\n                // else if ((Math.floor(latestDasaki.inning / 100) === 1) || (Math.floor(latestDasaki.inning / 10) === 1)) {\r\n                //     fetch(backendUrl + \"/member/tournament_member_call\", {\r\n                //         method: \"POST\",\r\n                //         mode: \"cors\",\r\n                //         headers: {\r\n                //             \"Content-Type\": \"application/json\",\r\n                //         },\r\n                //         body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n                //     })\r\n                //         .then((response) => response.json())\r\n                //         .then((data) => {\r\n\r\n\r\n\r\n                //         })\r\n\r\n                //     console.log(latestDasaki.player_id)\r\n                // }\r\n            }\r\n\r\n\r\n        })\r\n}\r\n\r\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\r\nconst DasekiRegister = (sendInfo) => {\r\n\r\n    fetch(backendUrl + \"/daseki/daseki_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n}\r\n\r\n\r\n//選手登録された選手読み込む\r\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\r\n\r\n    fetch(backendUrl + \"/member/tournament_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => { setRegisteredMember(data) })\r\n}\r\n\r\n\r\n//修正内容をバックエンドに送る\r\nconst sendEdit = (\r\n    urlGameId,\r\n    dasekiAll,\r\n    nowSelected,\r\n    nowIningState,\r\n    addScoreState,\r\n    scoreState,\r\n    nowOutCountState,\r\n    nowPlayingMember,\r\n    battingOrder,\r\n    battingOrder2,\r\n    runnerCountState,\r\n    freeWriteState,\r\n    canvasX1,\r\n    canvasY1,\r\n    flag,\r\n    batterResult,\r\n    isPinch,\r\n) => {\r\n    console.log(dasekiAll[nowSelected])\r\n    //DBに送るための準備\r\n\r\n    let totalScore = 0\r\n    scoreState[nowIningState[1]].map((score) => {\r\n        totalScore = totalScore + score\r\n    })\r\n    let runnerCount = \"\"\r\n    runnerCountState.map((runner) => {\r\n        if (runner === true) runnerCount = \"1\" + runnerCount\r\n        else if (runner === false) runnerCount = \"0\" + runnerCount\r\n    })\r\n    let isHit = 0; let isFourball = 0; let isDeadball = 0;\r\n    if (batterResult === 0) { }\r\n    else if (batterResult === 1) isHit = 1\r\n    else if (batterResult === 2) isFourball = 1\r\n    else if (batterResult === 3) isDeadball = 1\r\n\r\n    //DBにデータを送る\r\n    let sendInfo = {\r\n        at_bat_id: dasekiAll[nowSelected].at_bat_id,\r\n        table_name: urlGameId,\r\n        inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\r\n        game_id: urlGameId,\r\n        school_id: dasekiAll[nowSelected].school_id,\r\n        player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\r\n        pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\r\n        score: addScoreState,\r\n        total_score: totalScore,\r\n        outcount: nowOutCountState,\r\n        base: runnerCount,\r\n        text_inf: freeWriteState,\r\n        pass: 0,\r\n        touched_coordinate: canvasX1 + \"_\" + canvasY1,\r\n        ball_kind: flag,\r\n        hit: isHit,\r\n        foreball: isFourball,\r\n        deadball: isDeadball,\r\n        pinch: isPinch\r\n    }\r\n\r\n    console.log(sendInfo)\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst canvasSize = 1000;\r\nconst homebase = 400;\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    //ページ遷移用\r\n    const navigate = useNavigate()\r\n    const PageTransition = (url) => {\r\n        navigate(url)\r\n    }\r\n\r\n    //urlから値を読み出す\r\n    const [searchParams] = useSearchParams();\r\n    const urlTournamentId = searchParams.get(\"urlTournamentId\")\r\n    const urlTournamentName = searchParams.get(\"urlTournamentName\")\r\n    const urlSchoolId = searchParams.get(\"urlSchoolId\")\r\n    const urlSchoolName = searchParams.get(\"urlSchoolName\")\r\n    const urlSchoolId2 = searchParams.get(\"urlSchoolId2\")\r\n    const urlSchoolName2 = searchParams.get(\"urlSchoolName2\")\r\n    const urlGameId = searchParams.get(\"urlGameId\")\r\n\r\n    //Score記録 左が裏表、右が回数 イニングとは逆\r\n    const { Score } = require(\"../../../../DB/Score\")\r\n    const [scoreState, setScoreState] = useState(Score)\r\n\r\n    //Scoreの加算値の監視\r\n    const [addScoreState, setAddScoreState] = useState(0)\r\n\r\n    //今のイニング 左が回、右が表裏\r\n    const [nowIningState, setNowIningState] = useState([0, 0])\r\n\r\n    //自由記述内容を監視\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n\r\n    //自由記述編集モードのフラグ\r\n    const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false)\r\n\r\n    //多分打球の種類だと思われる\r\n    const [flag, setFlag] = useState(2);\r\n\r\n    //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\r\n    const [batterResult, setBatterResult] = useState(0)\r\n\r\n\r\n    //緑プルダウン用\r\n    const [nowPosition, setNowPosition] = useState(15)\r\n\r\n    //アウトカウント\r\n    const [nowOutCountState, setNowOutCountState] = useState(0)\r\n\r\n    //ランナーカウント\r\n    const [runnerCountState, setRunnerCountState] = useState([false, false, false])\r\n\r\n    //選手登録情報を読み込む\r\n    const [registeredMember1, setRegisteredMember1] = useState([])\r\n    const [registeredMember2, setRegisteredMember2] = useState([])\r\n\r\n    //打席一覧情報のステイト\r\n    const [dasekiAll, setDasekiAll] = useState([{\r\n        at_bat_id: 1, ball_kind: \"2\", base: \"000\",\r\n        deadball: 0, foreball: 0, game_id: 1,\r\n        hit: 0, inning: 11, outcount: 3,\r\n        pass: 0, pinch: \"0\", pitcher_id: 21, player_id: 7,\r\n        school_id: 1, score: 0, text_inf: \"アウト:ピッチャーフライ\",\r\n        total_score: 0, touched_coordinate: \"400_450\"\r\n    }])\r\n\r\n    //打席一覧情報のプルダウンの選択状況を管理するステイト\r\n    const [nowSelected, setNowSelected] = useState([])\r\n\r\n    //打順と打者のリスト\r\n    const [battingOrder, setBattingOrder] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n    const [battingOrder2, setBattingOrder2] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n\r\n    //今の打順と今のピッチャーが誰なのかを2チーム文記録する\r\n    const [nowPlayingMember, setNowPlayingMember] = useState([{ batter: 0, pitcher: 0 }, { batter: 0, pitcher: 0 }])\r\n\r\n    //代打フラグ 0なら代打でない 1なら代打\r\n    const [isPinch, setIsPinch] = useState(0)\r\n\r\n    //編集モードであるかどうかを監視するステイト\r\n    const [isEditMode, setIsEditMode] = useState(false)\r\n\r\n\r\n    //画面解像度取得\r\n    var sw = document.documentElement.clientWidth; // 画面の横幅\r\n    var sh = document.documentElement.clientHeight; // 画面の高さ\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n    //一つのStateで管理しようぜ的な試み\r\n    //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n\r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n    }, [])\r\n\r\n\r\n\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            //const img = new Image()\r\n            //img.src = \"img.jpg\" // 描画する画像など\r\n\r\n\r\n            //img.onload = () => {\r\n\r\n            //context.drawImage(img, 0, 0)\r\n            // 更にこれに続いて何か処理をしたい場合\r\n\r\n            //削除\r\n            context.clearRect(0, 0, canvasSize, canvasSize);\r\n\r\n            //緑グラウンド\r\n            context.beginPath();\r\n            context.fillStyle = \"green\";\r\n            context.moveTo(homebase, homebase);\r\n            context.arc(homebase, homebase, homebase, -Math.PI / 4, 5 * Math.PI / 4, true);\r\n            context.closePath();\r\n            context.fill();\r\n\r\n            //茶グラウンド\r\n            context.beginPath();\r\n            context.fillStyle = \"sienna\";\r\n            context.moveTo(homebase, homebase);\r\n            context.arc(homebase, homebase, 3.5 * homebase / 5, -Math.PI / 4, 5 * Math.PI / 4, true);\r\n            context.closePath();\r\n            context.fill();\r\n\r\n            //白線\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase);\r\n            context.lineTo(homebase * 5 / 4, homebase * 3 / 4);\r\n            context.lineTo(homebase, homebase / 2);\r\n            context.lineTo(homebase * 3 / 4, homebase * 3 / 4);\r\n            context.strokeStyle = \"white\";\r\n            context.lineWidth = 2;\r\n            context.closePath();\r\n            context.stroke();\r\n\r\n\r\n            const w = 0.03 * homebase;  //ベースの幅\r\n            const margin = 10;    //ベース位置調整用\r\n\r\n            //ベースの色 １：３塁、２：２塁、３:１塁\r\n            let baseColor2 = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                if (runnerCountState[i]) {\r\n                    baseColor2[2 - i] = \"blue\";\r\n                }\r\n                else {\r\n                    baseColor2[2 - i] = \"white\";\r\n                }\r\n            }\r\n\r\n\r\n            context.strokeStyle = \"black\";\r\n\r\n            //３塁ベース\r\n            context.fillStyle = baseColor2[2];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 3 / 4, homebase * 3 / 4 - margin);\r\n            context.lineTo(homebase * 3 / 4 - w, homebase * 3 / 4 + w - margin);\r\n            context.lineTo(homebase * 3 / 4, homebase * 3 / 4 + w * 2 - margin);\r\n            context.lineTo(homebase * 3 / 4 + w, homebase * 3 / 4 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.lineWidth = 1;\r\n            context.stroke();\r\n\r\n            //2塁ベース\r\n            context.fillStyle = baseColor2[1];\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase / 2 - margin);\r\n            context.lineTo(homebase - w, homebase / 2 + w - margin);\r\n            context.lineTo(homebase, homebase / 2 + w * 2 - margin);\r\n            context.lineTo(homebase + w, homebase / 2 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            //1塁ベース\r\n            context.fillStyle = baseColor2[0];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 5 / 4, homebase * 3 / 4 - margin);\r\n            context.lineTo(homebase * 5 / 4 - w, homebase * 3 / 4 + w - margin);\r\n            context.lineTo(homebase * 5 / 4, homebase * 3 / 4 + w * 2 - margin);\r\n            context.lineTo(homebase * 5 / 4 + w, homebase * 3 / 4 + w - margin);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            context.fillStyle = \"white\";\r\n            //ホームベース\r\n            context.beginPath();\r\n            context.moveTo(homebase + w * 2 / 3, homebase - w * 2 / 3);\r\n            context.lineTo(homebase - w * 2 / 3, homebase - w * 2 / 3);\r\n            context.lineTo(homebase - w * 2 / 3, homebase + w / 3);\r\n            context.lineTo(homebase, homebase + w);\r\n            context.lineTo(homebase + w * 2 / 3, homebase + w / 3);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n\r\n            //打球\r\n            context.beginPath();\r\n            context.moveTo(homebase, homebase);\r\n\r\n            // let flag = 2;   //１が直線、２がフライ、3がゴロ\r\n\r\n            if (flag === 1) {\r\n                console.log(\"flag1\")\r\n                context.lineTo(canvasX1, canvasY1)\r\n            }\r\n            if (flag === 2) {\r\n                let start = { x: 500, y: 500 };\r\n                let cp = { x: 500, y: start.y / 5 * 3 };    //ここで曲がり具合調整\r\n                context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\r\n            }\r\n            if (flag === 3) {\r\n                console.log(\"flag3\")\r\n                drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\r\n            }\r\n\r\n            context.strokeStyle = \"red\";\r\n            context.lineWidth = 5;\r\n            context.stroke();\r\n\r\n            //setLoaded(true)\r\n            //}\r\n\r\n\r\n\r\n\r\n            // 波線描画\r\n            // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\r\n\r\n            function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\r\n                const BEGIN = 0, CTRL = 1, END = 2;\r\n                const x1 = 0, y1 = 1;\r\n                var distance = calcDistance(x, y, mx, my);\r\n                var cycle = Math.floor(distance / waveLen);\r\n                var ps = [[x, y], [0, 0], [x, y]];\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = color;\r\n                ctx.beginPath();\r\n\r\n                ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\r\n\r\n                var rad = calcRadian(x, y, mx, my);\r\n                if (0 !== rad) {\r\n                    ctx.translate(x, y);\r\n                    ctx.rotate(rad);\r\n                    ctx.translate(-x, -y);\r\n                }\r\n\r\n                for (var i = 0; i < cycle; i++) {\r\n                    ps[END][x1] += waveLen;\r\n                    ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                    ps[CTRL][y1] = ps[BEGIN][y1] + ((i % 2 !== 0) ? -amplitude : amplitude);\r\n\r\n                    ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                    ps[BEGIN][x1] = ps[END][x1];\r\n                    ps[BEGIN][y1] = ps[END][y1];\r\n                }\r\n\r\n                ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\r\n                ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                ps[CTRL][y1] = ps[BEGIN][y1] + (((cycle) % 2 !== 0) ? -amplitude : amplitude);\r\n\r\n                ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                ctx.stroke();\r\n                ctx.restore();\r\n            }\r\n\r\n            // 2点間座標からラジアン算出\r\n            function calcRadian(x, y, mx, my) {\r\n                return Math.atan2(my - y, mx - x);\r\n            }\r\n\r\n            // 2点間座標の距離算出\r\n            function calcDistance(x, y, mx, my) {\r\n                return Math.hypot(my - y, mx - x);\r\n            }\r\n        }\r\n    }, [canvasX1, canvasY1, flag, runnerCountState])\r\n\r\n    useEffect(() => {\r\n        //データベースからデータをもらうために呼び出す\r\n        setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\r\n        loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId)\r\n        loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2)\r\n\r\n\r\n        //テーブル存在確認\r\n        TmpTableCheck(urlGameId, TmpTableCreate, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n            setNowIningState, setScoreState, setNowOutCountState, registeredMember1, registeredMember2,\r\n            setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n        )\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <TitleBar\r\n                TitleText={\"速報入力画面\"}\r\n                PageTransition={PageTransition}\r\n                valueUrl={-1}\r\n            />\r\n            <EditPoint></EditPoint>\r\n            <OptionButton />\r\n            <div className=\"parts\">\r\n                <div className=\"scoreBoard\">\r\n                    {scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)}\r\n                </div>\r\n                <div className=\"optionButtons\">\r\n                </div>\r\n                <div className=\"outCountsAndRunnerCounts\">\r\n                    {outCount(nowOutCountState, setNowOutCountState)}\r\n                    ３塁：２塁：１塁{runnerCount(runnerCountState, setRunnerCountState)}\r\n                </div>\r\n                <div className=\"BatterAndPitcher\">\r\n\r\n                </div>\r\n                <div className=\"BatterPitcher\">\r\n                    {/* プルダウン1  選手を表示するためのプルダウン */}\r\n                    <PullDownMember\r\n                        battingOrder={battingOrder}\r\n                        battingOrder2={battingOrder2}\r\n                        setBattingOrder={setBattingOrder}\r\n                        registeredMember1={registeredMember1}\r\n                        registeredMember2={registeredMember2}\r\n                        nowIningState={nowIningState}\r\n                        nowPlayingMember={nowPlayingMember}\r\n                        setNowPlayingMember={setNowPlayingMember}\r\n                        setIsPinch={setIsPinch}\r\n                    />\r\n                </div>\r\n                <div className=\"freeWrite\">\r\n                    {freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)}\r\n                </div>\r\n\r\n                {/* プルダウン2 */}\r\n                <PullDown\r\n                    nowPosition={nowPosition}\r\n                    setNowPosition={setNowPosition}\r\n                    setcanvasX1={setcanvasX1}\r\n                    setcanvasY1={setcanvasY1}\r\n                    setFlag={setFlag}\r\n                    setFreeWriteState={setFreeWriteState}\r\n                    setBatterResult={setBatterResult}\r\n                    addScoreState={addScoreState}\r\n                    GameEndPopup_field={GameEndPopup}\r\n                />\r\n\r\n                <div className=\"diamond\">\r\n\r\n                    <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n                </div>\r\n                <div className=\"Buttons\">\r\n                    <div className=\"baseballButtons\">\r\n                        {BaseballButton(addScoreState, setAddScoreState)}\r\n                    </div>\r\n                    <div className=\"updateButton\">\r\n                        {/* ポップアップ*/}\r\n                        <Popupfield\r\n                            nowIningState={nowIningState} //今が何回なのか\r\n                            setNowIningState={setNowIningState} //今が何回なのかの変更関数\r\n                            addScoreState={addScoreState}\r\n                            setAddScoreState={setAddScoreState}\r\n                            scoreState={scoreState}\r\n                            setScoreState={setScoreState}\r\n                            nowOutCountState={nowOutCountState}\r\n                            setNowOutCountState={setNowOutCountState}\r\n                            DasekiRegister={DasekiRegister}\r\n                            urlGameId={urlGameId}\r\n                            urlSchoolId={urlSchoolId}\r\n                            urlSchoolId2={urlSchoolId2}\r\n                            nowPlayingMember={nowPlayingMember}\r\n                            setNowPlayingMember={setNowPlayingMember}\r\n                            battingOrder={battingOrder}\r\n                            battingOrder2={battingOrder2}\r\n                            runnerCountState={runnerCountState}\r\n                            freeWriteState={freeWriteState}\r\n                            setFreeWriteState={setFreeWriteState}\r\n                            canvasX1={canvasX1}\r\n                            setcanvasX1={setcanvasX1}\r\n                            canvasY1={canvasY1}\r\n                            setcanvasY1={setcanvasY1}\r\n                            flag={flag}\r\n                            batterResult={batterResult}\r\n                            setBatterResult={setBatterResult}\r\n                            isPinch={isPinch}\r\n                            setIsPinch={setIsPinch}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2)}\r\n                <button onClick={() => {\r\n                    setIsEditMode(!isEditMode);\r\n                    editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected,\r\n                        setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n                        setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2\r\n                    )\r\n                }}>修正打席選択</button>\r\n                {<button\r\n                    onClick={() =>\r\n                        sendEdit(\r\n                            urlGameId,\r\n                            dasekiAll,\r\n                            nowSelected,\r\n                            nowIningState,\r\n                            addScoreState,\r\n                            scoreState,\r\n                            nowOutCountState,\r\n                            nowPlayingMember,\r\n                            battingOrder,\r\n                            battingOrder2,\r\n                            runnerCountState,\r\n                            freeWriteState,\r\n                            canvasX1,\r\n                            canvasY1,\r\n                            flag,\r\n                            batterResult,\r\n                            isPinch,\r\n                        )}\r\n                >修正確定</button>}\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
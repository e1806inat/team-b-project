{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\mein\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.jsx\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport pic from \"../../../../DB/diamond.png\";\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPlayGame = () => {\n  _s();\n  const [outCountState, setOutCountState] = useState(0);\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n  const freeWriteRef = useRef();\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  const [canvasCopy, setCanvasCopy] = useState(null);\n  // 画像読み込み完了トリガー\n  const [loaded, setLoaded] = useState(false);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    setCanvasCopy(canvas);\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      console.log(context);\n      const img = new Image();\n      img.src = pic; // 描画する画像など\n\n      img.onload = () => {\n        context.drawImage(img, 0, 0);\n        // 更にこれに続いて何か処理をしたい場合\n        context.fillStyle = 'rgb(200, 0, 0)';\n        context.fillRect(10, 10, 50, 50);\n        context.fillStyle = 'rgba(0, 0, 200, 0.5)';\n        context.fillRect(30, 30, 50, 50);\n        setLoaded(true);\n      };\n      canvasCopy.addEventListener(\"click\", e => {\n        const rect = e.target.getBoundingClientRect();\n\n        // ブラウザ上での座標を求める\n        const viewX = e.clientX - rect.left,\n          viewY = e.clientY - rect.top;\n\n        // 表示サイズとキャンバスの実サイズの比率を求める\n        const scaleWidth = canvasCopy.clientWidth / canvasCopy.width,\n          scaleHeight = canvasCopy.clientHeight / canvasCopy.height;\n\n        // ブラウザ上でのクリック座標をキャンバス上に変換\n        const canvasX = Math.floor(viewX / scaleWidth),\n          canvasY = Math.floor(viewY / scaleHeight);\n\n        // パスをリセット\n        context.beginPath();\n\n        // 線を引くスタート地点に移動\n        context.moveTo(0, 0);\n        context.lineTo(canvasX, canvasY);\n        // 線の色\n        context.strokeStyle = \"red\";\n\n        // 線の太さ\n        context.lineWidth = 10;\n\n        // 線を描画する\n        context.stroke();\n        console.log(canvasX, canvasY);\n      });\n    }\n  }, [context]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u901F\\u5831\\u5165\\u529B\\u753B\\u9762\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scoreBoard\",\n        children: scoreBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionButtons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outCounts\",\n        children: outCount(outCountState, setOutCountState)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BatterAndPitcher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeWrite\",\n        children: freeWrite(freeWriteRef)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diamond\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"800\",\n          height: \"800\",\n          id: \"canvas\",\n          className: \"diamondPng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"baseballButtons\",\n        children: BaseballButton()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"d8+4sM4gk40iQYrdPIn5YcAf26M=\");\n_c = InputPlayGame;\nexport default InputPlayGame;\nvar _c;\n$RefreshReg$(_c, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","freeWrite","BaseballButton","pic","useEffect","useRef","useState","InputPlayGame","outCountState","setOutCountState","freeWriteState","setFreeWriteState","freeWriteRef","context","setContext","canvasCopy","setCanvasCopy","loaded","setLoaded","canvasX1","setcanvasX1","canvasY1","setcanvasY1","canvas","document","getElementById","canvasContext","getContext","addEventListener","e","rect","target","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","clientWidth","width","scaleHeight","clientHeight","height","canvasX","Math","floor","canvasY","console","log","img","Image","src","onload","drawImage","fillStyle","fillRect","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/mein/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.jsx"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport pic from \"../../../../DB/diamond.png\"\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    const [outCountState, setOutCountState] = useState(0)\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n    const freeWriteRef = useRef()\r\n\r\n\r\n\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n    const [canvasCopy, setCanvasCopy] = useState(null)\r\n    // 画像読み込み完了トリガー\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        setCanvasCopy(canvas)\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n        \r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n        \r\n\r\n\r\n    }, [])\r\n\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            console.log(context)\r\n            const img = new Image()\r\n            img.src = pic // 描画する画像など\r\n\r\n\r\n\r\n            img.onload = () => {\r\n                context.drawImage(img, 0, 0)\r\n                // 更にこれに続いて何か処理をしたい場合\r\n                context.fillStyle = 'rgb(200, 0, 0)';\r\n                context.fillRect(10, 10, 50, 50);\r\n                context.fillStyle = 'rgba(0, 0, 200, 0.5)';\r\n                context.fillRect(30, 30, 50, 50);\r\n\r\n\r\n\r\n\r\n                setLoaded(true)\r\n            }\r\n\r\n            canvasCopy.addEventListener(\"click\", e => {\r\n\r\n                const rect = e.target.getBoundingClientRect();\r\n\r\n                // ブラウザ上での座標を求める\r\n                const viewX = e.clientX - rect.left,\r\n                    viewY = e.clientY - rect.top;\r\n\r\n                // 表示サイズとキャンバスの実サイズの比率を求める\r\n                const scaleWidth = canvasCopy.clientWidth / canvasCopy.width,\r\n                    scaleHeight = canvasCopy.clientHeight / canvasCopy.height;\r\n\r\n                // ブラウザ上でのクリック座標をキャンバス上に変換\r\n                const canvasX = Math.floor(viewX / scaleWidth),\r\n                    canvasY = Math.floor(viewY / scaleHeight);\r\n                    \r\n                // パスをリセット\r\n                context.beginPath();\r\n\r\n                // 線を引くスタート地点に移動\r\n                context.moveTo(0, 0);\r\n                context.lineTo(canvasX, canvasY)\r\n                // 線の色\r\n                context.strokeStyle = \"red\";\r\n\r\n                // 線の太さ\r\n                context.lineWidth = 10;\r\n\r\n                // 線を描画する\r\n                context.stroke();\r\n                console.log(canvasX, canvasY);\r\n            });\r\n        }\r\n    }, [context])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <h1>速報入力画面</h1>\r\n            <div className=\"parts\">\r\n                <div className=\"scoreBoard\">\r\n                    {scoreBoard()}\r\n                </div>\r\n                <div className=\"optionButtons\">\r\n\r\n                </div>\r\n                <div className=\"outCounts\">\r\n                    {outCount(outCountState, setOutCountState)}\r\n                </div>\r\n                <div className=\"BatterAndPitcher\">\r\n\r\n                </div>\r\n                <div className=\"freeWrite\">\r\n                    {freeWrite(freeWriteRef)}\r\n                </div>\r\n                <div className=\"diamond\">\r\n\r\n                    <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n                </div>\r\n                <div className=\"baseballButtons\">\r\n                    {BaseballButton()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,wBAAwB;AACnD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,OAAO,gCAAgC;AACvC,OAAOC,GAAG,MAAM,4BAA4B;AAC5C,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAGpD,MAAMC,aAAa,GAAG,MAAM;EAAA;EAExB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACI,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMM,YAAY,GAAGP,MAAM,EAAE;;EAK7B;EACA,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD;EACA,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAG3C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;;EAE3C;;EAEAF,SAAS,CAAC,MAAM;IACZ,MAAMmB,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;IAChDT,aAAa,CAACO,MAAM,CAAC;IACrB,MAAMG,aAAa,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAC7Cb,UAAU,CAACY,aAAa,CAAC;IAIzBH,MAAM,CAACK,gBAAgB,CAAC,OAAO,EAAEC,CAAC,IAAI;MAClC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,qBAAqB,EAAE;;MAE7C;MACA,MAAMC,KAAK,GAAGJ,CAAC,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI;QAC/BC,KAAK,GAAGP,CAAC,CAACQ,OAAO,GAAGP,IAAI,CAACQ,GAAG;;MAEhC;MACA,MAAMC,UAAU,GAAGhB,MAAM,CAACiB,WAAW,GAAGjB,MAAM,CAACkB,KAAK;QAChDC,WAAW,GAAGnB,MAAM,CAACoB,YAAY,GAAGpB,MAAM,CAACqB,MAAM;;MAErD;MACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACd,KAAK,GAAGM,UAAU,CAAC;QAC1CS,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACX,KAAK,GAAGM,WAAW,CAAC;MAE7CO,OAAO,CAACC,GAAG,CAACL,OAAO,EAAEG,OAAO,CAAC;MAC7B5B,WAAW,CAACyB,OAAO,CAAC;MACpBvB,WAAW,CAAC0B,OAAO,CAAC;IACxB,CAAC,CAAC;EAIN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA5C,SAAS,CAAC,MAAM;IACZ,IAAIS,OAAO,KAAK,IAAI,EAAE;MAClBoC,OAAO,CAACC,GAAG,CAACrC,OAAO,CAAC;MACpB,MAAMsC,GAAG,GAAG,IAAIC,KAAK,EAAE;MACvBD,GAAG,CAACE,GAAG,GAAGlD,GAAG,EAAC;;MAIdgD,GAAG,CAACG,MAAM,GAAG,MAAM;QACfzC,OAAO,CAAC0C,SAAS,CAACJ,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAC5B;QACAtC,OAAO,CAAC2C,SAAS,GAAG,gBAAgB;QACpC3C,OAAO,CAAC4C,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChC5C,OAAO,CAAC2C,SAAS,GAAG,sBAAsB;QAC1C3C,OAAO,CAAC4C,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAKhCvC,SAAS,CAAC,IAAI,CAAC;MACnB,CAAC;MAEDH,UAAU,CAACa,gBAAgB,CAAC,OAAO,EAAEC,CAAC,IAAI;QAEtC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,qBAAqB,EAAE;;QAE7C;QACA,MAAMC,KAAK,GAAGJ,CAAC,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI;UAC/BC,KAAK,GAAGP,CAAC,CAACQ,OAAO,GAAGP,IAAI,CAACQ,GAAG;;QAEhC;QACA,MAAMC,UAAU,GAAGxB,UAAU,CAACyB,WAAW,GAAGzB,UAAU,CAAC0B,KAAK;UACxDC,WAAW,GAAG3B,UAAU,CAAC4B,YAAY,GAAG5B,UAAU,CAAC6B,MAAM;;QAE7D;QACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACd,KAAK,GAAGM,UAAU,CAAC;UAC1CS,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACX,KAAK,GAAGM,WAAW,CAAC;;QAE7C;QACA7B,OAAO,CAAC6C,SAAS,EAAE;;QAEnB;QACA7C,OAAO,CAAC8C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACpB9C,OAAO,CAAC+C,MAAM,CAACf,OAAO,EAAEG,OAAO,CAAC;QAChC;QACAnC,OAAO,CAACgD,WAAW,GAAG,KAAK;;QAE3B;QACAhD,OAAO,CAACiD,SAAS,GAAG,EAAE;;QAEtB;QACAjD,OAAO,CAACkD,MAAM,EAAE;QAChBd,OAAO,CAACC,GAAG,CAACL,OAAO,EAAEG,OAAO,CAAC;MACjC,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACnC,OAAO,CAAC,CAAC;EAOb,oBACI;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC1B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,eACf;MAAK,SAAS,EAAC,OAAO;MAAA,wBAClB;QAAK,SAAS,EAAC,YAAY;QAAA,UACtBd,UAAU;MAAE;QAAA;QAAA;QAAA;MAAA,QACX,eACN;QAAK,SAAS,EAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAExB,eACN;QAAK,SAAS,EAAC,WAAW;QAAA,UACrBC,QAAQ,CAACQ,aAAa,EAAEC,gBAAgB;MAAC;QAAA;QAAA;QAAA;MAAA,QACxC,eACN;QAAK,SAAS,EAAC;MAAkB;QAAA;QAAA;QAAA;MAAA,QAE3B,eACN;QAAK,SAAS,EAAC,WAAW;QAAA,UACrBR,SAAS,CAACW,YAAY;MAAC;QAAA;QAAA;QAAA;MAAA,QACtB,eACN;QAAK,SAAS,EAAC,SAAS;QAAA,uBAEpB;UAAQ,KAAK,EAAC,KAAK;UAAC,MAAM,EAAC,KAAK;UAAC,EAAE,EAAC,QAAQ;UAAC,SAAS,EAAC;QAAY;UAAA;UAAA;UAAA;QAAA;MAAU;QAAA;QAAA;QAAA;MAAA,QAC3E,eACN;QAAK,SAAS,EAAC,iBAAiB;QAAA,UAC3BV,cAAc;MAAE;QAAA;QAAA;QAAA;MAAA,QACf;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAGd,CAAC;AAAA,GAlJKK,aAAa;AAAA,KAAbA,aAAa;AAoJnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
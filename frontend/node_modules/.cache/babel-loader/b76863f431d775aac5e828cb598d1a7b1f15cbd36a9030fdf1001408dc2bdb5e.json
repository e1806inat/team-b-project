{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\mein\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.js\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport pic from \"../../../../DB/diamond.png\";\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPlayGame = () => {\n  _s();\n  const [outCountState, setOutCountState] = useState(0);\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n  const freeWriteRef = useRef();\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  // 画像読み込み完了トリガー\n  const [loaded, setLoaded] = useState(false);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      const img = new Image();\n      img.src = \"img.jpg\"; // 描画する画像など\n\n      //img.onload = () => {\n\n      context.drawImage(img, 0, 0);\n      // 更にこれに続いて何か処理をしたい場合\n\n      //削除\n      context.clearRect(0, 0, 1000, 1000);\n\n      // パスをリセット\n      context.beginPath();\n\n      // 線を引くスタート地点に移動\n      context.moveTo(500, 500);\n      let flag = 2; //１が直線、２がフライ、3がゴロ\n\n      // スタート地点から(200,200)まで線を引く\n      if (flag === 1) {\n        console.log(\"flag1\");\n        //context.lineTo(200, 200)\n        context.lineTo(canvasX1, canvasY1);\n      }\n      if (flag === 2) {\n        let start = {\n          x: 500,\n          y: 500\n        };\n        let cp = {\n          x: 500,\n          y: start.y / 3 * 2\n        }; //ここで曲がり具合調整\n        console.log(\"flag2\");\n        context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\n      }\n      if (flag === 3) {\n        console.log(\"flag3\");\n        drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\n      }\n\n      // 線の色\n      context.strokeStyle = \"red\";\n\n      // 線の太さ\n      context.lineWidth = 5;\n\n      // 線を描画する\n      context.stroke();\n\n      //setLoaded(true)\n      //}\n\n      // 波線描画\n      // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\n\n      function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\n        const BEGIN = 0,\n          CTRL = 1,\n          END = 2;\n        const x1 = 0,\n          y1 = 1;\n        console.log(\"関数内\");\n        var distance = calcDistance(x, y, mx, my);\n        var cycle = Math.floor(distance / waveLen);\n        var ps = [[x, y], [0, 0], [x, y]];\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\n        var rad = calcRadian(x, y, mx, my);\n        if (0 != rad) {\n          ctx.translate(x, y);\n          ctx.rotate(rad);\n          ctx.translate(-x, -y);\n        }\n        for (var i = 0; i < cycle; i++) {\n          ps[END][x1] += waveLen;\n          ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n          ps[CTRL][y1] = ps[BEGIN][y1] + (i % 2 != 0 ? -amplitude : amplitude);\n          ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n          ps[BEGIN][x1] = ps[END][x1];\n          ps[BEGIN][y1] = ps[END][y1];\n        }\n        ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\n        ps[CTRL][x1] = ps[BEGIN][x1] + (ps[END][x1] - ps[BEGIN][x1]) * 0.5;\n        ps[CTRL][y1] = ps[BEGIN][y1] + (cycle % 2 != 0 ? -amplitude : amplitude);\n        ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      // 2点間座標からラジアン算出\n      function calcRadian(x, y, mx, my) {\n        return Math.atan2(my - y, mx - x);\n      }\n\n      // 2点間座標の距離算出\n      function calcDistance(x, y, mx, my) {\n        return Math.hypot(my - y, mx - x);\n      }\n    }\n  }, [canvasX1]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u901F\\u5831\\u5165\\u529B\\u753B\\u9762\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: \"800\",\n      height: \"800\",\n      id: \"canvas\",\n      className: \"diamondPng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"rokRwSQxeeeISCQyoOBWSGjA0rY=\");\n_c = InputPlayGame;\nexport default InputPlayGame;\nvar _c;\n$RefreshReg$(_c, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","freeWrite","BaseballButton","pic","useEffect","useRef","useState","InputPlayGame","outCountState","setOutCountState","freeWriteState","setFreeWriteState","freeWriteRef","context","setContext","loaded","setLoaded","canvasX1","setcanvasX1","canvasY1","setcanvasY1","canvas","document","getElementById","canvasContext","getContext","addEventListener","e","rect","target","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","clientWidth","width","scaleHeight","clientHeight","height","canvasX","Math","floor","canvasY","console","log","img","Image","src","drawImage","clearRect","beginPath","moveTo","flag","lineTo","start","x","y","cp","quadraticCurveTo","drawWaveLine","strokeStyle","lineWidth","stroke","mx","my","amplitude","waveLen","color","ctx","BEGIN","CTRL","END","x1","y1","distance","calcDistance","cycle","ps","save","rad","calcRadian","translate","rotate","i","restore","atan2","hypot"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/mein/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.js"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport pic from \"../../../../DB/diamond.png\"\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    const [outCountState, setOutCountState] = useState(0)\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n    const freeWriteRef = useRef()\r\n\r\n\r\n\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n    // 画像読み込み完了トリガー\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n    }, [])\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            const img = new Image()\r\n            img.src = \"img.jpg\" // 描画する画像など\r\n\r\n\r\n            //img.onload = () => {\r\n\r\n            context.drawImage(img, 0, 0)\r\n            // 更にこれに続いて何か処理をしたい場合\r\n\r\n            //削除\r\n            context.clearRect(0, 0, 1000, 1000);\r\n\r\n            // パスをリセット\r\n            context.beginPath();\r\n\r\n            // 線を引くスタート地点に移動\r\n            context.moveTo(500, 500);\r\n\r\n            let flag = 2;   //１が直線、２がフライ、3がゴロ\r\n\r\n            // スタート地点から(200,200)まで線を引く\r\n            if (flag === 1) {\r\n                console.log(\"flag1\")\r\n                //context.lineTo(200, 200)\r\n                context.lineTo(canvasX1, canvasY1)\r\n            }\r\n            if (flag === 2) {\r\n                let start = { x: 500, y: 500 };\r\n                let cp = { x: 500, y: start.y / 3 * 2 };    //ここで曲がり具合調整\r\n                console.log(\"flag2\")\r\n                context.quadraticCurveTo(cp.x, cp.y, canvasX1, canvasY1);\r\n            }\r\n            if (flag === 3) {\r\n                console.log(\"flag3\")\r\n                drawWaveLine(500, 500, canvasX1, canvasY1, 20, 20, \"red\", context);\r\n            }\r\n\r\n\r\n            // 線の色\r\n            context.strokeStyle = \"red\";\r\n\r\n            // 線の太さ\r\n            context.lineWidth = 5;\r\n\r\n            // 線を描画する\r\n            context.stroke();\r\n\r\n            //setLoaded(true)\r\n            //}\r\n\r\n\r\n            // 波線描画\r\n            // 0度状態でキャンバス中心〜マウス座標までの距離分の波線を描画して、マウス座標との角度分、回転する\r\n\r\n            function drawWaveLine(x, y, mx, my, amplitude, waveLen, color, ctx) {\r\n                const BEGIN = 0, CTRL = 1, END = 2;\r\n                const x1 = 0, y1 = 1;\r\n                console.log(\"関数内\")\r\n                var distance = calcDistance(x, y, mx, my);\r\n                var cycle = Math.floor(distance / waveLen);\r\n                var ps = [[x, y], [0, 0], [x, y]];\r\n\r\n                ctx.save();\r\n                ctx.strokeStyle = color;\r\n                ctx.beginPath();\r\n\r\n                ctx.moveTo(ps[BEGIN][x1], ps[BEGIN][y1]);\r\n\r\n                var rad = calcRadian(x, y, mx, my);\r\n                if (0 != rad) {\r\n                    ctx.translate(x, y);\r\n                    ctx.rotate(rad);\r\n                    ctx.translate(-x, -y);\r\n                }\r\n\r\n                for (var i = 0; i < cycle; i++) {\r\n                    ps[END][x1] += waveLen;\r\n                    ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                    ps[CTRL][y1] = ps[BEGIN][y1] + ((i % 2 != 0) ? -amplitude : amplitude);\r\n\r\n                    ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                    ps[BEGIN][x1] = ps[END][x1];\r\n                    ps[BEGIN][y1] = ps[END][y1];\r\n                }\r\n\r\n                ps[END][x1] += distance - calcDistance(x, y, ps[END][x1], ps[END][y1]);\r\n                ps[CTRL][x1] = ps[BEGIN][x1] + ((ps[END][x1] - ps[BEGIN][x1]) * 0.5);\r\n                ps[CTRL][y1] = ps[BEGIN][y1] + (((cycle) % 2 != 0) ? -amplitude : amplitude);\r\n\r\n                ctx.quadraticCurveTo(ps[CTRL][x1], ps[CTRL][y1], ps[END][x1], ps[END][y1]);\r\n\r\n                ctx.stroke();\r\n                ctx.restore();\r\n            }\r\n\r\n            // 2点間座標からラジアン算出\r\n            function calcRadian(x, y, mx, my) {\r\n                return Math.atan2(my - y, mx - x);\r\n            }\r\n\r\n            // 2点間座標の距離算出\r\n            function calcDistance(x, y, mx, my) {\r\n                return Math.hypot(my - y, mx - x);\r\n            }\r\n        }\r\n    }, [canvasX1])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <h1>速報入力画面</h1>\r\n            <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
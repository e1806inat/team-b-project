{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\team-b-project\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.jsx\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { runnerCount } from './comSokuho/runnerCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport { useEffect, useState } from 'react';\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\";\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\";\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\n\n//css\nimport \"./InputPlayGame.css\";\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\n\n//プルダウン\nimport { PullDown } from './comSokuho/PullDown/PullDown';\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\n\n//canvasの描画\nimport { Ground } from './comSokuho/comCanvas/Ground';\nimport { battedBall } from './comSokuho/comCanvas/battedBall';\n\n//バックエンドのurlを取得\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\n\n//選手読み込み\n// const setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\n\n//     //ピッチャーを探す\n//     const ditectPitcher = (data) => {\n//         let result = 0\n//         data.map((data, ind) => {\n//             if (data.position === \"ピッチャー\") {\n//                 result = ind\n//             }\n//         })\n//         return result\n//     }\n\n//     fetch(backendUrl + \"/member/starting_member_call\", {\n//         method: \"POST\",\n//         mode: \"cors\",\n//         headers: {\n//             \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\n//     })\n//         .then((response) => response.json())\n//         .then((TeamAdata) => {\n//             TeamAdata.sort((a, b) => a.batting_order - b.batting_order)\n//             console.log(TeamAdata)\n//             setBattingOrder(TeamAdata)\n\n//             fetch(backendUrl + \"/member/starting_member_call\", {\n//                 method: \"POST\",\n//                 mode: \"cors\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\n//             })\n//                 .then((response) => response.json())\n//                 .then((TeamBdata) => {\n//                     TeamBdata.sort((a, b) => a.batting_order - b.batting_order)\n//                     console.log(TeamBdata)\n//                     setBattingOrder2(TeamBdata)\n//                     nowPlayingMember[0].pitcher = ditectPitcher(TeamBdata)\n//                     nowPlayingMember[1].pitcher = ditectPitcher(TeamAdata)\n//                     setNowPlayingMember(nowPlayingMember)\n//                 })\n//         })\n// }\n\n//自作プルダウン　改造あり\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2) => {\n  //pulldownIdは0でいいです。\n  //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\n  //idテキストは連想配列の属性を書きます。\n  //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\n  //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tekitouni\",\n      onChange: e => {\n        //ステイトが変化すると再描画させるための文、これがないと再描画されない\n        //なお、消すと再描画はされないが内部は変化する\n        nowSelected = nowSelected.slice(0, nowSelected.length);\n        nowSelected[pulldownId] = e.target.value;\n        setNowSelected(nowSelected);\n        console.log(nowSelected);\n      },\n      children: ArrayList.map((component, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ind,\n        children: [component[idText], \"\\u6253\\u5E2D\\u76EE\\uFF1A\", component.inning % 10 === 1 && urlSchoolName, component.inning % 10 === 2 && urlSchoolName2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n//打席編集\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2) => {\n  console.log(battersBox);\n  const touchedCoordinate = battersBox.touched_coordinate.split(\"_\");\n  let teamABatter = 0;\n  let teamBpitcher = 0;\n  let teamBBatter = 0;\n  let teamApitcher = 0;\n  const value = battersBox.inning;\n  for (let i = nowSelected; i >= 0; i--) {\n    if (value !== battersBoxAll[i].inning) {\n      teamBBatter = battersBoxAll[i].player_id;\n      teamApitcher = battersBoxAll[i].pitcher_id;\n      break;\n    }\n  }\n  setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1]);\n  setNowOutCountState(battersBox.outcount);\n  setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base === 0, battersBox.base === 1]);\n  setFreeWriteState(battersBox.text_inf);\n  setcanvasX1(touchedCoordinate[0]);\n  setcanvasY1(touchedCoordinate[1]);\n  setAddScoreState(battersBox.score);\n  if (battersBox.inning % 10 === 1) {\n    setNowPlayingMember([{\n      batter: battingOrder.findIndex(u => u.player_id === battersBox.player_id),\n      pitcher: battingOrder2.findIndex(u => u.player_id === battersBox.pitcher_id)\n    }, {\n      batter: teamBBatter,\n      pitcher: teamApitcher\n    }]);\n  } else if (battersBox.inning % 10 === 2) {\n    setNowPlayingMember([{\n      batter: teamABatter,\n      pitcher: teamBpitcher\n    }, {\n      batter: battingOrder2.findIndex(u => u.player_id === battersBox.player_id),\n      pitcher: battingOrder.findIndex(u => u.player_id === battersBox.pitcher_id)\n    }]);\n  }\n};\n\n//試合中の試合の情報を登録する\nconst DuringGameRegister = () => {};\n\n//一時打席情報登録用のテーブル作成\n_c = DuringGameRegister;\nconst TmpTableCreate = async urlGameId => {\n  await fetch(backendUrl + \"/daseki/tmp_table_create\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//テーブル存在確認\n_c2 = TmpTableCreate;\nconst TmpTableCheck = (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\n  fetch(backendUrl + \"/daseki/tmp_table_check\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    //テーブルが存在しないとき\n    if (data === \"not exist\") {\n      setIsExistTmpTable(false);\n    }\n\n    //テーブルが存在するとき\n    else if (data === \"exist\") {\n      console.log(data);\n      setIsExistTmpTable(true);\n      TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2);\n    }\n  });\n};\n\n////試合情報受け取り（速報用）\n_c3 = TmpTableCheck;\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\n  fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    setDasekiAll(data);\n\n    //空っぽなら無視\n    if (data.length !== 0) {\n      let latestDasaki = data[data.length - 1];\n      if (latestDasaki.outcount === 3) {\n        //アウトカウント取得\n        setNowOutCountState(0);\n\n        //イニング取得\n        if (latestDasaki.inning % 10 === 1) {\n          setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1]);\n        } else {\n          setNowIningState([Math.floor(latestDasaki.inning / 10), 0]);\n        }\n\n        //ランナー取得\n        setRunnerCountState([false, false, false]);\n      } else {\n        //アウトカウント取得\n        setNowOutCountState(latestDasaki.outcount);\n\n        //イニング取得\n        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1]);\n\n        //ランナー取得\n        setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"]);\n      }\n\n      //スコア取得\n      //スコアの初期化\n      const InitialScore = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];\n      let sendScore = InitialScore;\n      data.map(u => {\n        //null対策\n        if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0;\n        //受け取ったスコアを配列に格納\n        sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score;\n      });\n      setScoreState(sendScore);\n\n      //今現在のプレイヤー取得\n      fetch(backendUrl + \"/member/starting_member_call\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          game_id: urlGameId,\n          school_id: urlSchoolId\n        })\n      }).then(response => response.json()).then(TeamAdata => {\n        TeamAdata.sort((a, b) => a.batting_order - b.batting_order);\n        console.log(TeamAdata);\n        setBattingOrder(TeamAdata);\n\n        //打順を持ってくる\n        fetch(backendUrl + \"/member/starting_member_call\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            game_id: urlGameId,\n            school_id: urlSchoolId2\n          })\n        }).then(response => response.json()).then(TeamBdata => {\n          TeamBdata.sort((a, b) => a.batting_order - b.batting_order);\n          console.log(TeamBdata);\n          setBattingOrder2(TeamBdata);\n          let teamABatter = 0;\n          let teamApitcher = 0;\n          let teamBBatter = 0;\n          let teamBpitcher = 0;\n\n          //先攻\n          if (latestDasaki.inning % 10 - 1 === 0) {\n            teamABatter = TeamAdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamBpitcher = TeamBdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                teamBBatter = TeamBdata.findIndex(u => u.player_id === data[i].player_id);\n                teamApitcher = TeamAdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            if (data[data.length - 1].outcount !== 3) teamABatter++;else teamBBatter++;\n          }\n          //後攻\n          else if (latestDasaki.inning % 10 - 1 === 1) {\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                console.log(data[i]);\n                teamABatter = TeamAdata.findIndex(u => u.player_id === data[i].player_id);\n                teamBpitcher = TeamBdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            teamBBatter = TeamBdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamApitcher = TeamAdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            if (data[data.length - 1].outcount !== 3) teamBBatter++;else teamABatter++;\n          }\n\n          //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\n          if (teamABatter === 9 || teamABatter === -1) teamABatter = 0;\n          if (teamBpitcher === -1) teamBpitcher = 0;\n          if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0;\n          if (teamApitcher === -1) teamApitcher = 0;\n\n          //最後に今現在プレイ中の選手を格納\n          setNowPlayingMember([{\n            batter: teamABatter,\n            pitcher: teamBpitcher\n          }, {\n            batter: teamBBatter,\n            pitcher: teamApitcher\n          }]);\n        });\n      });\n    }\n  });\n};\n\n//一時打席情報を本打席テーブルに送る\n_c4 = TmpDasekiCall;\nconst TableRegister = urlGameId => {\n  console.log(urlGameId + \"の試合情報を登録しました\");\n  fetch(backendUrl + \"/daseki/data_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//一時打席情報を削除\n_c5 = TableRegister;\nconst TmpTableDelete = urlGameId => {\n  console.log(urlGameId + \"の試合情報を削除しました\");\n  fetch(backendUrl + \"/daseki/tmp_table_delete\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//打率計算\n_c6 = TmpTableDelete;\nconst CalculateBatAvg = urlGameId => {\n  console.log(\"打率計算関数を呼び出しました\");\n  fetch(backendUrl + \"/member/cal_BA\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\n_c7 = CalculateBatAvg;\nconst DasekiRegister = sendInfo => {\n  fetch(backendUrl + \"/daseki/daseki_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//選手登録された選手読み込む\n_c8 = DasekiRegister;\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\n  fetch(backendUrl + \"/member/tournament_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      tournament_id: urlTournamentId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(data => {\n    setRegisteredMember(data);\n  });\n};\n\n//修正内容をバックエンドに送る\nconst sendEdit = (urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch) => {\n  console.log(dasekiAll[nowSelected]);\n  //DBに送るための準備\n\n  let totalScore = 0;\n  scoreState[nowIningState[1]].map(score => {\n    totalScore = totalScore + score;\n  });\n  let runnerCount = \"\";\n  runnerCountState.map(runner => {\n    if (runner === true) runnerCount = \"1\" + runnerCount;else if (runner === false) runnerCount = \"0\" + runnerCount;\n  });\n  let isHit = 0;\n  let isFourball = 0;\n  let isDeadball = 0;\n  if (batterResult === 0) {} else if (batterResult === 1) isHit = 1;else if (batterResult === 2) isFourball = 1;else if (batterResult === 3) isDeadball = 1;\n\n  //DBにデータを送る\n  let sendInfo = {\n    table_name: urlGameId,\n    at_bat_id: dasekiAll[nowSelected].at_bat_id,\n    inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\n    game_id: urlGameId,\n    school_id: dasekiAll[nowSelected].school_id,\n    player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\n    pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\n    score: addScoreState,\n    total_score: totalScore,\n    outcount: nowOutCountState,\n    base: runnerCount,\n    text_inf: freeWriteState,\n    pass: 0,\n    touched_coordinate: canvasX1 + \"_\" + canvasY1,\n    ball_kind: flag,\n    hit: isHit,\n    foreball: isFourball,\n    deadball: isDeadball,\n    pinch: isPinch\n  };\n  fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n  console.log(sendInfo);\n};\nconst canvasSize = 1000;\nconst homebase = 400;\nconst InputPlayGame = () => {\n  _s();\n  //ページ遷移用\n  const navigate = useNavigate();\n  const PageTransition = url => {\n    navigate(url);\n  };\n\n  //urlから値を読み出す\n  const [searchParams] = useSearchParams();\n  const urlTournamentId = searchParams.get(\"urlTournamentId\");\n  const urlTournamentName = searchParams.get(\"urlTournamentName\");\n  const urlSchoolId = searchParams.get(\"urlSchoolId\");\n  const urlSchoolName = searchParams.get(\"urlSchoolName\");\n  const urlSchoolId2 = searchParams.get(\"urlSchoolId2\");\n  const urlSchoolName2 = searchParams.get(\"urlSchoolName2\");\n  const urlGameId = searchParams.get(\"urlGameId\");\n\n  //試合の一時テーブルが存在するかどうかを管理するステイト\n  const [isExistTmpTable, setIsExistTmpTable] = useState(false);\n\n  //Score記録 左が裏表、右が回数 イニングとは逆\n  const {\n    Score\n  } = require(\"../../../../DB/Score\");\n  const [scoreState, setScoreState] = useState(Score);\n\n  //Scoreの加算値の監視\n  const [addScoreState, setAddScoreState] = useState(0);\n\n  //今のイニング 左が回、右が表裏\n  const [nowIningState, setNowIningState] = useState([0, 0]);\n\n  //自由記述内容を監視\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n\n  //自由記述編集モードのフラグ\n  const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false);\n\n  //多分打球の種類だと思われる\n  const [flag, setFlag] = useState(2);\n\n  //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\n  const [batterResult, setBatterResult] = useState(0);\n\n  //緑プルダウン用\n  const [nowPosition, setNowPosition] = useState(15);\n\n  //アウトカウント\n  const [nowOutCountState, setNowOutCountState] = useState(0);\n\n  //ランナーカウント\n  const [runnerCountState, setRunnerCountState] = useState([false, false, false]);\n\n  //選手登録情報を読み込む\n  const [registeredMember1, setRegisteredMember1] = useState([]);\n  const [registeredMember2, setRegisteredMember2] = useState([]);\n\n  //打席一覧情報のステイト\n  const [dasekiAll, setDasekiAll] = useState([{\n    at_bat_id: 1,\n    ball_kind: \"2\",\n    base: \"000\",\n    deadball: 0,\n    foreball: 0,\n    game_id: 1,\n    hit: 0,\n    inning: 11,\n    outcount: 3,\n    pass: 0,\n    pinch: \"0\",\n    pitcher_id: 21,\n    player_id: 7,\n    school_id: 1,\n    score: 0,\n    text_inf: \"アウト:ピッチャーフライ\",\n    total_score: 0,\n    touched_coordinate: \"400_450\"\n  }]);\n\n  //打席一覧情報のプルダウンの選択状況を管理するステイト\n  const [nowSelected, setNowSelected] = useState([]);\n\n  //打順と打者のリスト\n  const [battingOrder, setBattingOrder] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n  const [battingOrder2, setBattingOrder2] = useState([{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }]);\n\n  //今の打順と今のピッチャーが誰なのかを2チーム文記録する\n  const [nowPlayingMember, setNowPlayingMember] = useState([{\n    batter: 0,\n    pitcher: 0\n  }, {\n    batter: 0,\n    pitcher: 0\n  }]);\n\n  //代打フラグ 0なら代打でない 1なら代打\n  const [isPinch, setIsPinch] = useState(0);\n\n  //編集モードであるかどうかを監視するステイト\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  //画面解像度取得\n  var sw = document.documentElement.clientWidth; // 画面の横幅\n  var sh = document.documentElement.clientHeight; // 画面の高さ\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n  //一つのStateで管理しようぜ的な試み\n  //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n\n  const homebase = 520;\n  const h = 70;\n  const l = -110;\n  const w = 0.03 * homebase; //ベースの幅\n  const margin = 10; //ベース位置調整用\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n  useEffect(() => {\n    if (context !== null) {\n      Ground(context);\n    }\n  }, [context]);\n\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      //削除\n      context.clearRect(0, 0, canvasSize, canvasSize);\n      Ground(context);\n\n      //ベースの色\n      let baseColor2 = [];\n      for (let i = 0; i < 3; i++) {\n        if (runnerCountState[i]) {\n          baseColor2[i] = \"blue\";\n          console.log(baseColor2[i]);\n        } else {\n          baseColor2[i] = \"white\";\n        }\n      }\n      context.strokeStyle = \"black\";\n\n      //３塁ベース\n      context.fillStyle = baseColor2[0];\n      context.beginPath();\n      context.moveTo(homebase * 3 / 4 + l, homebase * 3 / 4 - margin + h);\n      context.lineTo(homebase * 3 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\n      context.lineTo(homebase * 3 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\n      context.lineTo(homebase * 3 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.lineWidth = 1;\n      context.stroke();\n\n      //2塁ベース\n      context.fillStyle = baseColor2[1];\n      context.beginPath();\n      context.moveTo(homebase + l, homebase / 2 - margin + h);\n      context.lineTo(homebase - w + l, homebase / 2 + w - margin + h);\n      context.lineTo(homebase + l, homebase / 2 + w * 2 - margin + h);\n      context.lineTo(homebase + w + l, homebase / 2 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //1塁ベース\n      context.fillStyle = baseColor2[2];\n      context.beginPath();\n      context.moveTo(homebase * 5 / 4 + l, homebase * 3 / 4 - margin + h);\n      context.lineTo(homebase * 5 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\n      context.lineTo(homebase * 5 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\n      context.lineTo(homebase * 5 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      battedBall(context, canvasX1, canvasY1, flag);\n    }\n  }, [canvasX1, canvasY1, flag, runnerCountState]);\n  useEffect(() => {\n    //データベースからデータをもらうために呼び出す\n    // setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\n\n    //チーム1の選手登録情報を読み出す\n    loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId);\n\n    //チーム2の選手登録情報を読み出す\n    loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2);\n\n    //テーブル存在確認\n    TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      TitleText: \"速報入力画面\",\n      PageTransition: PageTransition,\n      valueUrl: -1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 13\n    }, this), !isExistTmpTable && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          height: 100 + \"px\",\n          width: 30 + \"%\",\n          fontSize: 30 + \"px\"\n        },\n        onClick: async () => {\n          await TmpTableCreate(urlGameId);\n          await TmpTableCreate(urlGameId);\n          await TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll);\n        },\n        children: \"\\u8A66\\u5408\\u3092\\u958B\\u59CB\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts\",\n      children: [isExistTmpTable && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scoreBoard\",\n          children: scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"optionButtons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outCountsAndRunnerCounts\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"outCount\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"outCountDisplay\",\n              children: \"o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 33\n            }, this), outCount(nowOutCountState, setNowOutCountState)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 29\n          }, this), \"\\uFF13\\u5841\\uFF1A\\uFF12\\u5841\\uFF1A\\uFF11\\u5841\", runnerCount(runnerCountState, setRunnerCountState)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"BatterAndPitcher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"BatterPitcher\",\n          children: /*#__PURE__*/_jsxDEV(PullDownMember, {\n            battingOrder: battingOrder,\n            battingOrder2: battingOrder2,\n            setBattingOrder: setBattingOrder,\n            registeredMember1: registeredMember1,\n            registeredMember2: registeredMember2,\n            nowIningState: nowIningState,\n            nowPlayingMember: nowPlayingMember,\n            setNowPlayingMember: setNowPlayingMember,\n            setIsPinch: setIsPinch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"freeWrite\",\n          children: freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PullDown, {\n          nowPosition: nowPosition,\n          setNowPosition: setNowPosition,\n          setcanvasX1: setcanvasX1,\n          setcanvasY1: setcanvasY1,\n          setFlag: setFlag,\n          setFreeWriteState: setFreeWriteState,\n          setBatterResult: setBatterResult,\n          addScoreState: addScoreState,\n          GameEndPopup_field: GameEndPopup,\n          TableRegister: TableRegister,\n          urlGameId: urlGameId,\n          TmpTableDelete: TmpTableDelete,\n          CalculateBatAvg: CalculateBatAvg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diamond\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"800\",\n          height: \"800\",\n          id: \"canvas\",\n          className: \"diamondPng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baseballButtons\",\n          children: BaseballButton(addScoreState, setAddScoreState)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateButton\",\n          children: /*#__PURE__*/_jsxDEV(Popupfield, {\n            nowIningState: nowIningState //今が何回なのか\n            ,\n            setNowIningState: setNowIningState //今が何回なのかの変更関数\n            ,\n            addScoreState: addScoreState,\n            setAddScoreState: setAddScoreState,\n            scoreState: scoreState,\n            setScoreState: setScoreState,\n            nowOutCountState: nowOutCountState,\n            setNowOutCountState: setNowOutCountState,\n            DasekiRegister: DasekiRegister,\n            urlGameId: urlGameId,\n            urlSchoolId: urlSchoolId,\n            urlSchoolId2: urlSchoolId2,\n            nowPlayingMember: nowPlayingMember,\n            setNowPlayingMember: setNowPlayingMember,\n            battingOrder: battingOrder,\n            battingOrder2: battingOrder2,\n            runnerCountState: runnerCountState,\n            freeWriteState: freeWriteState,\n            setFreeWriteState: setFreeWriteState,\n            canvasX1: canvasX1,\n            setcanvasX1: setcanvasX1,\n            canvasY1: canvasY1,\n            setcanvasY1: setcanvasY1,\n            flag: flag,\n            batterResult: batterResult,\n            setBatterResult: setBatterResult,\n            isPinch: isPinch,\n            setIsPinch: setIsPinch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this), makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEditMode(!isEditMode);\n          editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2);\n        },\n        children: \"\\u4FEE\\u6B63\\u6253\\u5E2D\\u9078\\u629E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendEdit(urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch),\n        children: \"\\u4FEE\\u6B63\\u78BA\\u5B9A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 776,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"kQJg9WhMXN+JYUAqgPLzYG1MJgI=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c9 = InputPlayGame;\nexport default InputPlayGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"DuringGameRegister\");\n$RefreshReg$(_c2, \"TmpTableCreate\");\n$RefreshReg$(_c3, \"TmpTableCheck\");\n$RefreshReg$(_c4, \"TmpDasekiCall\");\n$RefreshReg$(_c5, \"TableRegister\");\n$RefreshReg$(_c6, \"TmpTableDelete\");\n$RefreshReg$(_c7, \"CalculateBatAvg\");\n$RefreshReg$(_c8, \"DasekiRegister\");\n$RefreshReg$(_c9, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","runnerCount","freeWrite","BaseballButton","useEffect","useState","Popupfield","GameEndPopup","EditPoint","OptionButton","TitleBar","PullDown","PullDownMember","useSearchParams","useNavigate","Ground","battedBall","backendUrl","require","makePulldown","pulldownId","ArrayList","idText","nowSelected","setNowSelected","urlSchoolName","urlSchoolName2","e","slice","length","target","value","console","log","map","component","ind","inning","editBattersBox","battersBox","battersBoxAll","setNowIningState","setNowOutCountState","setRunnerCountState","setNowPlayingMember","setFreeWriteState","setcanvasX1","setcanvasY1","setAddScoreState","battingOrder","battingOrder2","touchedCoordinate","touched_coordinate","split","teamABatter","teamBpitcher","teamBBatter","teamApitcher","i","player_id","pitcher_id","Math","floor","outcount","base","text_inf","score","batter","findIndex","u","pitcher","DuringGameRegister","TmpTableCreate","urlGameId","fetch","method","mode","headers","body","JSON","stringify","table_name","then","response","text","data","TmpTableCheck","setIsExistTmpTable","TmpDasekiCall","urlTournamentId","urlSchoolId","urlSchoolId2","setScoreState","setDasekiAll","setBattingOrder","setBattingOrder2","json","latestDasaki","InitialScore","sendScore","game_id","school_id","TeamAdata","sort","a","b","batting_order","TeamBdata","TableRegister","TmpTableDelete","CalculateBatAvg","DasekiRegister","sendInfo","loadRegisteredMember","setRegisteredMember","tournament_id","sendEdit","dasekiAll","nowIningState","addScoreState","scoreState","nowOutCountState","nowPlayingMember","runnerCountState","freeWriteState","canvasX1","canvasY1","flag","batterResult","isPinch","totalScore","runner","isHit","isFourball","isDeadball","at_bat_id","total_score","pass","ball_kind","hit","foreball","deadball","pinch","canvasSize","homebase","InputPlayGame","navigate","PageTransition","url","searchParams","get","urlTournamentName","isExistTmpTable","Score","freeWriteModeFlag","setFreeWriteModeFlag","setFlag","setBatterResult","nowPosition","setNowPosition","registeredMember1","setRegisteredMember1","registeredMember2","setRegisteredMember2","player_name_kanji","setIsPinch","isEditMode","setIsEditMode","sw","document","documentElement","clientWidth","sh","clientHeight","context","setContext","h","l","w","margin","canvas","getElementById","canvasContext","getContext","addEventListener","rect","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","width","scaleHeight","height","canvasX","canvasY","clearRect","baseColor2","strokeStyle","fillStyle","beginPath","moveTo","lineTo","closePath","fill","lineWidth","stroke","fontSize"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/team-b-project/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.jsx"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { runnerCount } from './comSokuho/runnerCount';\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport { useEffect, useState } from 'react';\r\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\r\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\"\r\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\"\r\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\r\n\r\n//css\r\nimport \"./InputPlayGame.css\"\r\n\r\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\r\n\r\n//プルダウン\r\nimport { PullDown } from './comSokuho/PullDown/PullDown'\r\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember'\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\n\r\n//canvasの描画\r\nimport { Ground } from './comSokuho/comCanvas/Ground';\r\nimport { battedBall } from './comSokuho/comCanvas/battedBall';\r\n\r\n//バックエンドのurlを取得\r\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\r\n\r\n\r\n//選手読み込み\r\n// const setBatter = (setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember) => {\r\n\r\n//     //ピッチャーを探す\r\n//     const ditectPitcher = (data) => {\r\n//         let result = 0\r\n//         data.map((data, ind) => {\r\n//             if (data.position === \"ピッチャー\") {\r\n//                 result = ind\r\n//             }\r\n//         })\r\n//         return result\r\n//     }\r\n\r\n//     fetch(backendUrl + \"/member/starting_member_call\", {\r\n//         method: \"POST\",\r\n//         mode: \"cors\",\r\n//         headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n//     })\r\n//         .then((response) => response.json())\r\n//         .then((TeamAdata) => {\r\n//             TeamAdata.sort((a, b) => a.batting_order - b.batting_order)\r\n//             console.log(TeamAdata)\r\n//             setBattingOrder(TeamAdata)\r\n\r\n//             fetch(backendUrl + \"/member/starting_member_call\", {\r\n//                 method: \"POST\",\r\n//                 mode: \"cors\",\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//                 body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n//             })\r\n//                 .then((response) => response.json())\r\n//                 .then((TeamBdata) => {\r\n//                     TeamBdata.sort((a, b) => a.batting_order - b.batting_order)\r\n//                     console.log(TeamBdata)\r\n//                     setBattingOrder2(TeamBdata)\r\n//                     nowPlayingMember[0].pitcher = ditectPitcher(TeamBdata)\r\n//                     nowPlayingMember[1].pitcher = ditectPitcher(TeamAdata)\r\n//                     setNowPlayingMember(nowPlayingMember)\r\n//                 })\r\n//         })\r\n// }\r\n\r\n//自作プルダウン　改造あり\r\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2) => {\r\n    //pulldownIdは0でいいです。\r\n    //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\r\n    //idテキストは連想配列の属性を書きます。\r\n    //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\r\n    //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\r\n\r\n    return (\r\n        <>\r\n            <select id=\"tekitouni\"\r\n                onChange={(e) => {\r\n                    //ステイトが変化すると再描画させるための文、これがないと再描画されない\r\n                    //なお、消すと再描画はされないが内部は変化する\r\n                    nowSelected = nowSelected.slice(0, nowSelected.length);\r\n                    nowSelected[pulldownId] = e.target.value\r\n                    setNowSelected(nowSelected)\r\n                    console.log(nowSelected)\r\n                }\r\n                }>\r\n                {ArrayList.map((component, ind) => (\r\n                    <option value={ind}>\r\n                        {component[idText]}打席目：{component.inning % 10 === 1 && urlSchoolName}{component.inning % 10 === 2 && urlSchoolName2}\r\n                    </option>\r\n                ))\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\n//打席編集\r\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected,\r\n    setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n    setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2) => {\r\n\r\n    console.log(battersBox)\r\n    const touchedCoordinate = battersBox.touched_coordinate.split(\"_\")\r\n\r\n    let teamABatter = 0;\r\n    let teamBpitcher = 0;\r\n    let teamBBatter = 0;\r\n    let teamApitcher = 0;\r\n\r\n    const value = battersBox.inning\r\n    for (let i = nowSelected; i >= 0; i--) {\r\n        if (value !== battersBoxAll[i].inning) {\r\n            teamBBatter = battersBoxAll[i].player_id\r\n            teamApitcher = battersBoxAll[i].pitcher_id\r\n            break\r\n        }\r\n    }\r\n\r\n    setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1])\r\n    setNowOutCountState(battersBox.outcount)\r\n    setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base === 0, battersBox.base === 1])\r\n    setFreeWriteState(battersBox.text_inf)\r\n    setcanvasX1(touchedCoordinate[0])\r\n    setcanvasY1(touchedCoordinate[1])\r\n    setAddScoreState(battersBox.score)\r\n    if (battersBox.inning % 10 === 1) {\r\n        setNowPlayingMember(\r\n            [{\r\n                batter: battingOrder.findIndex((u) => u.player_id === battersBox.player_id),\r\n                pitcher: battingOrder2.findIndex((u) => u.player_id === battersBox.pitcher_id)\r\n            },\r\n            {\r\n                batter: teamBBatter,\r\n                pitcher: teamApitcher\r\n            }])\r\n    }\r\n    else if (battersBox.inning % 10 === 2) {\r\n        setNowPlayingMember(\r\n            [{\r\n                batter: teamABatter,\r\n                pitcher: teamBpitcher\r\n            },\r\n            {\r\n                batter: battingOrder2.findIndex((u) => u.player_id === battersBox.player_id),\r\n                pitcher: battingOrder.findIndex((u) => u.player_id === battersBox.pitcher_id)\r\n            }])\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//試合中の試合の情報を登録する\r\nconst DuringGameRegister = () => {\r\n    \r\n}\r\n\r\n\r\n//一時打席情報登録用のテーブル作成\r\nconst TmpTableCreate = async (urlGameId) => {\r\n\r\n    await fetch(backendUrl + \"/daseki/tmp_table_create\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//テーブル存在確認\r\nconst TmpTableCheck = (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState,\r\n    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n\r\n) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_check\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n\r\n            //テーブルが存在しないとき\r\n            if (data === \"not exist\") {\r\n                setIsExistTmpTable(false)\r\n            }\r\n\r\n            //テーブルが存在するとき\r\n            else if (data === \"exist\") {\r\n                console.log(data)\r\n                setIsExistTmpTable(true)\r\n                TmpDasekiCall(urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n                    setNowIningState, setScoreState, setNowOutCountState,\r\n                    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n                )\r\n            }\r\n        })\r\n}\r\n\r\n////試合情報受け取り（速報用）\r\nconst TmpDasekiCall = (urlGameId, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState,\r\n    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n            setDasekiAll(data)\r\n\r\n            //空っぽなら無視\r\n            if (data.length !== 0) {\r\n                let latestDasaki = data[data.length - 1]\r\n\r\n                if (latestDasaki.outcount === 3) {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(0)\r\n\r\n                    //イニング取得\r\n                    if (latestDasaki.inning % 10 === 1) {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1])\r\n                    }\r\n                    else {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10), 0])\r\n                    }\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([false, false, false])\r\n\r\n                }\r\n\r\n                else {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(latestDasaki.outcount)\r\n\r\n                    //イニング取得\r\n                    setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1])\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"])\r\n\r\n\r\n                }\r\n\r\n\r\n                //スコア取得\r\n                //スコアの初期化\r\n                const InitialScore = [\r\n                    [null, null, null, null, null, null, null, null, null, null, null, null],\r\n                    [null, null, null, null, null, null, null, null, null, null, null, null]\r\n                ]\r\n\r\n                let sendScore = InitialScore\r\n                data.map((u) => {\r\n                    //null対策\r\n                    if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0\r\n                    //受け取ったスコアを配列に格納\r\n                    sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score\r\n                })\r\n                setScoreState(sendScore)\r\n\r\n\r\n\r\n                //今現在のプレイヤー取得\r\n                fetch(backendUrl + \"/member/starting_member_call\", {\r\n                    method: \"POST\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n                })\r\n                    .then((response) => response.json())\r\n                    .then((TeamAdata) => {\r\n\r\n                        TeamAdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                        console.log(TeamAdata)\r\n                        setBattingOrder(TeamAdata)\r\n\r\n                        //打順を持ってくる\r\n                        fetch(backendUrl + \"/member/starting_member_call\", {\r\n                            method: \"POST\",\r\n                            mode: \"cors\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n                        })\r\n                            .then((response) => response.json())\r\n                            .then((TeamBdata) => {\r\n\r\n                                TeamBdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                                console.log(TeamBdata)\r\n                                setBattingOrder2(TeamBdata)\r\n\r\n                                let teamABatter = 0\r\n                                let teamApitcher = 0\r\n                                let teamBBatter = 0\r\n                                let teamBpitcher = 0\r\n\r\n                                //先攻\r\n                                if (latestDasaki.inning % 10 - 1 === 0) {\r\n                                    teamABatter = TeamAdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamBpitcher = TeamBdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            teamBBatter = TeamBdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamApitcher = TeamAdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    if (data[data.length - 1].outcount !== 3) teamABatter++\r\n                                    else teamBBatter++\r\n                                }\r\n                                //後攻\r\n                                else if (latestDasaki.inning % 10 - 1 === 1) {\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            console.log(data[i])\r\n                                            teamABatter = TeamAdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamBpitcher = TeamBdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    teamBBatter = TeamBdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamApitcher = TeamAdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    if (data[data.length - 1].outcount !== 3) teamBBatter++\r\n                                    else teamABatter++\r\n                                }\r\n\r\n                                //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\r\n                                if (teamABatter === 9 || teamABatter === -1) teamABatter = 0\r\n                                if (teamBpitcher === -1) teamBpitcher = 0\r\n                                if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0\r\n                                if (teamApitcher === -1) teamApitcher = 0\r\n\r\n                                //最後に今現在プレイ中の選手を格納\r\n                                setNowPlayingMember(\r\n                                    [{\r\n                                        batter: teamABatter,\r\n                                        pitcher: teamBpitcher\r\n                                    },\r\n                                    {\r\n                                        batter: teamBBatter,\r\n                                        pitcher: teamApitcher\r\n                                    }]\r\n                                )\r\n                            })\r\n                    })\r\n            }\r\n        })\r\n}\r\n\r\n//一時打席情報を本打席テーブルに送る\r\nconst TableRegister = (urlGameId) => {\r\n\r\n    console.log(urlGameId + \"の試合情報を登録しました\")\r\n\r\n    fetch(backendUrl + \"/daseki/data_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//一時打席情報を削除\r\nconst TmpTableDelete = (urlGameId) => {\r\n\r\n    console.log(urlGameId + \"の試合情報を削除しました\")\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_delete\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//打率計算\r\nconst CalculateBatAvg = (urlGameId) => {\r\n\r\n    console.log(\"打率計算関数を呼び出しました\")\r\n\r\n    fetch(backendUrl + \"/member/cal_BA\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\r\nconst DasekiRegister = (sendInfo) => {\r\n\r\n    fetch(backendUrl + \"/daseki/daseki_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n}\r\n\r\n\r\n//選手登録された選手読み込む\r\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\r\n\r\n    fetch(backendUrl + \"/member/tournament_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => { setRegisteredMember(data) })\r\n}\r\n\r\n\r\n//修正内容をバックエンドに送る\r\nconst sendEdit = (\r\n    urlGameId,\r\n    dasekiAll,\r\n    nowSelected,\r\n    nowIningState,\r\n    addScoreState,\r\n    scoreState,\r\n    nowOutCountState,\r\n    nowPlayingMember,\r\n    battingOrder,\r\n    battingOrder2,\r\n    runnerCountState,\r\n    freeWriteState,\r\n    canvasX1,\r\n    canvasY1,\r\n    flag,\r\n    batterResult,\r\n    isPinch,\r\n) => {\r\n    console.log(dasekiAll[nowSelected])\r\n    //DBに送るための準備\r\n\r\n    let totalScore = 0\r\n    scoreState[nowIningState[1]].map((score) => {\r\n        totalScore = totalScore + score\r\n    })\r\n    let runnerCount = \"\"\r\n    runnerCountState.map((runner) => {\r\n        if (runner === true) runnerCount = \"1\" + runnerCount\r\n        else if (runner === false) runnerCount = \"0\" + runnerCount\r\n    })\r\n    let isHit = 0; let isFourball = 0; let isDeadball = 0;\r\n    if (batterResult === 0) { }\r\n    else if (batterResult === 1) isHit = 1\r\n    else if (batterResult === 2) isFourball = 1\r\n    else if (batterResult === 3) isDeadball = 1\r\n\r\n    //DBにデータを送る\r\n    let sendInfo = {\r\n        table_name: urlGameId,\r\n        at_bat_id: dasekiAll[nowSelected].at_bat_id,\r\n        inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\r\n        game_id: urlGameId,\r\n        school_id: dasekiAll[nowSelected].school_id,\r\n        player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\r\n        pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\r\n        score: addScoreState,\r\n        total_score: totalScore,\r\n        outcount: nowOutCountState,\r\n        base: runnerCount,\r\n        text_inf: freeWriteState,\r\n        pass: 0,\r\n        touched_coordinate: canvasX1 + \"_\" + canvasY1,\r\n        ball_kind: flag,\r\n        hit: isHit,\r\n        foreball: isFourball,\r\n        deadball: isDeadball,\r\n        pinch: isPinch\r\n    }\r\n\r\n\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n\r\n    console.log(sendInfo)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst canvasSize = 1000;\r\nconst homebase = 400;\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    //ページ遷移用\r\n    const navigate = useNavigate()\r\n    const PageTransition = (url) => {\r\n        navigate(url)\r\n    }\r\n\r\n    //urlから値を読み出す\r\n    const [searchParams] = useSearchParams();\r\n    const urlTournamentId = searchParams.get(\"urlTournamentId\")\r\n    const urlTournamentName = searchParams.get(\"urlTournamentName\")\r\n    const urlSchoolId = searchParams.get(\"urlSchoolId\")\r\n    const urlSchoolName = searchParams.get(\"urlSchoolName\")\r\n    const urlSchoolId2 = searchParams.get(\"urlSchoolId2\")\r\n    const urlSchoolName2 = searchParams.get(\"urlSchoolName2\")\r\n    const urlGameId = searchParams.get(\"urlGameId\")\r\n\r\n    //試合の一時テーブルが存在するかどうかを管理するステイト\r\n    const [isExistTmpTable, setIsExistTmpTable] = useState(false)\r\n\r\n    //Score記録 左が裏表、右が回数 イニングとは逆\r\n    const { Score } = require(\"../../../../DB/Score\")\r\n    const [scoreState, setScoreState] = useState(Score)\r\n\r\n    //Scoreの加算値の監視\r\n    const [addScoreState, setAddScoreState] = useState(0)\r\n\r\n    //今のイニング 左が回、右が表裏\r\n    const [nowIningState, setNowIningState] = useState([0, 0])\r\n\r\n    //自由記述内容を監視\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n\r\n    //自由記述編集モードのフラグ\r\n    const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false)\r\n\r\n    //多分打球の種類だと思われる\r\n    const [flag, setFlag] = useState(2);\r\n\r\n    //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\r\n    const [batterResult, setBatterResult] = useState(0)\r\n\r\n\r\n    //緑プルダウン用\r\n    const [nowPosition, setNowPosition] = useState(15)\r\n\r\n    //アウトカウント\r\n    const [nowOutCountState, setNowOutCountState] = useState(0)\r\n\r\n    //ランナーカウント\r\n    const [runnerCountState, setRunnerCountState] = useState([false, false, false])\r\n\r\n    //選手登録情報を読み込む\r\n    const [registeredMember1, setRegisteredMember1] = useState([])\r\n    const [registeredMember2, setRegisteredMember2] = useState([])\r\n\r\n    //打席一覧情報のステイト\r\n    const [dasekiAll, setDasekiAll] = useState([{\r\n        at_bat_id: 1, ball_kind: \"2\", base: \"000\",\r\n        deadball: 0, foreball: 0, game_id: 1,\r\n        hit: 0, inning: 11, outcount: 3,\r\n        pass: 0, pinch: \"0\", pitcher_id: 21, player_id: 7,\r\n        school_id: 1, score: 0, text_inf: \"アウト:ピッチャーフライ\",\r\n        total_score: 0, touched_coordinate: \"400_450\"\r\n    }])\r\n\r\n    //打席一覧情報のプルダウンの選択状況を管理するステイト\r\n    const [nowSelected, setNowSelected] = useState([])\r\n\r\n    //打順と打者のリスト\r\n    const [battingOrder, setBattingOrder] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n    const [battingOrder2, setBattingOrder2] = useState([{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }])\r\n\r\n    //今の打順と今のピッチャーが誰なのかを2チーム文記録する\r\n    const [nowPlayingMember, setNowPlayingMember] = useState([{ batter: 0, pitcher: 0 }, { batter: 0, pitcher: 0 }])\r\n\r\n    //代打フラグ 0なら代打でない 1なら代打\r\n    const [isPinch, setIsPinch] = useState(0)\r\n\r\n    //編集モードであるかどうかを監視するステイト\r\n    const [isEditMode, setIsEditMode] = useState(false)\r\n\r\n\r\n    //画面解像度取得\r\n    var sw = document.documentElement.clientWidth; // 画面の横幅\r\n    var sh = document.documentElement.clientHeight; // 画面の高さ\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n    //一つのStateで管理しようぜ的な試み\r\n    //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n\r\n    const homebase = 520;\r\n    const h = 70;\r\n    const l = -110;\r\n    const w = 0.03 * homebase;  //ベースの幅\r\n    const margin = 10;    //ベース位置調整用\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n\r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            Ground(context);\r\n        }\r\n    }, [context])\r\n\r\n\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n\r\n            //削除\r\n            context.clearRect(0, 0, canvasSize, canvasSize);\r\n\r\n            Ground(context);\r\n\r\n            //ベースの色\r\n            let baseColor2 = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                if (runnerCountState[i]) {\r\n                    baseColor2[i] = \"blue\";\r\n                    console.log(baseColor2[i]);\r\n                }\r\n                else {\r\n                    baseColor2[i] = \"white\";\r\n                }\r\n            }\r\n\r\n\r\n            context.strokeStyle = \"black\";\r\n\r\n            //３塁ベース\r\n            context.fillStyle = baseColor2[0];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 3 / 4 + l, homebase * 3 / 4 - margin + h);\r\n            context.lineTo(homebase * 3 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.lineTo(homebase * 3 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\r\n            context.lineTo(homebase * 3 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.lineWidth = 1;\r\n            context.stroke();\r\n\r\n            //2塁ベース\r\n            context.fillStyle = baseColor2[1];\r\n            context.beginPath();\r\n            context.moveTo(homebase + l, homebase / 2 - margin + h);\r\n            context.lineTo(homebase - w + l, homebase / 2 + w - margin + h);\r\n            context.lineTo(homebase + l, homebase / 2 + w * 2 - margin + h);\r\n            context.lineTo(homebase + w + l, homebase / 2 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            //1塁ベース\r\n            context.fillStyle = baseColor2[2];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 5 / 4 + l, homebase * 3 / 4 - margin + h);\r\n            context.lineTo(homebase * 5 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.lineTo(homebase * 5 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\r\n            context.lineTo(homebase * 5 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            battedBall(context, canvasX1, canvasY1, flag);\r\n\r\n        }\r\n    }, [canvasX1, canvasY1, flag, runnerCountState])\r\n\r\n    useEffect(() => {\r\n        //データベースからデータをもらうために呼び出す\r\n        // setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\r\n\r\n        //チーム1の選手登録情報を読み出す\r\n        loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId)\r\n\r\n        //チーム2の選手登録情報を読み出す\r\n        loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2)\r\n\r\n        //テーブル存在確認\r\n        TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n            setNowIningState, setScoreState, setNowOutCountState,\r\n            setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n        )\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <TitleBar\r\n                TitleText={\"速報入力画面\"}\r\n                PageTransition={PageTransition}\r\n                valueUrl={-1}\r\n            />\r\n\r\n            <OptionButton />\r\n\r\n            {!isExistTmpTable &&\r\n                <div>\r\n                    <button\r\n                        style={{ height: 100 + \"px\", width: 30 + \"%\", fontSize: 30 + \"px\" }}\r\n                        onClick={async () => {\r\n                            await TmpTableCreate(urlGameId)\r\n                            await TmpTableCreate(urlGameId)\r\n                            await TmpTableCheck\r\n                                (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n                                    setNowIningState, setScoreState, setNowOutCountState,\r\n                                    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n                                )\r\n                        }}\r\n                    >試合を開始する\r\n                    </button>\r\n                </div>\r\n            }\r\n\r\n\r\n\r\n            <div className=\"parts\">\r\n\r\n\r\n                {isExistTmpTable &&\r\n                    <>\r\n                        <div className=\"scoreBoard\">\r\n                            {scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)}\r\n                        </div>\r\n                        <div className=\"optionButtons\">\r\n                        </div>\r\n                        <div className=\"outCountsAndRunnerCounts\">\r\n                            <div className='outCount'>\r\n                                <div className=\"outCountDisplay\">o</div>\r\n                                {outCount(nowOutCountState, setNowOutCountState)}\r\n                            </div>\r\n                            ３塁：２塁：１塁{runnerCount(runnerCountState, setRunnerCountState)}\r\n                        </div>\r\n                        <div className=\"BatterAndPitcher\">\r\n\r\n                        </div>\r\n                        <div className=\"BatterPitcher\">\r\n                            {/* プルダウン1  選手を表示するためのプルダウン */}\r\n                            <PullDownMember\r\n                                battingOrder={battingOrder}\r\n                                battingOrder2={battingOrder2}\r\n                                setBattingOrder={setBattingOrder}\r\n                                registeredMember1={registeredMember1}\r\n                                registeredMember2={registeredMember2}\r\n                                nowIningState={nowIningState}\r\n                                nowPlayingMember={nowPlayingMember}\r\n                                setNowPlayingMember={setNowPlayingMember}\r\n                                setIsPinch={setIsPinch}\r\n                            />\r\n                        </div>\r\n                        <div className=\"freeWrite\">\r\n                            {freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)}\r\n                        </div>\r\n\r\n                        {/* プルダウン2 */}\r\n                        <PullDown\r\n                            nowPosition={nowPosition}\r\n                            setNowPosition={setNowPosition}\r\n                            setcanvasX1={setcanvasX1}\r\n                            setcanvasY1={setcanvasY1}\r\n                            setFlag={setFlag}\r\n                            setFreeWriteState={setFreeWriteState}\r\n                            setBatterResult={setBatterResult}\r\n                            addScoreState={addScoreState}\r\n                            GameEndPopup_field={GameEndPopup}\r\n                            TableRegister={TableRegister}\r\n                            urlGameId={urlGameId}\r\n                            TmpTableDelete={TmpTableDelete}\r\n                            CalculateBatAvg={CalculateBatAvg}\r\n                        />\r\n                    </>}\r\n\r\n                {/* キャンバスについて */}\r\n                <div className=\"diamond\">\r\n                    <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n                </div>\r\n\r\n                <div className=\"Buttons\">\r\n                    <div className=\"baseballButtons\">\r\n                        {BaseballButton(addScoreState, setAddScoreState)}\r\n                    </div>\r\n                    <div className=\"updateButton\">\r\n                        {/* ポップアップ*/}\r\n                        <Popupfield\r\n                            nowIningState={nowIningState} //今が何回なのか\r\n                            setNowIningState={setNowIningState} //今が何回なのかの変更関数\r\n                            addScoreState={addScoreState}\r\n                            setAddScoreState={setAddScoreState}\r\n                            scoreState={scoreState}\r\n                            setScoreState={setScoreState}\r\n                            nowOutCountState={nowOutCountState}\r\n                            setNowOutCountState={setNowOutCountState}\r\n                            DasekiRegister={DasekiRegister}\r\n                            urlGameId={urlGameId}\r\n                            urlSchoolId={urlSchoolId}\r\n                            urlSchoolId2={urlSchoolId2}\r\n                            nowPlayingMember={nowPlayingMember}\r\n                            setNowPlayingMember={setNowPlayingMember}\r\n                            battingOrder={battingOrder}\r\n                            battingOrder2={battingOrder2}\r\n                            runnerCountState={runnerCountState}\r\n                            freeWriteState={freeWriteState}\r\n                            setFreeWriteState={setFreeWriteState}\r\n                            canvasX1={canvasX1}\r\n                            setcanvasX1={setcanvasX1}\r\n                            canvasY1={canvasY1}\r\n                            setcanvasY1={setcanvasY1}\r\n                            flag={flag}\r\n                            batterResult={batterResult}\r\n                            setBatterResult={setBatterResult}\r\n                            isPinch={isPinch}\r\n                            setIsPinch={setIsPinch}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2)}\r\n                <button onClick={() => {\r\n                    setIsEditMode(!isEditMode);\r\n                    editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected,\r\n                        setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n                        setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, battingOrder, battingOrder2\r\n                    )\r\n                }}>修正打席選択</button>\r\n                {<button\r\n                    onClick={() =>\r\n                        sendEdit(\r\n                            urlGameId,\r\n                            dasekiAll,\r\n                            nowSelected,\r\n                            nowIningState,\r\n                            addScoreState,\r\n                            scoreState,\r\n                            nowOutCountState,\r\n                            nowPlayingMember,\r\n                            battingOrder,\r\n                            battingOrder2,\r\n                            runnerCountState,\r\n                            freeWriteState,\r\n                            canvasX1,\r\n                            canvasY1,\r\n                            flag,\r\n                            batterResult,\r\n                            isPinch,\r\n                        )}\r\n                >修正確定</button>}\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morim\\\\Desktop\\\\my_folder\\\\school\\\\lesson\\\\ensyu\\\\code\\\\team-b-project\\\\frontend\\\\src\\\\AllPage\\\\InputAll\\\\Sokuho\\\\SokuhoPlaygame\\\\InputPlayGame.jsx\",\n  _s = $RefreshSig$();\nimport { scoreBoard } from './comSokuho/scoreBoard';\nimport { outCount } from './comSokuho/outCount';\nimport { runnerCount } from './comSokuho/runnerCount';\nimport { freeWrite } from './comSokuho/freeWrite';\nimport { BaseballButton } from './comSokuho/baseballButton';\nimport \"./comSokuho/CSS/scoreBoard.css\";\nimport { useEffect, useState } from 'react';\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\";\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\";\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\n\n//css\nimport \"./InputPlayGame.css\";\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\n\n//プルダウン\nimport { PullDown } from './comSokuho/PullDown/PullDown';\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\n\n//canvasの描画\nimport { Ground } from './comSokuho/comCanvas/Ground';\nimport { battedBall } from './comSokuho/comCanvas/battedBall';\n\n//バックエンドのurlを取得\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\n\n//自作プルダウン　改造あり\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2, dasekiAll, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag, battingOrder, battingOrder2) => {\n  //pulldownIdは0でいいです。\n  //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\n  //idテキストは連想配列の属性を書きます。\n  //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\n  //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tekitouni\",\n      onChange: e => {\n        //ステイトが変化すると再描画させるための文、これがないと再描画されない\n        //なお、消すと再描画はされないが内部は変化する\n        nowSelected = nowSelected.slice(0, nowSelected.length);\n        nowSelected[pulldownId] = e.target.value;\n        setNowSelected(nowSelected);\n        editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag, battingOrder, battingOrder2);\n      },\n      children: ArrayList.map((component, ind) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ind,\n        children: [component[idText], \"\\u6253\\u5E2D\\u76EE\\uFF1A\", component.inning % 10 === 1 && urlSchoolName, component.inning % 10 === 2 && urlSchoolName2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n//打席編集\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag, battingOrder, battingOrder2, registeredMember1, registeredMember2) => {\n  console.log(battersBox);\n  let touchedCoordinate = battersBox.touched_coordinate.split(\"_\");\n  touchedCoordinate = touchedCoordinate.slice(0, touchedCoordinate.length);\n  let teamABatter = 0;\n  let teamBpitcher = 0;\n  let teamBBatter = 0;\n  let teamApitcher = 0;\n  const value = battersBox.inning;\n  for (let i = nowSelected; i >= 0; i--) {\n    if (value !== battersBoxAll[i].inning) {\n      teamBBatter = battersBoxAll[i].player_id;\n      teamApitcher = battersBoxAll[i].pitcher_id;\n      break;\n    }\n  }\n  console.log(battersBox.ball_kind);\n  battersBoxAll.map(v => {\n    let playerId = [];\n    if (v.pinch !== \"\" && v.pinch !== \"0\" && v.pinch !== null && v.pinch !== undefined) {\n      if (v.pinch.length > 3) {\n        playerId = v.pinch.slice(\"→\");\n        if (v.inning % 10 - 1 === 0) {\n          battingOrder.map(u => {\n            if (u.player_id === playerId[0]) {\n              if (registeredMember1.some(w => w.player_id === playerId[1])) {}\n            }\n          });\n        } else if (v.inning % 10 - 1 === 1) {}\n      } else {\n        battersBoxAll[nowSelected].pinch = \"\";\n      }\n    }\n  });\n\n  //なぜかsetFlagのあるなしで打球がcanvasに描画されるかどうかが変化する\n  setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1]);\n  setNowOutCountState(battersBox.outcount);\n  setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base / 100 < 1, battersBox.base % 10 === 1]);\n  setFreeWriteState(battersBox.text_inf);\n  setFlag(battersBox.ball_kind);\n  setcanvasX1(touchedCoordinate[0]);\n  setcanvasY1(touchedCoordinate[1]);\n  setAddScoreState(battersBox.score);\n  if (battersBox.inning % 10 === 1) {\n    setNowPlayingMember([{\n      batter: battingOrder.findIndex(u => u.player_id === battersBox.player_id),\n      pitcher: battingOrder2.findIndex(u => u.player_id === battersBox.pitcher_id)\n    }, {\n      batter: teamBBatter,\n      pitcher: teamApitcher\n    }]);\n  } else if (battersBox.inning % 10 === 2) {\n    setNowPlayingMember([{\n      batter: teamABatter,\n      pitcher: teamBpitcher\n    }, {\n      batter: battingOrder2.findIndex(u => u.player_id === battersBox.player_id),\n      pitcher: battingOrder.findIndex(u => u.player_id === battersBox.pitcher_id)\n    }]);\n  }\n};\n\n//試合中の試合の情報を登録する\nconst RegisterDuringGame = async urlGameId => {\n  await fetch(backendUrl + \"/game/during_game_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      tmp_table_name: String(urlGameId)\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//試合中の試合の情報を削除する\n_c = RegisterDuringGame;\nconst DeleteDuringGame = async urlGameId => {\n  await fetch(backendUrl + \"/game/during_game_delete\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//試合中の試合の情報を参照する\n_c2 = DeleteDuringGame;\nconst RefDuringGame = async (urlGameId, setIsDuringGame) => {\n  fetch(backendUrl + \"/game/ref_during_game\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.json()).then(data => {\n    if (data.some(v => String(v.game_id) === urlGameId)) {\n      setIsDuringGame(true);\n    }\n  });\n};\n\n//一時打席情報登録用のテーブル作成\n_c3 = RefDuringGame;\nconst TmpTableCreate = async urlGameId => {\n  await fetch(backendUrl + \"/daseki/tmp_table_create\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//テーブル存在確認\n_c4 = TmpTableCreate;\nconst TmpTableCheck = (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\n  fetch(backendUrl + \"/daseki/tmp_table_check\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    //テーブルが存在しないとき\n    if (data === \"not exist\") {\n      setIsExistTmpTable(false);\n    }\n\n    //テーブルが存在するとき\n    else if (data === \"exist\") {\n      console.log(data);\n      console.log(\"DBからデータを読み出します\");\n      setIsExistTmpTable(true);\n      TmpDasekiCall(urlGameId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2);\n    }\n  });\n};\n\n////試合情報受け取り（速報用）\n_c5 = TmpTableCheck;\nconst TmpDasekiCall = (urlGameId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\n  //まず打席情報を受け取る\n  fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table_name: urlGameId\n    })\n  }).then(response => response.json()).then(data => {\n    console.log(data);\n    //反転させる\n    data.reverse();\n\n    //代打を反映\n    data.map((daseki, ind) => {\n      // console.log(daseki.pinch)\n    });\n    setDasekiAll(data);\n\n    //空っぽなら無視\n    if (data.length !== 0) {\n      let latestDasaki = data[data.length - 1];\n      if (latestDasaki.outcount === 3) {\n        //アウトカウント取得\n        setNowOutCountState(0);\n\n        //イニング取得\n        if (latestDasaki.inning % 10 === 1) {\n          setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1]);\n        } else {\n          setNowIningState([Math.floor(latestDasaki.inning / 10), 0]);\n        }\n\n        //ランナー取得\n        setRunnerCountState([false, false, false]);\n      } else {\n        //アウトカウント取得\n        setNowOutCountState(latestDasaki.outcount);\n\n        //イニング取得\n        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1]);\n\n        //ランナー取得\n        setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"]);\n      }\n\n      //スコア取得\n      //スコアの初期化\n      const InitialScore = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];\n      let sendScore = InitialScore;\n      data.map(u => {\n        //null対策\n        if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0;\n        //受け取ったスコアを配列に格納\n        sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score;\n      });\n      setScoreState(sendScore);\n\n      //今現在のプレイヤー取得\n      //まずは先行チーム\n      fetch(backendUrl + \"/member/starting_member_call\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          game_id: urlGameId,\n          school_id: urlSchoolId\n        })\n      }).then(response => response.json()).then(TeamAdata => {\n        //後攻チーム\n        //打順を持ってくる\n        fetch(backendUrl + \"/member/starting_member_call\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            game_id: urlGameId,\n            school_id: urlSchoolId2\n          })\n        }).then(response => response.json()).then(TeamBdata => {\n          let text = null;\n          let index = 0;\n          // data.map((v) => {\n          //     if (v.pinch === null || v.pinch === 0) {\n          //         text = v.pinch.split(\"→\")\n\n          //         if (v.inning % 10 - 1 === 0) {\n          //             index = TeamAdata.findIndex((u) => u.player_id === text[0])\n          //         }\n          //         else {\n\n          //         }\n          //     }\n          //     console.log(v)\n          // })\n\n          console.log(TeamAdata);\n          TeamAdata.sort((a, b) => a.batting_order - b.batting_order);\n          setBattingOrder(TeamAdata);\n          TeamBdata.sort((a, b) => a.batting_order - b.batting_order);\n          setBattingOrder2(TeamBdata);\n          let teamABatter = 0;\n          let teamApitcher = 0;\n          let teamBBatter = 0;\n          let teamBpitcher = 0;\n\n          //さっきの打席が先攻チームだった場合\n          if (latestDasaki.inning % 10 - 1 === 0) {\n            teamABatter = TeamAdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamBpitcher = TeamBdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                teamBBatter = TeamBdata.findIndex(u => u.player_id === data[i].player_id);\n                teamApitcher = TeamAdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            if (latestDasaki.outcount !== 3) teamABatter++;\n            //過去に後攻の打席がある場合\n            else if (data.some(v => v.inning % 10 - 1 === 1)) teamBBatter++;\n          }\n\n          //後攻\n          else if (latestDasaki.inning % 10 - 1 === 1) {\n            for (let i = data.length - 1; i >= 0; i--) {\n              if (latestDasaki.inning !== data[i].inning) {\n                console.log(data[i]);\n                teamABatter = TeamAdata.findIndex(u => u.player_id === data[i].player_id);\n                teamBpitcher = TeamBdata.findIndex(u => u.player_id === data[i].pitcher_id);\n                break;\n              }\n            }\n            teamBBatter = TeamBdata.findIndex(u => u.player_id === latestDasaki.player_id);\n            teamApitcher = TeamAdata.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n            if (data[data.length - 1].outcount !== 3) teamBBatter++;else teamABatter++;\n          }\n\n          //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\n          if (teamABatter === 9 || teamABatter === -1) teamABatter = 0;\n          if (teamBpitcher === -1) teamBpitcher = 0;\n          if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0;\n          if (teamApitcher === -1) teamApitcher = 0;\n\n          //最後に今現在プレイ中の選手を格納\n          setNowPlayingMember([{\n            batter: teamABatter,\n            pitcher: teamBpitcher\n          }, {\n            batter: teamBBatter,\n            pitcher: teamApitcher\n          }]);\n        });\n      });\n    }\n\n    //打席情報に何も入ってないとき\n    if (data.length === 0) {\n      //最初のプレイヤー取得\n      //まずは先行チーム\n      fetch(backendUrl + \"/member/starting_member_call\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          game_id: urlGameId,\n          school_id: urlSchoolId\n        })\n      }).then(response => response.json()).then(TeamAdata => {\n        TeamAdata.sort((a, b) => a.batting_order - b.batting_order);\n        setBattingOrder(TeamAdata);\n\n        //後攻チーム\n        //打順を持ってくる\n        fetch(backendUrl + \"/member/starting_member_call\", {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            game_id: urlGameId,\n            school_id: urlSchoolId2\n          })\n        }).then(response => response.json()).then(TeamBdata => {\n          TeamBdata.sort((a, b) => a.batting_order - b.batting_order);\n          setBattingOrder2(TeamBdata);\n          let teamABatter = 0;\n          let teamBpitcher = TeamBdata.findIndex(v => v.position === \"ピッチャー\");\n          let teamBBatter = 0;\n          let teamApitcher = TeamAdata.findIndex(v => v.position === \"ピッチャー\");\n\n          //最後に今現在プレイ中の選手を格納\n          setNowPlayingMember([{\n            batter: teamABatter,\n            pitcher: teamBpitcher\n          }, {\n            batter: teamBBatter,\n            pitcher: teamApitcher\n          }]);\n        });\n      });\n    }\n  });\n};\n\n//DBを介さない試合情報受け取り（速報用）\n_c6 = TmpDasekiCall;\nconst loardNowDaseki = (setNowOutCountState, setNowIningState, setRunnerCountState, setScoreState, setNowPlayingMember, setFreeWriteState, dasekiAll, battingOrder, battingOrder2) => {\n  //空っぽなら無視\n  if (dasekiAll.length !== 0) {\n    let latestDasaki = dasekiAll[dasekiAll.length - 1];\n\n    //自由記述は空\n    setFreeWriteState(\"\");\n    if (latestDasaki.outcount === 3) {\n      //アウトカウント取得\n      setNowOutCountState(0);\n\n      //イニング取得\n      if (latestDasaki.inning % 10 === 1) {\n        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1]);\n      } else {\n        setNowIningState([Math.floor(latestDasaki.inning / 10), 0]);\n      }\n\n      //ランナー取得\n      setRunnerCountState([false, false, false]);\n    } else {\n      //アウトカウント取得\n      setNowOutCountState(latestDasaki.outcount);\n\n      //イニング取得\n      setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1]);\n\n      //ランナー取得\n      setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"]);\n    }\n\n    //スコア取得\n    //スコアの初期化\n    const InitialScore = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];\n    let sendScore = InitialScore;\n    dasekiAll.map(u => {\n      //null対策\n      if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0;\n      //受け取ったスコアを配列に格納\n      sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score;\n    });\n    setScoreState(sendScore);\n\n    //今現在のプレイヤー取得\n    //まずは先行チーム\n    //後攻チーム\n    let teamABatter = 0;\n    let teamApitcher = 0;\n    let teamBBatter = 0;\n    let teamBpitcher = 0;\n\n    //先攻\n    if (latestDasaki.inning % 10 - 1 === 0) {\n      teamABatter = battingOrder.findIndex(u => u.player_id === latestDasaki.player_id);\n      teamBpitcher = battingOrder2.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n      for (let i = dasekiAll.length - 1; i >= 0; i--) {\n        if (latestDasaki.inning !== dasekiAll[i].inning) {\n          teamBBatter = battingOrder2.findIndex(u => u.player_id === dasekiAll[i].player_id);\n          teamApitcher = battingOrder.findIndex(u => u.player_id === dasekiAll[i].pitcher_id);\n          break;\n        }\n      }\n      if (dasekiAll[dasekiAll.length - 1].outcount !== 3) teamABatter++;else teamBBatter++;\n    }\n    //後攻\n    else if (latestDasaki.inning % 10 - 1 === 1) {\n      for (let i = dasekiAll.length - 1; i >= 0; i--) {\n        if (latestDasaki.inning !== dasekiAll[i].inning) {\n          console.log(dasekiAll[i]);\n          teamABatter = battingOrder.findIndex(u => u.player_id === dasekiAll[i].player_id);\n          teamBpitcher = battingOrder2.findIndex(u => u.player_id === dasekiAll[i].pitcher_id);\n          break;\n        }\n      }\n      teamBBatter = battingOrder2.findIndex(u => u.player_id === latestDasaki.player_id);\n      teamApitcher = battingOrder.findIndex(u => u.player_id === latestDasaki.pitcher_id);\n      if (dasekiAll[dasekiAll.length - 1].outcount !== 3) teamBBatter++;else teamABatter++;\n    }\n\n    //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\n    if (teamABatter === 9 || teamABatter === -1) teamABatter = 0;\n    if (teamBpitcher === -1) teamBpitcher = 0;\n    if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0;\n    if (teamApitcher === -1) teamApitcher = 0;\n\n    //最後に今現在プレイ中の選手を格納\n    setNowPlayingMember([{\n      batter: teamABatter,\n      pitcher: teamBpitcher\n    }, {\n      batter: teamBBatter,\n      pitcher: teamApitcher\n    }]);\n  }\n};\n\n//一時打席情報を本打席テーブルに送る\nconst TableRegister = urlGameId => {\n  console.log(urlGameId + \"の試合情報を登録しました\");\n  fetch(backendUrl + \"/daseki/data_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//一時打席情報を削除\n_c7 = TableRegister;\nconst TmpTableDelete = urlGameId => {\n  console.log(urlGameId + \"の試合情報を削除しました\");\n  fetch(backendUrl + \"/daseki/tmp_table_delete\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//打率計算\n_c8 = TmpTableDelete;\nconst CalculateBatAvg = urlGameId => {\n  console.log(\"打率計算関数を呼び出しました\");\n  fetch(backendUrl + \"/member/cal_BA\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      game_id: urlGameId,\n      table_name: urlGameId\n    })\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n};\n\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\n_c9 = CalculateBatAvg;\nconst DasekiRegister = (sendInfo, trigger, setTrigger) => {\n  fetch(backendUrl + \"/daseki/daseki_register\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    if (data === \"OK\") {\n      setTrigger(!trigger);\n    }\n  });\n};\n\n//選手登録された選手読み込む\n_c10 = DasekiRegister;\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\n  fetch(backendUrl + \"/member/tournament_member_call\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      tournament_id: urlTournamentId,\n      school_id: urlSchoolId\n    })\n  }).then(response => response.json()).then(data => {\n    setRegisteredMember(data);\n  });\n};\n\n//修正内容をバックエンドに送る\nconst sendEdit = (urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch) => {\n  console.log(dasekiAll[nowSelected]);\n  //DBに送るための準備\n\n  let totalScore = 0;\n  scoreState[nowIningState[1]].map(score => {\n    totalScore = totalScore + score;\n  });\n  let runnerCount = \"\";\n  runnerCountState.map(runner => {\n    if (runner === true) runnerCount = \"1\" + runnerCount;else if (runner === false) runnerCount = \"0\" + runnerCount;\n  });\n  let isHit = 0;\n  let isFourball = 0;\n  let isDeadball = 0;\n  if (batterResult === 0) {} else if (batterResult === 1) isHit = 1;else if (batterResult === 2) isFourball = 1;else if (batterResult === 3) isDeadball = 1;\n\n  //DBにデータを送る\n  let sendInfo = {\n    table_name: urlGameId,\n    at_bat_id: dasekiAll[nowSelected].at_bat_id,\n    inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\n    game_id: urlGameId,\n    school_id: dasekiAll[nowSelected].school_id,\n    player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\n    pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\n    score: addScoreState,\n    total_score: totalScore,\n    outcount: nowOutCountState,\n    base: runnerCount,\n    text_inf: freeWriteState,\n    pass: 0,\n    touched_coordinate: canvasX1 + \"_\" + canvasY1,\n    ball_kind: flag,\n    hit: isHit,\n    foreball: isFourball,\n    deadball: isDeadball,\n    pinch: isPinch\n  };\n  fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(sendInfo)\n  }).then(response => response.text()).then(data => {\n    console.log(data);\n  });\n  console.log(sendInfo);\n};\nconst canvasSize = 1000;\nconst homebase = 400;\nconst InputPlayGame = () => {\n  _s();\n  //ページ遷移用\n  const navigate = useNavigate();\n  const PageTransition = url => {\n    navigate(url);\n  };\n\n  //urlから値を読み出す\n  const [searchParams] = useSearchParams();\n  const urlTournamentId = searchParams.get(\"urlTournamentId\");\n  const urlTournamentName = searchParams.get(\"urlTournamentName\");\n  const urlSchoolId = searchParams.get(\"urlSchoolId\");\n  const urlSchoolName = searchParams.get(\"urlSchoolName\");\n  const urlSchoolId2 = searchParams.get(\"urlSchoolId2\");\n  const urlSchoolName2 = searchParams.get(\"urlSchoolName2\");\n  const urlGameId = searchParams.get(\"urlGameId\");\n\n  //試合の一時テーブルが存在するかどうかを管理するステイト\n  const [isExistTmpTable, setIsExistTmpTable] = useState(false);\n\n  //試合中かどうかを管理するステイト\n  const [isDuringGame, setIsDuringGame] = useState(false);\n\n  //Score記録 左が裏表、右が回数 イニングとは逆\n  const {\n    Score\n  } = require(\"../../../../DB/Score\");\n  const [scoreState, setScoreState] = useState(Score);\n\n  //Scoreの加算値の監視\n  const [addScoreState, setAddScoreState] = useState(0);\n\n  //今のイニング 左が回、右が表裏\n  const [nowIningState, setNowIningState] = useState([0, 0]);\n\n  //自由記述内容を監視\n  const [freeWriteState, setFreeWriteState] = useState(\"\"); //いらんかも\n\n  //自由記述編集モードのフラグ\n  const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false);\n\n  //多分打球の種類だと思われる\n  const [flag, setFlag] = useState(2);\n\n  //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\n  const [batterResult, setBatterResult] = useState(0);\n\n  //緑プルダウン用\n  const [nowPosition, setNowPosition] = useState(15);\n\n  //アウトカウント\n  const [nowOutCountState, setNowOutCountState] = useState(0);\n\n  //ランナーカウント\n  const [runnerCountState, setRunnerCountState] = useState([false, false, false]);\n\n  //選手登録情報を読み込む\n  const [registeredMember1, setRegisteredMember1] = useState([]);\n  const [registeredMember2, setRegisteredMember2] = useState([]);\n\n  //打席一覧情報のステイト\n  const [dasekiAll, setDasekiAll] = useState([{\n    at_bat_id: 1,\n    ball_kind: \"2\",\n    base: \"000\",\n    deadball: 0,\n    foreball: 0,\n    game_id: 1,\n    hit: 0,\n    inning: 11,\n    outcount: 3,\n    pass: 0,\n    pinch: \"0\",\n    pitcher_id: 21,\n    player_id: 7,\n    school_id: 1,\n    score: 0,\n    text_inf: \"データなし\",\n    total_score: 0,\n    touched_coordinate: \"400_450\"\n  }]);\n\n  //打席一覧情報のプルダウンの選択状況を管理するステイト\n  const [nowSelected, setNowSelected] = useState([0]);\n\n  //打順と打者のリスト\n  const [battingOrder, setBattingOrder] = useState([[{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }], 0]);\n  const [battingOrder2, setBattingOrder2] = useState([{\n    player_name_kanji: '丹羽 長秀'\n  }, {\n    player_name_kanji: '柴田 勝家'\n  }]);\n\n  //今の打順と今のピッチャーが誰なのかを2チーム文記録する\n  const [nowPlayingMember, setNowPlayingMember] = useState([{\n    batter: 0,\n    pitcher: 0\n  }, {\n    batter: 0,\n    pitcher: 0\n  }]);\n\n  //代打フラグ 4→15,12→6\n  const [isPinch, setIsPinch] = useState(null);\n\n  //代打で変更される前の打順を記録するステイト\n  const [latestBatOrder, setLatestBatOrder] = useState({\n    dasekiNum: 0,\n    order: []\n  });\n\n  //データを読み込みを行うトリガー\n  const [trigger, setTrigger] = useState(true);\n\n  //編集モードであるかどうかを監視するステイト\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  //画面解像度取得\n  var sw = document.documentElement.clientWidth; // 画面の横幅\n  var sh = document.documentElement.clientHeight; // 画面の高さ\n\n  // contextを状態として持つ\n  const [context, setContext] = useState(null);\n  const [canvasX1, setcanvasX1] = useState(0);\n  const [canvasY1, setcanvasY1] = useState(0);\n  //一つのStateで管理しようぜ的な試み\n  //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\n\n  // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\n\n  const homebase = 520;\n  const h = 70;\n  const l = -110;\n  const w = 0.03 * homebase; //ベースの幅\n  const margin = 10; //ベース位置調整用\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    setContext(canvasContext);\n    canvas.addEventListener(\"click\", e => {\n      const rect = e.target.getBoundingClientRect();\n\n      // ブラウザ上での座標を求める\n      const viewX = e.clientX - rect.left,\n        viewY = e.clientY - rect.top;\n\n      // 表示サイズとキャンバスの実サイズの比率を求める\n      const scaleWidth = canvas.clientWidth / canvas.width,\n        scaleHeight = canvas.clientHeight / canvas.height;\n\n      // ブラウザ上でのクリック座標をキャンバス上に変換\n      const canvasX = Math.floor(viewX / scaleWidth),\n        canvasY = Math.floor(viewY / scaleHeight);\n      console.log(canvasX, canvasY);\n      setcanvasX1(canvasX);\n      setcanvasY1(canvasY);\n    });\n  }, []);\n  useEffect(() => {\n    if (context !== null) {\n      Ground(context);\n    }\n  }, [context]);\n\n  // 状態にコンテキストが登録されたらそれに対して操作できる\n  useEffect(() => {\n    if (context !== null) {\n      //削除\n      context.clearRect(0, 0, canvasSize, canvasSize);\n      Ground(context);\n\n      //ベースの色\n      let baseColor2 = [];\n      for (let i = 0; i < 3; i++) {\n        if (runnerCountState[i]) {\n          baseColor2[i] = \"blue\";\n          console.log(baseColor2[i]);\n        } else {\n          baseColor2[i] = \"white\";\n        }\n      }\n      context.strokeStyle = \"black\";\n\n      //３塁ベース\n      context.fillStyle = baseColor2[0];\n      context.beginPath();\n      context.moveTo(homebase * 3 / 4 + l, homebase * 3 / 4 - margin + h);\n      context.lineTo(homebase * 3 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\n      context.lineTo(homebase * 3 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\n      context.lineTo(homebase * 3 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.lineWidth = 1;\n      context.stroke();\n\n      //2塁ベース\n      context.fillStyle = baseColor2[1];\n      context.beginPath();\n      context.moveTo(homebase + l, homebase / 2 - margin + h);\n      context.lineTo(homebase - w + l, homebase / 2 + w - margin + h);\n      context.lineTo(homebase + l, homebase / 2 + w * 2 - margin + h);\n      context.lineTo(homebase + w + l, homebase / 2 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      //1塁ベース\n      context.fillStyle = baseColor2[2];\n      context.beginPath();\n      context.moveTo(homebase * 5 / 4 + l, homebase * 3 / 4 - margin + h);\n      context.lineTo(homebase * 5 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\n      context.lineTo(homebase * 5 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\n      context.lineTo(homebase * 5 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      battedBall(context, canvasX1, canvasY1, flag);\n    }\n  }, [canvasX1, canvasY1, flag, runnerCountState]);\n  useEffect(() => {\n    //データベースからデータをもらうために呼び出す\n    // setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\n\n    //チーム1の選手登録情報を読み出す\n    loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId);\n\n    //チーム2の選手登録情報を読み出す\n    loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2);\n    RefDuringGame(urlGameId, setIsDuringGame);\n  }, []);\n  useEffect(() => {\n    //テーブル存在確認\n    TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2);\n  }, [trigger]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputPlayGame\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {\n      TitleText: \"速報入力画面\",\n      PageTransition: PageTransition,\n      valueUrl: -1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 13\n    }, this), (!isExistTmpTable || !isDuringGame) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          height: 100 + \"px\",\n          width: 30 + \"%\",\n          fontSize: 30 + \"px\"\n        },\n        onClick: async () => {\n          await TmpTableCreate(urlGameId);\n          await RegisterDuringGame(urlGameId);\n          await TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2, setNowIningState, setScoreState, setNowOutCountState, setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll);\n        },\n        children: \"\\u8A66\\u5408\\u3092\\u958B\\u59CB\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts\",\n      children: [isExistTmpTable && isDuringGame && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scoreBoard\",\n          children: scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1062,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"optionButtons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outCountsAndRunnerCounts\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"outCount\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"outCountDisplay\",\n              children: \"o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1069,\n              columnNumber: 33\n            }, this), outCount(nowOutCountState, setNowOutCountState)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1068,\n            columnNumber: 29\n          }, this), runnerCount(runnerCountState, setRunnerCountState)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1067,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"BatterAndPitcher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1074,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"BatterPitcher\",\n          children: /*#__PURE__*/_jsxDEV(PullDownMember, {\n            battingOrder: battingOrder,\n            battingOrder2: battingOrder2,\n            setBattingOrder: setBattingOrder,\n            setBattingOrder2: setBattingOrder2,\n            registeredMember1: registeredMember1,\n            registeredMember2: registeredMember2,\n            nowIningState: nowIningState,\n            nowPlayingMember: nowPlayingMember,\n            setNowPlayingMember: setNowPlayingMember,\n            setIsPinch: setIsPinch,\n            latestBatOrder: latestBatOrder,\n            setLatestBatOrder: setLatestBatOrder,\n            dasekiAll: dasekiAll,\n            dasekiNum: dasekiAll.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1079,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"freeWrite\",\n          children: freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PullDown, {\n          nowPosition: nowPosition,\n          setNowPosition: setNowPosition,\n          setcanvasX1: setcanvasX1,\n          setcanvasY1: setcanvasY1,\n          setFlag: setFlag,\n          setFreeWriteState: setFreeWriteState,\n          setBatterResult: setBatterResult,\n          addScoreState: addScoreState,\n          GameEndPopup_field: GameEndPopup,\n          TableRegister: TableRegister,\n          urlGameId: urlGameId,\n          TmpTableDelete: TmpTableDelete,\n          DeleteDuringGame: DeleteDuringGame,\n          CalculateBatAvg: CalculateBatAvg,\n          nowOutCountState: nowOutCountState,\n          setNowOutCountState: setNowOutCountState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diamond\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"800\",\n          height: \"800\",\n          id: \"canvas\",\n          className: \"diamondPng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"baseballButtons\",\n          children: BaseballButton(addScoreState, setAddScoreState)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 21\n        }, this), !isEditMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"updateButton\",\n            children: /*#__PURE__*/_jsxDEV(Popupfield, {\n              nowIningState: nowIningState //今が何回なのか\n              ,\n              setNowIningState: setNowIningState //今が何回なのかの変更関数\n              ,\n              addScoreState: addScoreState,\n              setAddScoreState: setAddScoreState,\n              scoreState: scoreState,\n              setScoreState: setScoreState,\n              nowOutCountState: nowOutCountState,\n              setNowOutCountState: setNowOutCountState,\n              DasekiRegister: DasekiRegister,\n              urlGameId: urlGameId,\n              urlSchoolId: urlSchoolId,\n              urlSchoolId2: urlSchoolId2,\n              nowPlayingMember: nowPlayingMember,\n              setNowPlayingMember: setNowPlayingMember,\n              battingOrder: battingOrder,\n              battingOrder2: battingOrder2,\n              runnerCountState: runnerCountState,\n              freeWriteState: freeWriteState,\n              setFreeWriteState: setFreeWriteState,\n              canvasX1: canvasX1,\n              setcanvasX1: setcanvasX1,\n              canvasY1: canvasY1,\n              setcanvasY1: setcanvasY1,\n              flag: flag,\n              batterResult: batterResult,\n              setBatterResult: setBatterResult,\n              isPinch: isPinch,\n              setIsPinch: setIsPinch,\n              TmpDasekiCall: TmpDasekiCall,\n              trigger: trigger,\n              setTrigger: setTrigger\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1132,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1126,\n        columnNumber: 17\n      }, this), isEditMode && makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2, dasekiAll, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag, battingOrder, battingOrder2), !isEditMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEditMode(true);\n          editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember, setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag, battingOrder, battingOrder2);\n        },\n        children: \"\\u4FEE\\u6B63\\u30E2\\u30FC\\u30C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 21\n      }, this), isEditMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEditMode(false);\n          loardNowDaseki(setNowOutCountState, setNowIningState, setRunnerCountState, setScoreState, setNowPlayingMember, setFreeWriteState, dasekiAll, battingOrder, battingOrder2);\n          setNowSelected([0]);\n        },\n        children: \"\\u901F\\u5831\\u5165\\u529B\\u306B\\u623B\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1195,\n        columnNumber: 21\n      }, this), isEditMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendEdit(urlGameId, dasekiAll, nowSelected, nowIningState, addScoreState, scoreState, nowOutCountState, nowPlayingMember, battingOrder, battingOrder2, runnerCountState, freeWriteState, canvasX1, canvasY1, flag, batterResult, isPinch),\n        children: \"\\u4FEE\\u6B63\\u78BA\\u5B9A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1028,\n    columnNumber: 9\n  }, this);\n};\n_s(InputPlayGame, \"PuOBTQ4GaGQYTebR1imKOEO0hog=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c11 = InputPlayGame;\nexport default InputPlayGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"RegisterDuringGame\");\n$RefreshReg$(_c2, \"DeleteDuringGame\");\n$RefreshReg$(_c3, \"RefDuringGame\");\n$RefreshReg$(_c4, \"TmpTableCreate\");\n$RefreshReg$(_c5, \"TmpTableCheck\");\n$RefreshReg$(_c6, \"TmpDasekiCall\");\n$RefreshReg$(_c7, \"TableRegister\");\n$RefreshReg$(_c8, \"TmpTableDelete\");\n$RefreshReg$(_c9, \"CalculateBatAvg\");\n$RefreshReg$(_c10, \"DasekiRegister\");\n$RefreshReg$(_c11, \"InputPlayGame\");","map":{"version":3,"names":["scoreBoard","outCount","runnerCount","freeWrite","BaseballButton","useEffect","useState","Popupfield","GameEndPopup","EditPoint","OptionButton","TitleBar","PullDown","PullDownMember","useSearchParams","useNavigate","Ground","battedBall","backendUrl","require","makePulldown","pulldownId","ArrayList","idText","nowSelected","setNowSelected","urlSchoolName","urlSchoolName2","dasekiAll","setNowIningState","setNowOutCountState","setRunnerCountState","setNowPlayingMember","setFreeWriteState","setcanvasX1","setcanvasY1","setAddScoreState","setFlag","battingOrder","battingOrder2","e","slice","length","target","value","editBattersBox","map","component","ind","inning","battersBox","battersBoxAll","registeredMember1","registeredMember2","console","log","touchedCoordinate","touched_coordinate","split","teamABatter","teamBpitcher","teamBBatter","teamApitcher","i","player_id","pitcher_id","ball_kind","v","playerId","pinch","undefined","u","some","w","Math","floor","outcount","base","text_inf","score","batter","findIndex","pitcher","RegisterDuringGame","urlGameId","fetch","method","mode","headers","body","JSON","stringify","game_id","tmp_table_name","String","then","response","text","data","DeleteDuringGame","RefDuringGame","setIsDuringGame","json","TmpTableCreate","table_name","TmpTableCheck","setIsExistTmpTable","TmpDasekiCall","urlTournamentId","urlSchoolId","urlSchoolId2","setScoreState","setDasekiAll","setBattingOrder","setBattingOrder2","reverse","daseki","latestDasaki","InitialScore","sendScore","school_id","TeamAdata","TeamBdata","index","sort","a","b","batting_order","position","loardNowDaseki","TableRegister","TmpTableDelete","CalculateBatAvg","DasekiRegister","sendInfo","trigger","setTrigger","loadRegisteredMember","setRegisteredMember","tournament_id","sendEdit","nowIningState","addScoreState","scoreState","nowOutCountState","nowPlayingMember","runnerCountState","freeWriteState","canvasX1","canvasY1","flag","batterResult","isPinch","totalScore","runner","isHit","isFourball","isDeadball","at_bat_id","total_score","pass","hit","foreball","deadball","canvasSize","homebase","InputPlayGame","navigate","PageTransition","url","searchParams","get","urlTournamentName","isExistTmpTable","isDuringGame","Score","freeWriteModeFlag","setFreeWriteModeFlag","setBatterResult","nowPosition","setNowPosition","setRegisteredMember1","setRegisteredMember2","player_name_kanji","setIsPinch","latestBatOrder","setLatestBatOrder","dasekiNum","order","isEditMode","setIsEditMode","sw","document","documentElement","clientWidth","sh","clientHeight","context","setContext","h","l","margin","canvas","getElementById","canvasContext","getContext","addEventListener","rect","getBoundingClientRect","viewX","clientX","left","viewY","clientY","top","scaleWidth","width","scaleHeight","height","canvasX","canvasY","clearRect","baseColor2","strokeStyle","fillStyle","beginPath","moveTo","lineTo","closePath","fill","lineWidth","stroke","fontSize"],"sources":["C:/Users/morim/Desktop/my_folder/school/lesson/ensyu/code/team-b-project/frontend/src/AllPage/InputAll/Sokuho/SokuhoPlaygame/InputPlayGame.jsx"],"sourcesContent":["import { scoreBoard } from './comSokuho/scoreBoard';\r\nimport { outCount } from './comSokuho/outCount'\r\nimport { runnerCount } from './comSokuho/runnerCount';\r\nimport { freeWrite } from './comSokuho/freeWrite'\r\nimport { BaseballButton } from './comSokuho/baseballButton'\r\nimport \"./comSokuho/CSS/scoreBoard.css\"\r\nimport { useEffect, useState } from 'react';\r\nimport Popupfield from \"./comSokuho/onisi_popup/onisi_popup\";\r\nimport GameEndPopup from \"./comSokuho/GameEndPopup/GameEndPopup\"\r\nimport EditPoint from \"./comSokuho/scoreCorrection/EditPoint\"\r\nimport OptionButton from '../../../OtherPage/optionFunc/OptionButton';\r\n\r\n//css\r\nimport \"./InputPlayGame.css\"\r\n\r\nimport { TitleBar } from '../../../OtherPage/TitleBar/TitleBar';\r\n\r\n//プルダウン\r\nimport { PullDown } from './comSokuho/PullDown/PullDown'\r\nimport { PullDownMember } from './comSokuho/PullDown/PullDownMember'\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\n\r\n//canvasの描画\r\nimport { Ground } from './comSokuho/comCanvas/Ground';\r\nimport { battedBall } from './comSokuho/comCanvas/battedBall';\r\n\r\n//バックエンドのurlを取得\r\nconst backendUrl = require(\"../../../../DB/communication\").backendUrl;\r\n\r\n\r\n\r\n\r\n//自作プルダウン　改造あり\r\nconst makePulldown = (pulldownId, ArrayList, idText, nowSelected, setNowSelected, urlSchoolName, urlSchoolName2,\r\n    dasekiAll, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n    setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag,\r\n    battingOrder, battingOrder2\r\n) => {\r\n    //pulldownIdは0でいいです。\r\n    //ArrayListは表示したい要素を並べた配列です、普通の配列ではなく連想配列です。\r\n    //idテキストは連想配列の属性を書きます。\r\n    //nowSelectedは今プルダウンで何が選択されているかが入ります。初期値は[0]で、これは0番目の値が選択されている状態です。\r\n    //setNowSelectedはnowSelecedの値をuseStateの機能で上書きする関数です。setNowSelected(更新値)とすれば、nowSelectedに更新値が入ります。\r\n\r\n    return (\r\n        <>\r\n            <select id=\"tekitouni\"\r\n                onChange={(e) => {\r\n                    //ステイトが変化すると再描画させるための文、これがないと再描画されない\r\n                    //なお、消すと再描画はされないが内部は変化する\r\n                    nowSelected = nowSelected.slice(0, nowSelected.length);\r\n                    nowSelected[pulldownId] = e.target.value\r\n                    setNowSelected(nowSelected)\r\n\r\n                    editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected,\r\n                        setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n                        setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag,\r\n                        battingOrder, battingOrder2\r\n                    )\r\n                }\r\n                }>\r\n                {ArrayList.map((component, ind) => (\r\n                    <option value={ind}>\r\n                        {component[idText]}打席目：{component.inning % 10 === 1 && urlSchoolName}{component.inning % 10 === 2 && urlSchoolName2}\r\n                    </option>\r\n                ))\r\n                }\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\n//打席編集\r\nconst editBattersBox = (battersBox, battersBoxAll, nowSelected,\r\n    setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n    setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag,\r\n    battingOrder, battingOrder2, registeredMember1, registeredMember2) => {\r\n\r\n    console.log(battersBox)\r\n    let touchedCoordinate = battersBox.touched_coordinate.split(\"_\")\r\n    touchedCoordinate = touchedCoordinate.slice(0, touchedCoordinate.length)\r\n\r\n    let teamABatter = 0;\r\n    let teamBpitcher = 0;\r\n    let teamBBatter = 0;\r\n    let teamApitcher = 0;\r\n\r\n    const value = battersBox.inning\r\n    for (let i = nowSelected; i >= 0; i--) {\r\n        if (value !== battersBoxAll[i].inning) {\r\n            teamBBatter = battersBoxAll[i].player_id\r\n            teamApitcher = battersBoxAll[i].pitcher_id\r\n            break\r\n        }\r\n    }\r\n\r\n    console.log(battersBox.ball_kind)\r\n\r\n    battersBoxAll.map((v) => {\r\n        let playerId = []\r\n        if (v.pinch !== \"\" && v.pinch !== \"0\" && v.pinch !== null && v.pinch !== undefined) {\r\n            if (v.pinch.length > 3) {\r\n                playerId = v.pinch.slice(\"→\")\r\n                if (v.inning % 10 - 1 === 0) {\r\n                    battingOrder.map((u) => {\r\n                        if (u.player_id === playerId[0]) {\r\n                            if (registeredMember1.some((w) => w.player_id === playerId[1])) {\r\n\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else if (v.inning % 10 - 1 === 1) {\r\n\r\n                }\r\n            }\r\n            else {\r\n                battersBoxAll[nowSelected].pinch = \"\"\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    //なぜかsetFlagのあるなしで打球がcanvasに描画されるかどうかが変化する\r\n    setNowIningState([Math.floor(battersBox.inning / 10 - 1), battersBox.inning % 10 - 1])\r\n    setNowOutCountState(battersBox.outcount)\r\n    setRunnerCountState([battersBox.base / 100 >= 1, battersBox.base / 10 >= 1 && battersBox.base / 100 < 1, battersBox.base % 10 === 1])\r\n    setFreeWriteState(battersBox.text_inf)\r\n    setFlag(battersBox.ball_kind)\r\n    setcanvasX1(touchedCoordinate[0])\r\n    setcanvasY1(touchedCoordinate[1])\r\n    setAddScoreState(battersBox.score)\r\n\r\n    if (battersBox.inning % 10 === 1) {\r\n        setNowPlayingMember(\r\n            [{\r\n                batter: battingOrder.findIndex((u) => u.player_id === battersBox.player_id),\r\n                pitcher: battingOrder2.findIndex((u) => u.player_id === battersBox.pitcher_id)\r\n            },\r\n            {\r\n                batter: teamBBatter,\r\n                pitcher: teamApitcher\r\n            }]\r\n        )\r\n    }\r\n    else if (battersBox.inning % 10 === 2) {\r\n        setNowPlayingMember(\r\n            [{\r\n                batter: teamABatter,\r\n                pitcher: teamBpitcher\r\n            },\r\n            {\r\n                batter: battingOrder2.findIndex((u) => u.player_id === battersBox.player_id),\r\n                pitcher: battingOrder.findIndex((u) => u.player_id === battersBox.pitcher_id)\r\n            }]\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//試合中の試合の情報を登録する\r\nconst RegisterDuringGame = async (urlGameId) => {\r\n    await fetch(backendUrl + \"/game/during_game_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, tmp_table_name: String(urlGameId) }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n\r\n//試合中の試合の情報を削除する\r\nconst DeleteDuringGame = async (urlGameId) => {\r\n    await fetch(backendUrl + \"/game/during_game_delete\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//試合中の試合の情報を参照する\r\nconst RefDuringGame = async (urlGameId, setIsDuringGame) => {\r\n    fetch(backendUrl + \"/game/ref_during_game\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            if (data.some((v) => String(v.game_id) === urlGameId)) {\r\n                setIsDuringGame(true)\r\n            }\r\n        })\r\n}\r\n\r\n//一時打席情報登録用のテーブル作成\r\nconst TmpTableCreate = async (urlGameId) => {\r\n\r\n    await fetch(backendUrl + \"/daseki/tmp_table_create\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//テーブル存在確認\r\nconst TmpTableCheck = (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState,\r\n    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n\r\n) => {\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_check\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n\r\n            //テーブルが存在しないとき\r\n            if (data === \"not exist\") {\r\n                setIsExistTmpTable(false)\r\n            }\r\n\r\n            //テーブルが存在するとき\r\n            else if (data === \"exist\") {\r\n                console.log(data)\r\n                console.log(\"DBからデータを読み出します\")\r\n                setIsExistTmpTable(true)\r\n                TmpDasekiCall(urlGameId, urlSchoolId, urlSchoolId2,\r\n                    setNowIningState, setScoreState, setNowOutCountState,\r\n                    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n                )\r\n            }\r\n        })\r\n}\r\n\r\n////試合情報受け取り（速報用）\r\nconst TmpDasekiCall = (urlGameId, urlSchoolId, urlSchoolId2,\r\n    setNowIningState, setScoreState, setNowOutCountState,\r\n    setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2) => {\r\n\r\n    //まず打席情報を受け取る\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n            //反転させる\r\n            data.reverse()\r\n\r\n            //代打を反映\r\n            data.map((daseki, ind) => {\r\n                // console.log(daseki.pinch)\r\n            })\r\n\r\n            setDasekiAll(data)\r\n\r\n            //空っぽなら無視\r\n            if (data.length !== 0) {\r\n                let latestDasaki = data[data.length - 1]\r\n\r\n                if (latestDasaki.outcount === 3) {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(0)\r\n\r\n                    //イニング取得\r\n                    if (latestDasaki.inning % 10 === 1) {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1])\r\n                    }\r\n                    else {\r\n                        setNowIningState([Math.floor(latestDasaki.inning / 10), 0])\r\n                    }\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([false, false, false])\r\n\r\n                }\r\n\r\n                else {\r\n                    //アウトカウント取得\r\n                    setNowOutCountState(latestDasaki.outcount)\r\n\r\n                    //イニング取得\r\n                    setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1])\r\n\r\n                    //ランナー取得\r\n                    setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"])\r\n                }\r\n\r\n\r\n                //スコア取得\r\n                //スコアの初期化\r\n                const InitialScore = [\r\n                    [null, null, null, null, null, null, null, null, null, null, null, null],\r\n                    [null, null, null, null, null, null, null, null, null, null, null, null]\r\n                ]\r\n\r\n                let sendScore = InitialScore\r\n                data.map((u) => {\r\n                    //null対策\r\n                    if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0\r\n                    //受け取ったスコアを配列に格納\r\n                    sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score\r\n                })\r\n                setScoreState(sendScore)\r\n\r\n\r\n                //今現在のプレイヤー取得\r\n                //まずは先行チーム\r\n                fetch(backendUrl + \"/member/starting_member_call\", {\r\n                    method: \"POST\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n                })\r\n                    .then((response) => response.json())\r\n                    .then((TeamAdata) => {\r\n\r\n\r\n                        //後攻チーム\r\n                        //打順を持ってくる\r\n                        fetch(backendUrl + \"/member/starting_member_call\", {\r\n                            method: \"POST\",\r\n                            mode: \"cors\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n                        })\r\n                            .then((response) => response.json())\r\n                            .then((TeamBdata) => {\r\n\r\n                                let text = null\r\n                                let index = 0\r\n                                // data.map((v) => {\r\n                                //     if (v.pinch === null || v.pinch === 0) {\r\n                                //         text = v.pinch.split(\"→\")\r\n\r\n                                //         if (v.inning % 10 - 1 === 0) {\r\n                                //             index = TeamAdata.findIndex((u) => u.player_id === text[0])\r\n                                //         }\r\n                                //         else {\r\n\r\n                                //         }\r\n                                //     }\r\n                                //     console.log(v)\r\n                                // })\r\n\r\n                                console.log(TeamAdata)\r\n                                TeamAdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                                setBattingOrder(TeamAdata)\r\n\r\n                                TeamBdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                                setBattingOrder2(TeamBdata)\r\n\r\n                                let teamABatter = 0\r\n                                let teamApitcher = 0\r\n                                let teamBBatter = 0\r\n                                let teamBpitcher = 0\r\n\r\n                                //さっきの打席が先攻チームだった場合\r\n                                if (latestDasaki.inning % 10 - 1 === 0) {\r\n                                    teamABatter = TeamAdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamBpitcher = TeamBdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            teamBBatter = TeamBdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamApitcher = TeamAdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    if (latestDasaki.outcount !== 3) teamABatter++\r\n                                    //過去に後攻の打席がある場合\r\n                                    else if (data.some((v) => v.inning % 10 - 1 === 1)) teamBBatter++\r\n                                }\r\n\r\n                                //後攻\r\n                                else if (latestDasaki.inning % 10 - 1 === 1) {\r\n                                    for (let i = data.length - 1; i >= 0; i--) {\r\n                                        if (latestDasaki.inning !== data[i].inning) {\r\n                                            console.log(data[i])\r\n                                            teamABatter = TeamAdata.findIndex((u) => u.player_id === data[i].player_id)\r\n                                            teamBpitcher = TeamBdata.findIndex((u) => u.player_id === data[i].pitcher_id)\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                    teamBBatter = TeamBdata.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n                                    teamApitcher = TeamAdata.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n                                    if (data[data.length - 1].outcount !== 3) teamBBatter++\r\n                                    else teamABatter++\r\n                                }\r\n\r\n                                //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\r\n                                if (teamABatter === 9 || teamABatter === -1) teamABatter = 0\r\n                                if (teamBpitcher === -1) teamBpitcher = 0\r\n                                if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0\r\n                                if (teamApitcher === -1) teamApitcher = 0\r\n\r\n                                //最後に今現在プレイ中の選手を格納\r\n                                setNowPlayingMember(\r\n                                    [{\r\n                                        batter: teamABatter,\r\n                                        pitcher: teamBpitcher\r\n                                    },\r\n                                    {\r\n                                        batter: teamBBatter,\r\n                                        pitcher: teamApitcher\r\n                                    }]\r\n                                )\r\n                            })\r\n                    })\r\n            }\r\n\r\n            //打席情報に何も入ってないとき\r\n            if (data.length === 0) {\r\n                //最初のプレイヤー取得\r\n                //まずは先行チーム\r\n                fetch(backendUrl + \"/member/starting_member_call\", {\r\n                    method: \"POST\",\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId }),\r\n                })\r\n                    .then((response) => response.json())\r\n                    .then((TeamAdata) => {\r\n                        TeamAdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                        setBattingOrder(TeamAdata)\r\n\r\n                        //後攻チーム\r\n                        //打順を持ってくる\r\n                        fetch(backendUrl + \"/member/starting_member_call\", {\r\n                            method: \"POST\",\r\n                            mode: \"cors\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                            body: JSON.stringify({ game_id: urlGameId, school_id: urlSchoolId2 }),\r\n                        })\r\n                            .then((response) => response.json())\r\n                            .then((TeamBdata) => {\r\n                                TeamBdata.sort((a, b) => a.batting_order - b.batting_order)\r\n                                setBattingOrder2(TeamBdata)\r\n\r\n                                let teamABatter = 0\r\n                                let teamBpitcher = TeamBdata.findIndex((v) => v.position === \"ピッチャー\")\r\n                                let teamBBatter = 0\r\n                                let teamApitcher = TeamAdata.findIndex((v) => v.position === \"ピッチャー\")\r\n\r\n                                //最後に今現在プレイ中の選手を格納\r\n                                setNowPlayingMember(\r\n                                    [{\r\n                                        batter: teamABatter,\r\n                                        pitcher: teamBpitcher\r\n                                    },\r\n                                    {\r\n                                        batter: teamBBatter,\r\n                                        pitcher: teamApitcher\r\n                                    }]\r\n                                )\r\n                            })\r\n                    })\r\n            }\r\n        })\r\n}\r\n\r\n\r\n//DBを介さない試合情報受け取り（速報用）\r\nconst loardNowDaseki = (setNowOutCountState, setNowIningState, setRunnerCountState, setScoreState,\r\n    setNowPlayingMember, setFreeWriteState,\r\n    dasekiAll, battingOrder, battingOrder2) => {\r\n\r\n    //空っぽなら無視\r\n    if (dasekiAll.length !== 0) {\r\n        let latestDasaki = dasekiAll[dasekiAll.length - 1]\r\n\r\n\r\n        //自由記述は空\r\n        setFreeWriteState(\"\")\r\n\r\n        if (latestDasaki.outcount === 3) {\r\n            //アウトカウント取得\r\n            setNowOutCountState(0)\r\n\r\n            //イニング取得\r\n            if (latestDasaki.inning % 10 === 1) {\r\n                setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, 1])\r\n            }\r\n            else {\r\n                setNowIningState([Math.floor(latestDasaki.inning / 10), 0])\r\n            }\r\n\r\n            //ランナー取得\r\n            setRunnerCountState([false, false, false])\r\n\r\n        }\r\n\r\n        else {\r\n            //アウトカウント取得\r\n            setNowOutCountState(latestDasaki.outcount)\r\n\r\n            //イニング取得\r\n            setNowIningState([Math.floor(latestDasaki.inning / 10) - 1, latestDasaki.inning % 10 - 1])\r\n\r\n            //ランナー取得\r\n            setRunnerCountState([latestDasaki.base[0] === \"1\", latestDasaki.base[1] === \"1\", latestDasaki.base[2] === \"1\"])\r\n        }\r\n\r\n\r\n        //スコア取得\r\n        //スコアの初期化\r\n        const InitialScore = [\r\n            [null, null, null, null, null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null, null, null, null, null]\r\n        ]\r\n\r\n        let sendScore = InitialScore\r\n        dasekiAll.map((u) => {\r\n            //null対策\r\n            if (sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] === null) sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = 0\r\n            //受け取ったスコアを配列に格納\r\n            sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] = sendScore[u.inning % 10 - 1][Math.floor(u.inning / 10) - 1] + u.score\r\n        })\r\n        setScoreState(sendScore)\r\n\r\n\r\n\r\n        //今現在のプレイヤー取得\r\n        //まずは先行チーム\r\n        //後攻チーム\r\n        let teamABatter = 0\r\n        let teamApitcher = 0\r\n        let teamBBatter = 0\r\n        let teamBpitcher = 0\r\n\r\n        //先攻\r\n        if (latestDasaki.inning % 10 - 1 === 0) {\r\n            teamABatter = battingOrder.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n            teamBpitcher = battingOrder2.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n            for (let i = dasekiAll.length - 1; i >= 0; i--) {\r\n                if (latestDasaki.inning !== dasekiAll[i].inning) {\r\n                    teamBBatter = battingOrder2.findIndex((u) => u.player_id === dasekiAll[i].player_id)\r\n                    teamApitcher = battingOrder.findIndex((u) => u.player_id === dasekiAll[i].pitcher_id)\r\n                    break\r\n                }\r\n            }\r\n            if (dasekiAll[dasekiAll.length - 1].outcount !== 3) teamABatter++\r\n            else teamBBatter++\r\n        }\r\n        //後攻\r\n        else if (latestDasaki.inning % 10 - 1 === 1) {\r\n            for (let i = dasekiAll.length - 1; i >= 0; i--) {\r\n                if (latestDasaki.inning !== dasekiAll[i].inning) {\r\n                    console.log(dasekiAll[i])\r\n                    teamABatter = battingOrder.findIndex((u) => u.player_id === dasekiAll[i].player_id)\r\n                    teamBpitcher = battingOrder2.findIndex((u) => u.player_id === dasekiAll[i].pitcher_id)\r\n                    break\r\n                }\r\n            }\r\n            teamBBatter = battingOrder2.findIndex((u) => u.player_id === latestDasaki.player_id)\r\n            teamApitcher = battingOrder.findIndex((u) => u.player_id === latestDasaki.pitcher_id)\r\n            if (dasekiAll[dasekiAll.length - 1].outcount !== 3) teamBBatter++\r\n            else teamABatter++\r\n        }\r\n\r\n        //打順に存在しないか最初の打者であるとき、もしくは打順最後の打者であるとき\r\n        if (teamABatter === 9 || teamABatter === -1) teamABatter = 0\r\n        if (teamBpitcher === -1) teamBpitcher = 0\r\n        if (teamBBatter === 9 || teamBBatter === -1) teamBBatter = 0\r\n        if (teamApitcher === -1) teamApitcher = 0\r\n\r\n        //最後に今現在プレイ中の選手を格納\r\n        setNowPlayingMember(\r\n            [{\r\n                batter: teamABatter,\r\n                pitcher: teamBpitcher\r\n            },\r\n            {\r\n                batter: teamBBatter,\r\n                pitcher: teamApitcher\r\n            }]\r\n        )\r\n    }\r\n}\r\n\r\n//一時打席情報を本打席テーブルに送る\r\nconst TableRegister = (urlGameId) => {\r\n\r\n    console.log(urlGameId + \"の試合情報を登録しました\")\r\n\r\n    fetch(backendUrl + \"/daseki/data_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//一時打席情報を削除\r\nconst TmpTableDelete = (urlGameId) => {\r\n\r\n    console.log(urlGameId + \"の試合情報を削除しました\")\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_table_delete\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//打率計算\r\nconst CalculateBatAvg = (urlGameId) => {\r\n\r\n    console.log(\"打率計算関数を呼び出しました\")\r\n\r\n    fetch(backendUrl + \"/member/cal_BA\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ game_id: urlGameId, table_name: urlGameId }),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => { console.log(data) })\r\n}\r\n\r\n//一時打席情報登録用のテーブルに打席情報登録（UPSERTを使うかも）\r\nconst DasekiRegister = (sendInfo, trigger, setTrigger) => {\r\n\r\n    fetch(backendUrl + \"/daseki/daseki_register\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            if (data === \"OK\") {\r\n                setTrigger(!trigger)\r\n            }\r\n        })\r\n}\r\n\r\n\r\n//選手登録された選手読み込む\r\nconst loadRegisteredMember = (setRegisteredMember, urlTournamentId, urlSchoolId) => {\r\n\r\n    fetch(backendUrl + \"/member/tournament_member_call\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify({ tournament_id: urlTournamentId, school_id: urlSchoolId }),\r\n    })\r\n        .then((response) => response.json())\r\n        .then((data) => { setRegisteredMember(data) })\r\n}\r\n\r\n\r\n//修正内容をバックエンドに送る\r\nconst sendEdit = (\r\n    urlGameId,\r\n    dasekiAll,\r\n    nowSelected,\r\n    nowIningState,\r\n    addScoreState,\r\n    scoreState,\r\n    nowOutCountState,\r\n    nowPlayingMember,\r\n    battingOrder,\r\n    battingOrder2,\r\n    runnerCountState,\r\n    freeWriteState,\r\n    canvasX1,\r\n    canvasY1,\r\n    flag,\r\n    batterResult,\r\n    isPinch,\r\n) => {\r\n    console.log(dasekiAll[nowSelected])\r\n    //DBに送るための準備\r\n\r\n    let totalScore = 0\r\n    scoreState[nowIningState[1]].map((score) => {\r\n        totalScore = totalScore + score\r\n    })\r\n    let runnerCount = \"\"\r\n    runnerCountState.map((runner) => {\r\n        if (runner === true) runnerCount = \"1\" + runnerCount\r\n        else if (runner === false) runnerCount = \"0\" + runnerCount\r\n    })\r\n    let isHit = 0; let isFourball = 0; let isDeadball = 0;\r\n    if (batterResult === 0) { }\r\n    else if (batterResult === 1) isHit = 1\r\n    else if (batterResult === 2) isFourball = 1\r\n    else if (batterResult === 3) isDeadball = 1\r\n\r\n    //DBにデータを送る\r\n    let sendInfo = {\r\n        table_name: urlGameId,\r\n        at_bat_id: dasekiAll[nowSelected].at_bat_id,\r\n        inning: (nowIningState[1] + 1) * 10 + (nowIningState[0] + 1),\r\n        game_id: urlGameId,\r\n        school_id: dasekiAll[nowSelected].school_id,\r\n        player_id: battingOrder[nowPlayingMember[nowIningState[1]].batter].player_id,\r\n        pitcher_id: battingOrder2[nowPlayingMember[nowIningState[1]].pitcher].player_id,\r\n        score: addScoreState,\r\n        total_score: totalScore,\r\n        outcount: nowOutCountState,\r\n        base: runnerCount,\r\n        text_inf: freeWriteState,\r\n        pass: 0,\r\n        touched_coordinate: canvasX1 + \"_\" + canvasY1,\r\n        ball_kind: flag,\r\n        hit: isHit,\r\n        foreball: isFourball,\r\n        deadball: isDeadball,\r\n        pinch: isPinch\r\n    }\r\n\r\n\r\n\r\n    fetch(backendUrl + \"/daseki/tmp_daseki_update\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: { \"Content-Type\": \"application/json\", },\r\n        body: JSON.stringify(sendInfo),\r\n    })\r\n        .then((response) => response.text())\r\n        .then((data) => {\r\n            console.log(data)\r\n        })\r\n\r\n    console.log(sendInfo)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst canvasSize = 1000;\r\nconst homebase = 400;\r\n\r\nconst InputPlayGame = () => {\r\n\r\n    //ページ遷移用\r\n    const navigate = useNavigate()\r\n    const PageTransition = (url) => {\r\n        navigate(url)\r\n    }\r\n\r\n    //urlから値を読み出す\r\n    const [searchParams] = useSearchParams();\r\n    const urlTournamentId = searchParams.get(\"urlTournamentId\")\r\n    const urlTournamentName = searchParams.get(\"urlTournamentName\")\r\n    const urlSchoolId = searchParams.get(\"urlSchoolId\")\r\n    const urlSchoolName = searchParams.get(\"urlSchoolName\")\r\n    const urlSchoolId2 = searchParams.get(\"urlSchoolId2\")\r\n    const urlSchoolName2 = searchParams.get(\"urlSchoolName2\")\r\n    const urlGameId = searchParams.get(\"urlGameId\")\r\n\r\n    //試合の一時テーブルが存在するかどうかを管理するステイト\r\n    const [isExistTmpTable, setIsExistTmpTable] = useState(false)\r\n\r\n    //試合中かどうかを管理するステイト\r\n    const [isDuringGame, setIsDuringGame] = useState(false)\r\n\r\n    //Score記録 左が裏表、右が回数 イニングとは逆\r\n    const { Score } = require(\"../../../../DB/Score\")\r\n    const [scoreState, setScoreState] = useState(Score)\r\n\r\n    //Scoreの加算値の監視\r\n    const [addScoreState, setAddScoreState] = useState(0)\r\n\r\n    //今のイニング 左が回、右が表裏\r\n    const [nowIningState, setNowIningState] = useState([0, 0])\r\n\r\n    //自由記述内容を監視\r\n    const [freeWriteState, setFreeWriteState] = useState(\"\")//いらんかも\r\n\r\n    //自由記述編集モードのフラグ\r\n    const [freeWriteModeFlag, setFreeWriteModeFlag] = useState(false)\r\n\r\n    //多分打球の種類だと思われる\r\n    const [flag, setFlag] = useState(2);\r\n\r\n    //打者の結果を記録する(0:何もなし, 1:ヒット,2:四球, 3:死球)\r\n    const [batterResult, setBatterResult] = useState(0)\r\n\r\n\r\n    //緑プルダウン用\r\n    const [nowPosition, setNowPosition] = useState(15)\r\n\r\n    //アウトカウント\r\n    const [nowOutCountState, setNowOutCountState] = useState(0)\r\n\r\n    //ランナーカウント\r\n    const [runnerCountState, setRunnerCountState] = useState([false, false, false])\r\n\r\n    //選手登録情報を読み込む\r\n    const [registeredMember1, setRegisteredMember1] = useState([])\r\n    const [registeredMember2, setRegisteredMember2] = useState([])\r\n\r\n    //打席一覧情報のステイト\r\n    const [dasekiAll, setDasekiAll] = useState([{\r\n        at_bat_id: 1, ball_kind: \"2\", base: \"000\",\r\n        deadball: 0, foreball: 0, game_id: 1,\r\n        hit: 0, inning: 11, outcount: 3,\r\n        pass: 0, pinch: \"0\", pitcher_id: 21, player_id: 7,\r\n        school_id: 1, score: 0, text_inf: \"データなし\",\r\n        total_score: 0, touched_coordinate: \"400_450\"\r\n    }])\r\n\r\n    //打席一覧情報のプルダウンの選択状況を管理するステイト\r\n    const [nowSelected, setNowSelected] = useState([0])\r\n\r\n    //打順と打者のリスト\r\n    const [battingOrder, setBattingOrder] = useState([[{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }], 0])\r\n    const [battingOrder2, setBattingOrder2] = useState([{ player_name_kanji: '丹羽 長秀' }, { player_name_kanji: '柴田 勝家' }])\r\n\r\n    //今の打順と今のピッチャーが誰なのかを2チーム文記録する\r\n    const [nowPlayingMember, setNowPlayingMember] = useState([{ batter: 0, pitcher: 0 }, { batter: 0, pitcher: 0 }])\r\n\r\n    //代打フラグ 4→15,12→6\r\n    const [isPinch, setIsPinch] = useState(null)\r\n\r\n    //代打で変更される前の打順を記録するステイト\r\n    const [latestBatOrder, setLatestBatOrder] = useState({ dasekiNum: 0, order: [] })\r\n\r\n    //データを読み込みを行うトリガー\r\n    const [trigger, setTrigger] = useState(true)\r\n\r\n    //編集モードであるかどうかを監視するステイト\r\n    const [isEditMode, setIsEditMode] = useState(false)\r\n\r\n\r\n    //画面解像度取得\r\n    var sw = document.documentElement.clientWidth; // 画面の横幅\r\n    var sh = document.documentElement.clientHeight; // 画面の高さ\r\n\r\n    // contextを状態として持つ\r\n    const [context, setContext] = useState(null)\r\n\r\n\r\n    const [canvasX1, setcanvasX1] = useState(0)\r\n    const [canvasY1, setcanvasY1] = useState(0)\r\n    //一つのStateで管理しようぜ的な試み\r\n    //const [canvasXY, setCanvasXY] = useState({x:0, y:0})\r\n\r\n    // コンポーネントの初期化完了後コンポーネント状態にコンテキストを登録\r\n\r\n    const homebase = 520;\r\n    const h = 70;\r\n    const l = -110;\r\n    const w = 0.03 * homebase;  //ベースの幅\r\n    const margin = 10;    //ベース位置調整用\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"canvas\")\r\n        const canvasContext = canvas.getContext(\"2d\")\r\n        setContext(canvasContext)\r\n\r\n\r\n\r\n        canvas.addEventListener(\"click\", e => {\r\n            const rect = e.target.getBoundingClientRect();\r\n\r\n            // ブラウザ上での座標を求める\r\n            const viewX = e.clientX - rect.left,\r\n                viewY = e.clientY - rect.top;\r\n\r\n            // 表示サイズとキャンバスの実サイズの比率を求める\r\n            const scaleWidth = canvas.clientWidth / canvas.width,\r\n                scaleHeight = canvas.clientHeight / canvas.height;\r\n\r\n            // ブラウザ上でのクリック座標をキャンバス上に変換\r\n            const canvasX = Math.floor(viewX / scaleWidth),\r\n                canvasY = Math.floor(viewY / scaleHeight);\r\n\r\n            console.log(canvasX, canvasY);\r\n            setcanvasX1(canvasX);\r\n            setcanvasY1(canvasY);\r\n        });\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n            Ground(context);\r\n        }\r\n    }, [context])\r\n\r\n\r\n    // 状態にコンテキストが登録されたらそれに対して操作できる\r\n    useEffect(() => {\r\n        if (context !== null) {\r\n\r\n            //削除\r\n            context.clearRect(0, 0, canvasSize, canvasSize);\r\n\r\n            Ground(context);\r\n\r\n            //ベースの色\r\n            let baseColor2 = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                if (runnerCountState[i]) {\r\n                    baseColor2[i] = \"blue\";\r\n                    console.log(baseColor2[i]);\r\n                }\r\n                else {\r\n                    baseColor2[i] = \"white\";\r\n                }\r\n            }\r\n\r\n\r\n            context.strokeStyle = \"black\";\r\n\r\n            //３塁ベース\r\n            context.fillStyle = baseColor2[0];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 3 / 4 + l, homebase * 3 / 4 - margin + h);\r\n            context.lineTo(homebase * 3 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.lineTo(homebase * 3 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\r\n            context.lineTo(homebase * 3 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.lineWidth = 1;\r\n            context.stroke();\r\n\r\n            //2塁ベース\r\n            context.fillStyle = baseColor2[1];\r\n            context.beginPath();\r\n            context.moveTo(homebase + l, homebase / 2 - margin + h);\r\n            context.lineTo(homebase - w + l, homebase / 2 + w - margin + h);\r\n            context.lineTo(homebase + l, homebase / 2 + w * 2 - margin + h);\r\n            context.lineTo(homebase + w + l, homebase / 2 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            //1塁ベース\r\n            context.fillStyle = baseColor2[2];\r\n            context.beginPath();\r\n            context.moveTo(homebase * 5 / 4 + l, homebase * 3 / 4 - margin + h);\r\n            context.lineTo(homebase * 5 / 4 - w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.lineTo(homebase * 5 / 4 + l, homebase * 3 / 4 + w * 2 - margin + h);\r\n            context.lineTo(homebase * 5 / 4 + w + l, homebase * 3 / 4 + w - margin + h);\r\n            context.closePath();\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            battedBall(context, canvasX1, canvasY1, flag);\r\n\r\n        }\r\n    }, [canvasX1, canvasY1, flag, runnerCountState])\r\n\r\n    useEffect(() => {\r\n        //データベースからデータをもらうために呼び出す\r\n        // setBatter(setBattingOrder, setBattingOrder2, urlSchoolId, urlSchoolId2, urlGameId, nowPlayingMember, setNowPlayingMember)\r\n\r\n        //チーム1の選手登録情報を読み出す\r\n        loadRegisteredMember(setRegisteredMember1, urlTournamentId, urlSchoolId)\r\n\r\n        //チーム2の選手登録情報を読み出す\r\n        loadRegisteredMember(setRegisteredMember2, urlTournamentId, urlSchoolId2)\r\n\r\n\r\n\r\n        RefDuringGame(urlGameId, setIsDuringGame)\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //テーブル存在確認\r\n        TmpTableCheck(urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n            setNowIningState, setScoreState, setNowOutCountState,\r\n            setNowPlayingMember, setRunnerCountState, setDasekiAll, setBattingOrder, setBattingOrder2\r\n        )\r\n    }, [trigger])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"InputPlayGame\">\r\n            <TitleBar\r\n                TitleText={\"速報入力画面\"}\r\n                PageTransition={PageTransition}\r\n                valueUrl={-1}\r\n            />\r\n\r\n            <OptionButton />\r\n\r\n\r\n            {(!isExistTmpTable ||\r\n                !isDuringGame) &&\r\n                <div>\r\n                    <button\r\n                        style={{ height: 100 + \"px\", width: 30 + \"%\", fontSize: 30 + \"px\" }}\r\n                        onClick={async () => {\r\n                            await TmpTableCreate(urlGameId)\r\n                            await RegisterDuringGame(urlGameId)\r\n                            await TmpTableCheck\r\n                                (urlGameId, setIsExistTmpTable, TmpDasekiCall, urlTournamentId, urlSchoolId, urlSchoolId2,\r\n                                    setNowIningState, setScoreState, setNowOutCountState,\r\n                                    setNowPlayingMember, battingOrder, setBattingOrder, battingOrder2, setBattingOrder2, setRunnerCountState, setDasekiAll\r\n                                )\r\n                        }}\r\n                    >試合を開始する\r\n                    </button>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"parts\">\r\n                {(isExistTmpTable &&\r\n                    isDuringGame\r\n                ) &&\r\n                    <>\r\n                        <div className=\"scoreBoard\">\r\n                            {scoreBoard(scoreState, nowIningState, urlSchoolName, urlSchoolName2)}\r\n                        </div>\r\n                        <div className=\"optionButtons\">\r\n                        </div>\r\n                        <div className=\"outCountsAndRunnerCounts\">\r\n                            <div className='outCount'>\r\n                                <div className=\"outCountDisplay\">o</div>\r\n                                {outCount(nowOutCountState, setNowOutCountState)}\r\n                            </div>\r\n                            {runnerCount(runnerCountState, setRunnerCountState)}\r\n                        </div>\r\n                        <div className=\"BatterAndPitcher\">\r\n\r\n                        </div>\r\n                        <div className=\"BatterPitcher\">\r\n                            {/* プルダウン1  選手を表示するためのプルダウン */}\r\n                            <PullDownMember\r\n                                battingOrder={battingOrder}\r\n                                battingOrder2={battingOrder2}\r\n                                setBattingOrder={setBattingOrder}\r\n                                setBattingOrder2={setBattingOrder2}\r\n                                registeredMember1={registeredMember1}\r\n                                registeredMember2={registeredMember2}\r\n                                nowIningState={nowIningState}\r\n                                nowPlayingMember={nowPlayingMember}\r\n                                setNowPlayingMember={setNowPlayingMember}\r\n                                setIsPinch={setIsPinch}\r\n                                latestBatOrder={latestBatOrder}\r\n                                setLatestBatOrder={setLatestBatOrder}\r\n                                dasekiAll={dasekiAll}\r\n                                dasekiNum={dasekiAll.length}\r\n                            />\r\n                        </div>\r\n                        <div className=\"freeWrite\">\r\n                            {freeWrite(freeWriteState, setFreeWriteState, freeWriteModeFlag, setFreeWriteModeFlag)}\r\n                        </div>\r\n\r\n                        {/* プルダウン2 */}\r\n                        <PullDown\r\n                            nowPosition={nowPosition}\r\n                            setNowPosition={setNowPosition}\r\n                            setcanvasX1={setcanvasX1}\r\n                            setcanvasY1={setcanvasY1}\r\n                            setFlag={setFlag}\r\n                            setFreeWriteState={setFreeWriteState}\r\n                            setBatterResult={setBatterResult}\r\n                            addScoreState={addScoreState}\r\n                            GameEndPopup_field={GameEndPopup}\r\n                            TableRegister={TableRegister}\r\n                            urlGameId={urlGameId}\r\n                            TmpTableDelete={TmpTableDelete}\r\n                            DeleteDuringGame={DeleteDuringGame}\r\n                            CalculateBatAvg={CalculateBatAvg}\r\n                            nowOutCountState={nowOutCountState}\r\n                            setNowOutCountState={setNowOutCountState}\r\n                        />\r\n                    </>}\r\n\r\n                {/* キャンバスについて */}\r\n                <div className=\"diamond\">\r\n                    <canvas width=\"800\" height=\"800\" id=\"canvas\" className='diamondPng'></canvas>\r\n                </div>\r\n\r\n                <div className=\"Buttons\">\r\n                    <div className=\"baseballButtons\">\r\n                        {BaseballButton(addScoreState, setAddScoreState)}\r\n                    </div>\r\n                    {!isEditMode &&\r\n                        <>\r\n                            <div className=\"updateButton\">\r\n                                {/* ポップアップ*/}\r\n                                <Popupfield\r\n                                    nowIningState={nowIningState} //今が何回なのか\r\n                                    setNowIningState={setNowIningState} //今が何回なのかの変更関数\r\n                                    addScoreState={addScoreState}\r\n                                    setAddScoreState={setAddScoreState}\r\n                                    scoreState={scoreState}\r\n                                    setScoreState={setScoreState}\r\n                                    nowOutCountState={nowOutCountState}\r\n                                    setNowOutCountState={setNowOutCountState}\r\n                                    DasekiRegister={DasekiRegister}\r\n                                    urlGameId={urlGameId}\r\n                                    urlSchoolId={urlSchoolId}\r\n                                    urlSchoolId2={urlSchoolId2}\r\n                                    nowPlayingMember={nowPlayingMember}\r\n                                    setNowPlayingMember={setNowPlayingMember}\r\n                                    battingOrder={battingOrder}\r\n                                    battingOrder2={battingOrder2}\r\n                                    runnerCountState={runnerCountState}\r\n                                    freeWriteState={freeWriteState}\r\n                                    setFreeWriteState={setFreeWriteState}\r\n                                    canvasX1={canvasX1}\r\n                                    setcanvasX1={setcanvasX1}\r\n                                    canvasY1={canvasY1}\r\n                                    setcanvasY1={setcanvasY1}\r\n                                    flag={flag}\r\n                                    batterResult={batterResult}\r\n                                    setBatterResult={setBatterResult}\r\n                                    isPinch={isPinch}\r\n                                    setIsPinch={setIsPinch}\r\n                                    TmpDasekiCall={TmpDasekiCall}\r\n                                    trigger={trigger}\r\n                                    setTrigger={setTrigger}\r\n\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    }\r\n\r\n                </div>\r\n\r\n                {isEditMode &&\r\n                    makePulldown(0, dasekiAll, \"at_bat_id\", nowSelected, setNowSelected, urlSchoolName, urlSchoolName2,\r\n                        dasekiAll, setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n                        setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag,\r\n                        battingOrder, battingOrder2\r\n                    )\r\n                }\r\n\r\n                {/* 修正モード */}\r\n                {!isEditMode &&\r\n                    <button onClick={() => {\r\n                        setIsEditMode(true);\r\n                        editBattersBox(dasekiAll[nowSelected], dasekiAll, nowSelected,\r\n                            setNowIningState, setNowOutCountState, setRunnerCountState, setNowPlayingMember,\r\n                            setFreeWriteState, setcanvasX1, setcanvasY1, setAddScoreState, setFlag,\r\n                            battingOrder, battingOrder2\r\n                        )\r\n                    }}>修正モード\r\n                    </button>\r\n                }\r\n                {isEditMode &&\r\n                    <button onClick={() => {\r\n                        setIsEditMode(false)\r\n                        loardNowDaseki(setNowOutCountState, setNowIningState, setRunnerCountState, setScoreState,\r\n                            setNowPlayingMember, setFreeWriteState,\r\n                            dasekiAll, battingOrder, battingOrder2)\r\n                        setNowSelected([0])\r\n                    }}>速報入力に戻る\r\n                    </button>\r\n                }\r\n\r\n\r\n                {isEditMode &&\r\n                    <button\r\n                        onClick={() =>\r\n                            sendEdit(\r\n                                urlGameId,\r\n                                dasekiAll,\r\n                                nowSelected,\r\n                                nowIningState,\r\n                                addScoreState,\r\n                                scoreState,\r\n                                nowOutCountState,\r\n                                nowPlayingMember,\r\n                                battingOrder,\r\n                                battingOrder2,\r\n                                runnerCountState,\r\n                                freeWriteState,\r\n                                canvasX1,\r\n                                canvasY1,\r\n                                flag,\r\n                                batterResult,\r\n                                isPinch,\r\n                            )}\r\n                    >修正確定</button>}\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default InputPlayGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}